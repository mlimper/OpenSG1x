/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LineChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLINECHUNKBASE_H_
#define _OSGLINECHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>

#include <OSGStateChunk.h> // Parent

#include <OSGReal32Fields.h> // Width type
#include <OSGInt32Fields.h> // StippleRepeat type
#include <OSGUInt16Fields.h> // StipplePattern type
#include <OSGBoolFields.h> // Smooth type

#include <OSGLineChunkFields.h>

OSG_BEGIN_NAMESPACE

class LineChunk;
class BinaryDataHandler;

//! \brief LineChunk Base Class.

class OSG_SYSTEMLIB_DLLMAPPING LineChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        WidthFieldId          = Inherited::NextFieldId,
        StippleRepeatFieldId  = WidthFieldId          + 1,
        StipplePatternFieldId = StippleRepeatFieldId  + 1,
        SmoothFieldId         = StipplePatternFieldId + 1,
        NextFieldId           = SmoothFieldId         + 1
    };

    static const osg::BitVector WidthFieldMask;
    static const osg::BitVector StippleRepeatFieldMask;
    static const osg::BitVector StipplePatternFieldMask;
    static const osg::BitVector SmoothFieldMask;


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    inline       SFReal32            *getSFWidth          (void);
    inline       SFInt32             *getSFStippleRepeat  (void);
    inline       SFUInt16            *getSFStipplePattern (void);
    inline       SFBool              *getSFSmooth         (void);

    inline       Real32              &getWidth          (void);
    inline const Real32              &getWidth          (void) const;
    inline       Int32               &getStippleRepeat  (void);
    inline const Int32               &getStippleRepeat  (void) const;
    inline       UInt16              &getStipplePattern (void);
    inline const UInt16              &getStipplePattern (void) const;
    inline       bool                &getSmooth         (void);
    inline const bool                &getSmooth         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    inline void setWidth          ( const Real32 &value );
    inline void setStippleRepeat  ( const Int32 &value );
    inline void setStipplePattern ( const UInt16 &value );
    inline void setSmooth         ( const bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  LineChunkPtr      create          (void); 
    static  LineChunkPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfWidth;
    SFInt32             _sfStippleRepeat;
    SFUInt16            _sfStipplePattern;
    SFBool              _sfSmooth;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    LineChunkBase(void);
    LineChunkBase(const LineChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~LineChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      LineChunkBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const LineChunkBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef LineChunkBase *LineChunkBaseP;

OSG_END_NAMESPACE

#define OSGLINECHUNKBASE_HEADER_CVSID "@(#)$Id: OSGLineChunkBase.h,v 1.4 2002/03/19 18:08:16 dirk Exp $"

#endif /* _OSGLINECHUNKBASE_H_ */
