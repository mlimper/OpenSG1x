/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILESTATE
#define OSG_COMPILEMATERIALCHUNKINST

#include "OSGMaterialChunkBase.h"
#include "OSGMaterialChunk.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		MaterialChunkBase::DiffuseFieldId;
const OSG::BitVector	MaterialChunkBase::DiffuseFieldMask;

const OSG::UInt32		MaterialChunkBase::AmbientFieldId;
const OSG::BitVector	MaterialChunkBase::AmbientFieldMask;

const OSG::UInt32		MaterialChunkBase::SpecularFieldId;
const OSG::BitVector	MaterialChunkBase::SpecularFieldMask;

const OSG::UInt32		MaterialChunkBase::EmissionFieldId;
const OSG::BitVector	MaterialChunkBase::EmissionFieldMask;

const OSG::UInt32		MaterialChunkBase::ShininessFieldId;
const OSG::BitVector	MaterialChunkBase::ShininessFieldMask;


const OSG::UInt32    	MaterialChunkBase::NextFieldId; 
const OSG::BitVector 	MaterialChunkBase::NextFieldMask;


char MaterialChunkBase::cvsid[] = "@(#)$Id: OSGMaterialChunkBase.cpp,v 1.3 2001/05/30 16:25:24 vossg Exp $";

/** \brief Group field description
 */

FieldDescription MaterialChunkBase::_desc[] = 
{
    FieldDescription(SFColor4f::getClassType(), 
                     "diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &MaterialChunkBase::getSFDiffuse),
    FieldDescription(SFColor4f::getClassType(), 
                     "ambient", 
                     AmbientFieldId, AmbientFieldMask,
                     false,
                     (FieldAccessMethod) &MaterialChunkBase::getSFAmbient),
    FieldDescription(SFColor4f::getClassType(), 
                     "specular", 
                     SpecularFieldId, SpecularFieldMask,
                     false,
                     (FieldAccessMethod) &MaterialChunkBase::getSFSpecular),
    FieldDescription(SFColor4f::getClassType(), 
                     "emission", 
                     EmissionFieldId, EmissionFieldMask,
                     false,
                     (FieldAccessMethod) &MaterialChunkBase::getSFEmission),
    FieldDescription(SFReal32::getClassType(), 
                     "shininess", 
                     ShininessFieldId, ShininessFieldMask,
                     false,
                     (FieldAccessMethod) &MaterialChunkBase::getSFShininess)
};

/** \brief MaterialChunk type
 */

FieldContainerType MaterialChunkBase::_type(
    "MaterialChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &MaterialChunkBase::createEmpty,
    MaterialChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(MaterialChunkBase, MaterialChunkPtr)

FieldContainerType &MaterialChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MaterialChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr MaterialChunkBase::shallowCopy(void) const 
{ 
    MaterialChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MaterialChunk *>(this)); 

    return returnValue; 
}

UInt32 MaterialChunkBase::getSize(void) const 
{ 
    return sizeof(MaterialChunkBase); 
}


void MaterialChunkBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((MaterialChunkBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MaterialChunkBase::MaterialChunkBase(void) :
	_diffuse	(Color4f(1,1,1,0)), 
	_ambient	(Color4f(.2,.2,.2,0)), 
	_specular	(Color4f(.5,.5,.5,0)), 
	_emission	(Color4f(0,0,0,0)), 
	_shininess	(Real32(10)), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

MaterialChunkBase::MaterialChunkBase(const MaterialChunkBase &source) :
	_diffuse		(source._diffuse), 
	_ambient		(source._ambient), 
	_specular		(source._specular), 
	_emission		(source._emission), 
	_shininess		(source._shininess), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

MaterialChunkBase::~MaterialChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void MaterialChunkBase::executeSyncImpl(MaterialChunkBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _diffuse.syncWith(pOther->_diffuse);
    }

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _ambient.syncWith(pOther->_ambient);
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _specular.syncWith(pOther->_specular);
    }

    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _emission.syncWith(pOther->_emission);
    }

    if(FieldBits::NoField != (ShininessFieldMask & whichField))
    {
        _shininess.syncWith(pOther->_shininess);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

