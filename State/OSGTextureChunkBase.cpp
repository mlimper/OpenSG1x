/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include "OSGConfig.h"

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILESTATE
#define OSG_COMPILETEXTURECHUNKINST

#include "OSGTextureChunkBase.h"
#include "OSGTextureChunk.h"

#include <GL/gl.h>	// MinFilter defaults header
#include <GL/gl.h>	// MagFilter defaults header
#include <GL/gl.h>	// WrapS defaults header
#include <GL/gl.h>	// WrapT defaults header
#include <GL/gl.h>	// WrapR defaults header
#include <GL/gl.h>	// GenFuncS defaults header
#include <GL/gl.h>	// GenFuncT defaults header
#include <GL/gl.h>	// GenFuncR defaults header
#include <GL/gl.h>	// GenFuncQ defaults header
OSG_USING_NAMESPACE


/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		TextureChunkBase::ImageFieldId;
const OSG::BitVector	TextureChunkBase::ImageFieldMask;

const OSG::UInt32		TextureChunkBase::MinFilterFieldId;
const OSG::BitVector	TextureChunkBase::MinFilterFieldMask;

const OSG::UInt32		TextureChunkBase::MagFilterFieldId;
const OSG::BitVector	TextureChunkBase::MagFilterFieldMask;

const OSG::UInt32		TextureChunkBase::WrapSFieldId;
const OSG::BitVector	TextureChunkBase::WrapSFieldMask;

const OSG::UInt32		TextureChunkBase::WrapTFieldId;
const OSG::BitVector	TextureChunkBase::WrapTFieldMask;

const OSG::UInt32		TextureChunkBase::WrapRFieldId;
const OSG::BitVector	TextureChunkBase::WrapRFieldMask;

const OSG::UInt32		TextureChunkBase::EnvModeFieldId;
const OSG::BitVector	TextureChunkBase::EnvModeFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncSFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncSFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncTFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncTFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncRFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncRFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncQFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncQFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncSPlaneFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncSPlaneFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncTPlaneFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncTPlaneFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncRPlaneFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncRPlaneFieldMask;

const OSG::UInt32		TextureChunkBase::GenFuncQPlaneFieldId;
const OSG::BitVector	TextureChunkBase::GenFuncQPlaneFieldMask;

const OSG::UInt32		TextureChunkBase::GLIdFieldId;
const OSG::BitVector	TextureChunkBase::GLIdFieldMask;


const OSG::UInt32    	TextureChunkBase::NextFieldId; 
const OSG::BitVector 	TextureChunkBase::NextFieldMask;


char TextureChunkBase::cvsid[] = "@(#)$Id: OSGTextureChunkBase.cpp,v 1.1 2001/04/15 02:12:54 dirk Exp $";

/** \brief Group field description
 */

FieldDescription TextureChunkBase::_desc[] = 
{
    FieldDescription(SFImageP::getClassType(), 
                     "image", 
                     ImageFieldId, ImageFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFImage),
    FieldDescription(SFUInt32::getClassType(), 
                     "minFilter", 
                     MinFilterFieldId, MinFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMinFilter),
    FieldDescription(SFUInt32::getClassType(), 
                     "magFilter", 
                     MagFilterFieldId, MagFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMagFilter),
    FieldDescription(SFUInt32::getClassType(), 
                     "wrapS", 
                     WrapSFieldId, WrapSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapS),
    FieldDescription(SFUInt32::getClassType(), 
                     "wrapT", 
                     WrapTFieldId, WrapTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapT),
    FieldDescription(SFUInt32::getClassType(), 
                     "wrapR", 
                     WrapRFieldId, WrapRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapR),
    FieldDescription(SFUInt32::getClassType(), 
                     "envMode", 
                     EnvModeFieldId, EnvModeFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFEnvMode),
    FieldDescription(SFUInt32::getClassType(), 
                     "genFuncS", 
                     GenFuncSFieldId, GenFuncSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncS),
    FieldDescription(SFUInt32::getClassType(), 
                     "genFuncT", 
                     GenFuncTFieldId, GenFuncTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncT),
    FieldDescription(SFUInt32::getClassType(), 
                     "genFuncR", 
                     GenFuncRFieldId, GenFuncRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncR),
    FieldDescription(SFUInt32::getClassType(), 
                     "genFuncQ", 
                     GenFuncQFieldId, GenFuncQFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQ),
    FieldDescription(SFPlane::getClassType(), 
                     "genFuncSPlane", 
                     GenFuncSPlaneFieldId, GenFuncSPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncSPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "genFuncTPlane", 
                     GenFuncTPlaneFieldId, GenFuncTPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncTPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "genFuncRPlane", 
                     GenFuncRPlaneFieldId, GenFuncRPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncRPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "genFuncQPlane", 
                     GenFuncQPlaneFieldId, GenFuncQPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQPlane),
    FieldDescription(SFUInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &TextureChunkBase::getSFGLId)
};

/** \brief TextureChunk type
 */

FieldContainerType TextureChunkBase::_type(
    "TextureChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &TextureChunkBase::createEmpty,
    TextureChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(TextureChunkBase, TextureChunkPtr)

FieldContainerType &TextureChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TextureChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr TextureChunkBase::shallowCopy(void) const 
{ 
    TextureChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TextureChunk *>(this)); 

    return returnValue; 
}

UInt32 TextureChunkBase::getSize(void) const 
{ 
    return sizeof(TextureChunkBase); 
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

TextureChunkBase::TextureChunkBase(void) :
	_image	(), 
	_minFilter	(UInt32(GL_LINEAR_MIPMAP_LINEAR)), 
	_magFilter	(UInt32(GL_LINEAR)), 
	_wrapS	(UInt32(GL_REPEAT)), 
	_wrapT	(UInt32(GL_REPEAT)), 
	_wrapR	(UInt32(GL_REPEAT)), 
	_envMode	(), 
	_genFuncS	(UInt32(GL_NONE)), 
	_genFuncT	(UInt32(GL_NONE)), 
	_genFuncR	(UInt32(GL_NONE)), 
	_genFuncQ	(UInt32(GL_NONE)), 
	_genFuncSPlane	(), 
	_genFuncTPlane	(), 
	_genFuncRPlane	(), 
	_genFuncQPlane	(), 
	_GLId	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

TextureChunkBase::TextureChunkBase(const TextureChunkBase &source) :
	_image		(source._image), 
	_minFilter		(source._minFilter), 
	_magFilter		(source._magFilter), 
	_wrapS		(source._wrapS), 
	_wrapT		(source._wrapT), 
	_wrapR		(source._wrapR), 
	_envMode		(source._envMode), 
	_genFuncS		(source._genFuncS), 
	_genFuncT		(source._genFuncT), 
	_genFuncR		(source._genFuncR), 
	_genFuncQ		(source._genFuncQ), 
	_genFuncSPlane		(source._genFuncSPlane), 
	_genFuncTPlane		(source._genFuncTPlane), 
	_genFuncRPlane		(source._genFuncRPlane), 
	_genFuncQPlane		(source._genFuncQPlane), 
	_GLId		(source._GLId), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

TextureChunkBase::~TextureChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

