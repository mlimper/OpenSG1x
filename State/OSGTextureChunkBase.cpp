/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXTURECHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGTextureChunkBase.h"
#include "OSGTextureChunk.h"

#include <GL/gl.h>                        // InternalFormat default header
#include <GL/gl.h>                        // MinFilter default header
#include <GL/gl.h>                        // MagFilter default header
#include <GL/gl.h>                        // WrapS default header
#include <GL/gl.h>                        // WrapT default header
#include <GL/gl.h>                        // WrapR default header
#include <GL/gl.h>                        // EnvMode default header
#include <GL/gl.h>                        // GenFuncS default header
#include <GL/gl.h>                        // GenFuncT default header
#include <GL/gl.h>                        // GenFuncR default header
#include <GL/gl.h>                        // GenFuncQ default header

OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<TextureChunkPtr>::_type("TextureChunkPtr", "StateChunkPtr", true);

#if defined(__sgi)

#pragma instantiate SField<TextureChunkPtr>::_fieldType
#pragma instantiate MField<TextureChunkPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, TextureChunkPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, TextureChunkPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGTextureChunkBase.cpp,v 1.23 2002/01/09 10:27:56 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGTEXTURECHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTEXTURECHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTEXTURECHUNKFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  TextureChunkBase::ImageFieldMask = 
    (1 << TextureChunkBase::ImageFieldId);

const OSG::BitVector  TextureChunkBase::InternalFormatFieldMask = 
    (1 << TextureChunkBase::InternalFormatFieldId);

const OSG::BitVector  TextureChunkBase::ScaleFieldMask = 
    (1 << TextureChunkBase::ScaleFieldId);

const OSG::BitVector  TextureChunkBase::FrameFieldMask = 
    (1 << TextureChunkBase::FrameFieldId);

const OSG::BitVector  TextureChunkBase::MinFilterFieldMask = 
    (1 << TextureChunkBase::MinFilterFieldId);

const OSG::BitVector  TextureChunkBase::MagFilterFieldMask = 
    (1 << TextureChunkBase::MagFilterFieldId);

const OSG::BitVector  TextureChunkBase::WrapSFieldMask = 
    (1 << TextureChunkBase::WrapSFieldId);

const OSG::BitVector  TextureChunkBase::WrapTFieldMask = 
    (1 << TextureChunkBase::WrapTFieldId);

const OSG::BitVector  TextureChunkBase::WrapRFieldMask = 
    (1 << TextureChunkBase::WrapRFieldId);

const OSG::BitVector  TextureChunkBase::EnvModeFieldMask = 
    (1 << TextureChunkBase::EnvModeFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncSFieldMask = 
    (1 << TextureChunkBase::GenFuncSFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncTFieldMask = 
    (1 << TextureChunkBase::GenFuncTFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncRFieldMask = 
    (1 << TextureChunkBase::GenFuncRFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncQFieldMask = 
    (1 << TextureChunkBase::GenFuncQFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncSPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncSPlaneFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncTPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncTPlaneFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncRPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncRPlaneFieldId);

const OSG::BitVector  TextureChunkBase::GenFuncQPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncQPlaneFieldId);

const OSG::BitVector  TextureChunkBase::GLIdFieldMask = 
    (1 << TextureChunkBase::GLIdFieldId);



// Field descriptions

/*! \var ImageP          TextureChunkBase::_sfImage
    
*/
/*! \var UInt32          TextureChunkBase::_sfInternalFormat
    The internal texture format.
*/
/*! \var Bool            TextureChunkBase::_sfScale
    
*/
/*! \var UInt32          TextureChunkBase::_sfFrame
    
*/
/*! \var UInt32          TextureChunkBase::_sfMinFilter
    
*/
/*! \var UInt32          TextureChunkBase::_sfMagFilter
    
*/
/*! \var UInt32          TextureChunkBase::_sfWrapS
    
*/
/*! \var UInt32          TextureChunkBase::_sfWrapT
    
*/
/*! \var UInt32          TextureChunkBase::_sfWrapR
    
*/
/*! \var UInt32          TextureChunkBase::_sfEnvMode
    
*/
/*! \var UInt32          TextureChunkBase::_sfGenFuncS
    
*/
/*! \var UInt32          TextureChunkBase::_sfGenFuncT
    
*/
/*! \var UInt32          TextureChunkBase::_sfGenFuncR
    
*/
/*! \var UInt32          TextureChunkBase::_sfGenFuncQ
    
*/
/*! \var Vec4f           TextureChunkBase::_sfGenFuncSPlane
    
*/
/*! \var Vec4f           TextureChunkBase::_sfGenFuncTPlane
    
*/
/*! \var Vec4f           TextureChunkBase::_sfGenFuncRPlane
    
*/
/*! \var Vec4f           TextureChunkBase::_sfGenFuncQPlane
    
*/
/*! \var UInt32          TextureChunkBase::_sfGLId
    
*/
//! TextureChunk description

FieldDescription *TextureChunkBase::_desc[] = 
{
    new FieldDescription(SFImageP::getClassType(), 
                     "image", 
                     ImageFieldId, ImageFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFImage),
    new FieldDescription(SFUInt32::getClassType(), 
                     "internalFormat", 
                     InternalFormatFieldId, InternalFormatFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFInternalFormat),
    new FieldDescription(SFBool::getClassType(), 
                     "scale", 
                     ScaleFieldId, ScaleFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFScale),
    new FieldDescription(SFUInt32::getClassType(), 
                     "frame", 
                     FrameFieldId, FrameFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFFrame),
    new FieldDescription(SFUInt32::getClassType(), 
                     "minFilter", 
                     MinFilterFieldId, MinFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMinFilter),
    new FieldDescription(SFUInt32::getClassType(), 
                     "magFilter", 
                     MagFilterFieldId, MagFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMagFilter),
    new FieldDescription(SFUInt32::getClassType(), 
                     "wrapS", 
                     WrapSFieldId, WrapSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapS),
    new FieldDescription(SFUInt32::getClassType(), 
                     "wrapT", 
                     WrapTFieldId, WrapTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapT),
    new FieldDescription(SFUInt32::getClassType(), 
                     "wrapR", 
                     WrapRFieldId, WrapRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapR),
    new FieldDescription(SFUInt32::getClassType(), 
                     "envMode", 
                     EnvModeFieldId, EnvModeFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFEnvMode),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncS", 
                     GenFuncSFieldId, GenFuncSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncS),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncT", 
                     GenFuncTFieldId, GenFuncTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncT),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncR", 
                     GenFuncRFieldId, GenFuncRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncR),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncQ", 
                     GenFuncQFieldId, GenFuncQFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQ),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncSPlane", 
                     GenFuncSPlaneFieldId, GenFuncSPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncSPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncTPlane", 
                     GenFuncTPlaneFieldId, GenFuncTPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncTPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncRPlane", 
                     GenFuncRPlaneFieldId, GenFuncRPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncRPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncQPlane", 
                     GenFuncQPlaneFieldId, GenFuncQPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQPlane),
    new FieldDescription(SFUInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &TextureChunkBase::getSFGLId)
};

//! TextureChunk type

FieldContainerType TextureChunkBase::_type(
    "TextureChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &TextureChunkBase::createEmpty,
    TextureChunk::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TextureChunkBase, TextureChunkPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TextureChunkBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TextureChunkBase::shallowCopy(void) const 
{ 
    TextureChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TextureChunk *>(this)); 

    return returnValue; 
}

UInt32 TextureChunkBase::getContainerSize(void) const 
{ 
    return sizeof(TextureChunkBase); 
}


void TextureChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TextureChunkBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TextureChunkBase::TextureChunkBase(void) :
    _sfImage                  (), 
    _sfInternalFormat         (UInt32(GL_NONE)), 
    _sfScale                  (Bool(true)), 
    _sfFrame                  (UInt32(0)), 
    _sfMinFilter              (UInt32(GL_LINEAR_MIPMAP_LINEAR)), 
    _sfMagFilter              (UInt32(GL_LINEAR)), 
    _sfWrapS                  (UInt32(GL_REPEAT)), 
    _sfWrapT                  (UInt32(GL_REPEAT)), 
    _sfWrapR                  (UInt32(GL_REPEAT)), 
    _sfEnvMode                (UInt32(GL_REPLACE)), 
    _sfGenFuncS               (UInt32(GL_NONE)), 
    _sfGenFuncT               (UInt32(GL_NONE)), 
    _sfGenFuncR               (UInt32(GL_NONE)), 
    _sfGenFuncQ               (UInt32(GL_NONE)), 
    _sfGenFuncSPlane          (), 
    _sfGenFuncTPlane          (), 
    _sfGenFuncRPlane          (), 
    _sfGenFuncQPlane          (), 
    _sfGLId                   (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

TextureChunkBase::TextureChunkBase(const TextureChunkBase &source) :
    _sfImage                  (source._sfImage                  ), 
    _sfInternalFormat         (source._sfInternalFormat         ), 
    _sfScale                  (source._sfScale                  ), 
    _sfFrame                  (source._sfFrame                  ), 
    _sfMinFilter              (source._sfMinFilter              ), 
    _sfMagFilter              (source._sfMagFilter              ), 
    _sfWrapS                  (source._sfWrapS                  ), 
    _sfWrapT                  (source._sfWrapT                  ), 
    _sfWrapR                  (source._sfWrapR                  ), 
    _sfEnvMode                (source._sfEnvMode                ), 
    _sfGenFuncS               (source._sfGenFuncS               ), 
    _sfGenFuncT               (source._sfGenFuncT               ), 
    _sfGenFuncR               (source._sfGenFuncR               ), 
    _sfGenFuncQ               (source._sfGenFuncQ               ), 
    _sfGenFuncSPlane          (source._sfGenFuncSPlane          ), 
    _sfGenFuncTPlane          (source._sfGenFuncTPlane          ), 
    _sfGenFuncRPlane          (source._sfGenFuncRPlane          ), 
    _sfGenFuncQPlane          (source._sfGenFuncQPlane          ), 
    _sfGLId                   (source._sfGLId                   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

TextureChunkBase::~TextureChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TextureChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        returnValue += _sfInternalFormat.getBinSize();
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }

    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        returnValue += _sfFrame.getBinSize();
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        returnValue += _sfMinFilter.getBinSize();
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        returnValue += _sfMagFilter.getBinSize();
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        returnValue += _sfWrapS.getBinSize();
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        returnValue += _sfWrapT.getBinSize();
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        returnValue += _sfWrapR.getBinSize();
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        returnValue += _sfEnvMode.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        returnValue += _sfGenFuncS.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        returnValue += _sfGenFuncT.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        returnValue += _sfGenFuncR.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        returnValue += _sfGenFuncQ.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncSPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncTPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncRPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncQPlane.getBinSize();
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }


    return returnValue;
}

void TextureChunkBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        _sfGenFuncS.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        _sfGenFuncT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        _sfGenFuncR.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        _sfGenFuncQ.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        _sfGenFuncSPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        _sfGenFuncTPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        _sfGenFuncRPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        _sfGenFuncQPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }


}

void TextureChunkBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        _sfGenFuncS.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        _sfGenFuncT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        _sfGenFuncR.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        _sfGenFuncQ.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        _sfGenFuncSPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        _sfGenFuncTPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        _sfGenFuncRPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        _sfGenFuncQPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }


}

void TextureChunkBase::executeSyncImpl(      TextureChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
        _sfImage.syncWith(pOther->_sfImage);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pOther->_sfInternalFormat);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pOther->_sfScale);

    if(FieldBits::NoField != (FrameFieldMask & whichField))
        _sfFrame.syncWith(pOther->_sfFrame);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pOther->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pOther->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pOther->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pOther->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pOther->_sfWrapR);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
        _sfEnvMode.syncWith(pOther->_sfEnvMode);

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
        _sfGenFuncS.syncWith(pOther->_sfGenFuncS);

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
        _sfGenFuncT.syncWith(pOther->_sfGenFuncT);

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
        _sfGenFuncR.syncWith(pOther->_sfGenFuncR);

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
        _sfGenFuncQ.syncWith(pOther->_sfGenFuncQ);

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
        _sfGenFuncSPlane.syncWith(pOther->_sfGenFuncSPlane);

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
        _sfGenFuncTPlane.syncWith(pOther->_sfGenFuncTPlane);

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
        _sfGenFuncRPlane.syncWith(pOther->_sfGenFuncRPlane);

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
        _sfGenFuncQPlane.syncWith(pOther->_sfGenFuncQPlane);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);


}

