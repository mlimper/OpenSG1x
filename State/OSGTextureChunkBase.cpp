/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILETEXTURECHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGTextureChunkBase.h"
#include "OSGTextureChunk.h"

#include <GL/gl.h>	// MinFilter default header
#include <GL/gl.h>	// MagFilter default header
#include <GL/gl.h>	// WrapS default header
#include <GL/gl.h>	// WrapT default header
#include <GL/gl.h>	// WrapR default header
#include <GL/gl.h>	// GenFuncS default header
#include <GL/gl.h>	// GenFuncT default header
#include <GL/gl.h>	// GenFuncR default header
#include <GL/gl.h>	// GenFuncQ default header

OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	TextureChunkBase::ImageFieldMask = 
    (1 << TextureChunkBase::ImageFieldId);

const OSG::BitVector	TextureChunkBase::MinFilterFieldMask = 
    (1 << TextureChunkBase::MinFilterFieldId);

const OSG::BitVector	TextureChunkBase::MagFilterFieldMask = 
    (1 << TextureChunkBase::MagFilterFieldId);

const OSG::BitVector	TextureChunkBase::WrapSFieldMask = 
    (1 << TextureChunkBase::WrapSFieldId);

const OSG::BitVector	TextureChunkBase::WrapTFieldMask = 
    (1 << TextureChunkBase::WrapTFieldId);

const OSG::BitVector	TextureChunkBase::WrapRFieldMask = 
    (1 << TextureChunkBase::WrapRFieldId);

const OSG::BitVector	TextureChunkBase::EnvModeFieldMask = 
    (1 << TextureChunkBase::EnvModeFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncSFieldMask = 
    (1 << TextureChunkBase::GenFuncSFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncTFieldMask = 
    (1 << TextureChunkBase::GenFuncTFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncRFieldMask = 
    (1 << TextureChunkBase::GenFuncRFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncQFieldMask = 
    (1 << TextureChunkBase::GenFuncQFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncSPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncSPlaneFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncTPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncTPlaneFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncRPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncRPlaneFieldId);

const OSG::BitVector	TextureChunkBase::GenFuncQPlaneFieldMask = 
    (1 << TextureChunkBase::GenFuncQPlaneFieldId);

const OSG::BitVector	TextureChunkBase::GLIdFieldMask = 
    (1 << TextureChunkBase::GLIdFieldId);



char TextureChunkBase::cvsid[] = "@(#)$Id: OSGTextureChunkBase.cpp,v 1.6 2001/07/09 07:50:58 vossg Exp $";

/** \brief Group field description
 */

FieldDescription TextureChunkBase::_desc[] = 
{
    FieldDescription(SFImageP::getClassType(), 
                     "sfImage", 
                     ImageFieldId, ImageFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFImage),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfMinFilter", 
                     MinFilterFieldId, MinFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMinFilter),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfMagFilter", 
                     MagFilterFieldId, MagFilterFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFMagFilter),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfWrapS", 
                     WrapSFieldId, WrapSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapS),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfWrapT", 
                     WrapTFieldId, WrapTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapT),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfWrapR", 
                     WrapRFieldId, WrapRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFWrapR),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfEnvMode", 
                     EnvModeFieldId, EnvModeFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFEnvMode),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfGenFuncS", 
                     GenFuncSFieldId, GenFuncSFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncS),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfGenFuncT", 
                     GenFuncTFieldId, GenFuncTFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncT),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfGenFuncR", 
                     GenFuncRFieldId, GenFuncRFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncR),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfGenFuncQ", 
                     GenFuncQFieldId, GenFuncQFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQ),
    FieldDescription(SFPlane::getClassType(), 
                     "sfGenFuncSPlane", 
                     GenFuncSPlaneFieldId, GenFuncSPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncSPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "sfGenFuncTPlane", 
                     GenFuncTPlaneFieldId, GenFuncTPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncTPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "sfGenFuncRPlane", 
                     GenFuncRPlaneFieldId, GenFuncRPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncRPlane),
    FieldDescription(SFPlane::getClassType(), 
                     "sfGenFuncQPlane", 
                     GenFuncQPlaneFieldId, GenFuncQPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TextureChunkBase::getSFGenFuncQPlane),
    FieldDescription(SFUInt32::getClassType(), 
                     "sfGLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &TextureChunkBase::getSFGLId)
};

/** \brief TextureChunk type
 */

FieldContainerType TextureChunkBase::_type(
    "TextureChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &TextureChunkBase::createEmpty,
    TextureChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(TextureChunkBase, TextureChunkPtr)

FieldContainerType &TextureChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TextureChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr TextureChunkBase::shallowCopy(void) const 
{ 
    TextureChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TextureChunk *>(this)); 

    return returnValue; 
}

UInt32 TextureChunkBase::getSize(void) const 
{ 
    return sizeof(TextureChunkBase); 
}


void TextureChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TextureChunkBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

TextureChunkBase::TextureChunkBase(void) :
	_sfImage	(), 
	_sfMinFilter	(UInt32(GL_LINEAR_MIPMAP_LINEAR)), 
	_sfMagFilter	(UInt32(GL_LINEAR)), 
	_sfWrapS	(UInt32(GL_REPEAT)), 
	_sfWrapT	(UInt32(GL_REPEAT)), 
	_sfWrapR	(UInt32(GL_REPEAT)), 
	_sfEnvMode	(), 
	_sfGenFuncS	(UInt32(GL_NONE)), 
	_sfGenFuncT	(UInt32(GL_NONE)), 
	_sfGenFuncR	(UInt32(GL_NONE)), 
	_sfGenFuncQ	(UInt32(GL_NONE)), 
	_sfGenFuncSPlane	(), 
	_sfGenFuncTPlane	(), 
	_sfGenFuncRPlane	(), 
	_sfGenFuncQPlane	(), 
	_sfGLId	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

TextureChunkBase::TextureChunkBase(const TextureChunkBase &source) :
	_sfImage		(source._sfImage), 
	_sfMinFilter		(source._sfMinFilter), 
	_sfMagFilter		(source._sfMagFilter), 
	_sfWrapS		(source._sfWrapS), 
	_sfWrapT		(source._sfWrapT), 
	_sfWrapR		(source._sfWrapR), 
	_sfEnvMode		(source._sfEnvMode), 
	_sfGenFuncS		(source._sfGenFuncS), 
	_sfGenFuncT		(source._sfGenFuncT), 
	_sfGenFuncR		(source._sfGenFuncR), 
	_sfGenFuncQ		(source._sfGenFuncQ), 
	_sfGenFuncSPlane		(source._sfGenFuncSPlane), 
	_sfGenFuncTPlane		(source._sfGenFuncTPlane), 
	_sfGenFuncRPlane		(source._sfGenFuncRPlane), 
	_sfGenFuncQPlane		(source._sfGenFuncQPlane), 
	_sfGLId		(source._sfGLId), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

TextureChunkBase::~TextureChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TextureChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        returnValue += _sfMinFilter.getBinSize();
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        returnValue += _sfMagFilter.getBinSize();
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        returnValue += _sfWrapS.getBinSize();
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        returnValue += _sfWrapT.getBinSize();
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        returnValue += _sfWrapR.getBinSize();
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        returnValue += _sfEnvMode.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        returnValue += _sfGenFuncS.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        returnValue += _sfGenFuncT.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        returnValue += _sfGenFuncR.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        returnValue += _sfGenFuncQ.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncSPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncTPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncRPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncQPlane.getBinSize();
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }


    return returnValue;
}

MemoryHandle TextureChunkBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        pMem = _sfImage.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        pMem = _sfMinFilter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        pMem = _sfMagFilter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        pMem = _sfWrapS.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        pMem = _sfWrapT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        pMem = _sfWrapR.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        pMem = _sfEnvMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        pMem = _sfGenFuncS.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        pMem = _sfGenFuncT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        pMem = _sfGenFuncR.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        pMem = _sfGenFuncQ.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncSPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncTPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncRPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncQPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        pMem = _sfGLId.copyToBin(pMem);
    }


    return pMem;
}

MemoryHandle TextureChunkBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        pMem = _sfImage.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        pMem = _sfMinFilter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        pMem = _sfMagFilter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        pMem = _sfWrapS.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        pMem = _sfWrapT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        pMem = _sfWrapR.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        pMem = _sfEnvMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        pMem = _sfGenFuncS.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        pMem = _sfGenFuncT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        pMem = _sfGenFuncR.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        pMem = _sfGenFuncQ.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncSPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncTPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncRPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        pMem = _sfGenFuncQPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        pMem = _sfGLId.copyFromBin(pMem);
    }


    return pMem;
}

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void TextureChunkBase::executeSyncImpl(      TextureChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.syncWith(pOther->_sfImage);
    }

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.syncWith(pOther->_sfMinFilter);
    }

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.syncWith(pOther->_sfMagFilter);
    }

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.syncWith(pOther->_sfWrapS);
    }

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.syncWith(pOther->_sfWrapT);
    }

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.syncWith(pOther->_sfWrapR);
    }

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.syncWith(pOther->_sfEnvMode);
    }

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        _sfGenFuncS.syncWith(pOther->_sfGenFuncS);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        _sfGenFuncT.syncWith(pOther->_sfGenFuncT);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        _sfGenFuncR.syncWith(pOther->_sfGenFuncR);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        _sfGenFuncQ.syncWith(pOther->_sfGenFuncQ);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        _sfGenFuncSPlane.syncWith(pOther->_sfGenFuncSPlane);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        _sfGenFuncTPlane.syncWith(pOther->_sfGenFuncTPlane);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        _sfGenFuncRPlane.syncWith(pOther->_sfGenFuncRPlane);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        _sfGenFuncQPlane.syncWith(pOther->_sfGenFuncQPlane);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.syncWith(pOther->_sfGLId);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

