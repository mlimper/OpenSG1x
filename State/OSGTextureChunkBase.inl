/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureChunkBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 TextureChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
TextureChunkPtr TextureChunkBase::create(void) 
{
    TextureChunkPtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = TextureChunkPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
TextureChunkPtr TextureChunkBase::createEmpty(void) 
{ 
    TextureChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
SFImageP *TextureChunkBase::getSFImage(void)
{
    return &_sfImage;
}

inline
SFUInt32 *TextureChunkBase::getSFInternalFormat(void)
{
    return &_sfInternalFormat;
}

inline
SFUInt32 *TextureChunkBase::getSFExternalFormat(void)
{
    return &_sfExternalFormat;
}

inline
SFBool *TextureChunkBase::getSFScale(void)
{
    return &_sfScale;
}

inline
SFUInt32 *TextureChunkBase::getSFFrame(void)
{
    return &_sfFrame;
}

inline
SFUInt32 *TextureChunkBase::getSFMinFilter(void)
{
    return &_sfMinFilter;
}

inline
SFUInt32 *TextureChunkBase::getSFMagFilter(void)
{
    return &_sfMagFilter;
}

inline
SFUInt32 *TextureChunkBase::getSFWrapS(void)
{
    return &_sfWrapS;
}

inline
SFUInt32 *TextureChunkBase::getSFWrapT(void)
{
    return &_sfWrapT;
}

inline
SFUInt32 *TextureChunkBase::getSFWrapR(void)
{
    return &_sfWrapR;
}

inline
SFUInt32 *TextureChunkBase::getSFEnvMode(void)
{
    return &_sfEnvMode;
}

inline
SFUInt32 *TextureChunkBase::getSFGenFuncS(void)
{
    return &_sfGenFuncS;
}

inline
SFUInt32 *TextureChunkBase::getSFGenFuncT(void)
{
    return &_sfGenFuncT;
}

inline
SFUInt32 *TextureChunkBase::getSFGenFuncR(void)
{
    return &_sfGenFuncR;
}

inline
SFUInt32 *TextureChunkBase::getSFGenFuncQ(void)
{
    return &_sfGenFuncQ;
}

inline
SFVec4f *TextureChunkBase::getSFGenFuncSPlane(void)
{
    return &_sfGenFuncSPlane;
}

inline
SFVec4f *TextureChunkBase::getSFGenFuncTPlane(void)
{
    return &_sfGenFuncTPlane;
}

inline
SFVec4f *TextureChunkBase::getSFGenFuncRPlane(void)
{
    return &_sfGenFuncRPlane;
}

inline
SFVec4f *TextureChunkBase::getSFGenFuncQPlane(void)
{
    return &_sfGenFuncQPlane;
}

inline
SFUInt32 *TextureChunkBase::getSFGLId(void)
{
    return &_sfGLId;
}


inline
ImageP &TextureChunkBase::getImage(void)
{
    return _sfImage.getValue();
}

inline
const ImageP &TextureChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

inline
void TextureChunkBase::setImage(const ImageP &value)
{
    _sfImage.setValue(value);
}

inline
UInt32 &TextureChunkBase::getInternalFormat(void)
{
    return _sfInternalFormat.getValue();
}

inline
const UInt32 &TextureChunkBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

inline
void TextureChunkBase::setInternalFormat(const UInt32 &value)
{
    _sfInternalFormat.setValue(value);
}

inline
UInt32 &TextureChunkBase::getExternalFormat(void)
{
    return _sfExternalFormat.getValue();
}

inline
const UInt32 &TextureChunkBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

inline
void TextureChunkBase::setExternalFormat(const UInt32 &value)
{
    _sfExternalFormat.setValue(value);
}

inline
bool &TextureChunkBase::getScale(void)
{
    return _sfScale.getValue();
}

inline
const bool &TextureChunkBase::getScale(void) const
{
    return _sfScale.getValue();
}

inline
void TextureChunkBase::setScale(const bool &value)
{
    _sfScale.setValue(value);
}

inline
UInt32 &TextureChunkBase::getFrame(void)
{
    return _sfFrame.getValue();
}

inline
const UInt32 &TextureChunkBase::getFrame(void) const
{
    return _sfFrame.getValue();
}

inline
void TextureChunkBase::setFrame(const UInt32 &value)
{
    _sfFrame.setValue(value);
}

inline
UInt32 &TextureChunkBase::getMinFilter(void)
{
    return _sfMinFilter.getValue();
}

inline
const UInt32 &TextureChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

inline
void TextureChunkBase::setMinFilter(const UInt32 &value)
{
    _sfMinFilter.setValue(value);
}

inline
UInt32 &TextureChunkBase::getMagFilter(void)
{
    return _sfMagFilter.getValue();
}

inline
const UInt32 &TextureChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

inline
void TextureChunkBase::setMagFilter(const UInt32 &value)
{
    _sfMagFilter.setValue(value);
}

inline
UInt32 &TextureChunkBase::getWrapS(void)
{
    return _sfWrapS.getValue();
}

inline
const UInt32 &TextureChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

inline
void TextureChunkBase::setWrapS(const UInt32 &value)
{
    _sfWrapS.setValue(value);
}

inline
UInt32 &TextureChunkBase::getWrapT(void)
{
    return _sfWrapT.getValue();
}

inline
const UInt32 &TextureChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

inline
void TextureChunkBase::setWrapT(const UInt32 &value)
{
    _sfWrapT.setValue(value);
}

inline
UInt32 &TextureChunkBase::getWrapR(void)
{
    return _sfWrapR.getValue();
}

inline
const UInt32 &TextureChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

inline
void TextureChunkBase::setWrapR(const UInt32 &value)
{
    _sfWrapR.setValue(value);
}

inline
UInt32 &TextureChunkBase::getEnvMode(void)
{
    return _sfEnvMode.getValue();
}

inline
const UInt32 &TextureChunkBase::getEnvMode(void) const
{
    return _sfEnvMode.getValue();
}

inline
void TextureChunkBase::setEnvMode(const UInt32 &value)
{
    _sfEnvMode.setValue(value);
}

inline
UInt32 &TextureChunkBase::getGenFuncS(void)
{
    return _sfGenFuncS.getValue();
}

inline
const UInt32 &TextureChunkBase::getGenFuncS(void) const
{
    return _sfGenFuncS.getValue();
}

inline
void TextureChunkBase::setGenFuncS(const UInt32 &value)
{
    _sfGenFuncS.setValue(value);
}

inline
UInt32 &TextureChunkBase::getGenFuncT(void)
{
    return _sfGenFuncT.getValue();
}

inline
const UInt32 &TextureChunkBase::getGenFuncT(void) const
{
    return _sfGenFuncT.getValue();
}

inline
void TextureChunkBase::setGenFuncT(const UInt32 &value)
{
    _sfGenFuncT.setValue(value);
}

inline
UInt32 &TextureChunkBase::getGenFuncR(void)
{
    return _sfGenFuncR.getValue();
}

inline
const UInt32 &TextureChunkBase::getGenFuncR(void) const
{
    return _sfGenFuncR.getValue();
}

inline
void TextureChunkBase::setGenFuncR(const UInt32 &value)
{
    _sfGenFuncR.setValue(value);
}

inline
UInt32 &TextureChunkBase::getGenFuncQ(void)
{
    return _sfGenFuncQ.getValue();
}

inline
const UInt32 &TextureChunkBase::getGenFuncQ(void) const
{
    return _sfGenFuncQ.getValue();
}

inline
void TextureChunkBase::setGenFuncQ(const UInt32 &value)
{
    _sfGenFuncQ.setValue(value);
}

inline
Vec4f &TextureChunkBase::getGenFuncSPlane(void)
{
    return _sfGenFuncSPlane.getValue();
}

inline
const Vec4f &TextureChunkBase::getGenFuncSPlane(void) const
{
    return _sfGenFuncSPlane.getValue();
}

inline
void TextureChunkBase::setGenFuncSPlane(const Vec4f &value)
{
    _sfGenFuncSPlane.setValue(value);
}

inline
Vec4f &TextureChunkBase::getGenFuncTPlane(void)
{
    return _sfGenFuncTPlane.getValue();
}

inline
const Vec4f &TextureChunkBase::getGenFuncTPlane(void) const
{
    return _sfGenFuncTPlane.getValue();
}

inline
void TextureChunkBase::setGenFuncTPlane(const Vec4f &value)
{
    _sfGenFuncTPlane.setValue(value);
}

inline
Vec4f &TextureChunkBase::getGenFuncRPlane(void)
{
    return _sfGenFuncRPlane.getValue();
}

inline
const Vec4f &TextureChunkBase::getGenFuncRPlane(void) const
{
    return _sfGenFuncRPlane.getValue();
}

inline
void TextureChunkBase::setGenFuncRPlane(const Vec4f &value)
{
    _sfGenFuncRPlane.setValue(value);
}

inline
Vec4f &TextureChunkBase::getGenFuncQPlane(void)
{
    return _sfGenFuncQPlane.getValue();
}

inline
const Vec4f &TextureChunkBase::getGenFuncQPlane(void) const
{
    return _sfGenFuncQPlane.getValue();
}

inline
void TextureChunkBase::setGenFuncQPlane(const Vec4f &value)
{
    _sfGenFuncQPlane.setValue(value);
}

inline
UInt32 &TextureChunkBase::getGLId(void)
{
    return _sfGLId.getValue();
}

inline
const UInt32 &TextureChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

inline
void TextureChunkBase::setGLId(const UInt32 &value)
{
    _sfGLId.setValue(value);
}



OSG_END_NAMESPACE

#define OSGTEXTURECHUNKBASE_INLINE_CVSID "@(#)$Id: OSGTextureChunkBase.inl,v 1.14 2002/03/25 01:25:59 vossg Exp $"

