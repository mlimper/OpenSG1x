/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                         Copyright 2000 by OpenSG Forum                    *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

inline OSG::FieldContainerType &TextureChunkBase::getClassType(void)
{
    return _type; 
} 

inline OSG::UInt32 TextureChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

inline TextureChunkPtr TextureChunkBase::create(void) 
{
    TextureChunkPtr fc; 

    if(getClassType(). getPrototype() != osg::NullFC) 
    {
        fc = osg::dcast<TextureChunkPtr>(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

inline TextureChunkPtr TextureChunkBase::createEmpty(void) 
{ 
    TextureChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------- constructors & destructors --------------------------------*/

/*--------------------------- type information-----------------------------*/

/*------------------------------ access -----------------------------------*/

SFImageP *TextureChunkBase::getSFImage(void)
{
	return &_image;
}

SFUInt32 *TextureChunkBase::getSFMinFilter(void)
{
	return &_minFilter;
}

SFUInt32 *TextureChunkBase::getSFMagFilter(void)
{
	return &_magFilter;
}

SFUInt32 *TextureChunkBase::getSFWrapS(void)
{
	return &_wrapS;
}

SFUInt32 *TextureChunkBase::getSFWrapT(void)
{
	return &_wrapT;
}

SFUInt32 *TextureChunkBase::getSFWrapR(void)
{
	return &_wrapR;
}

SFUInt32 *TextureChunkBase::getSFEnvMode(void)
{
	return &_envMode;
}

SFUInt32 *TextureChunkBase::getSFGenFuncS(void)
{
	return &_genFuncS;
}

SFUInt32 *TextureChunkBase::getSFGenFuncT(void)
{
	return &_genFuncT;
}

SFUInt32 *TextureChunkBase::getSFGenFuncR(void)
{
	return &_genFuncR;
}

SFUInt32 *TextureChunkBase::getSFGenFuncQ(void)
{
	return &_genFuncQ;
}

SFPlane *TextureChunkBase::getSFGenFuncSPlane(void)
{
	return &_genFuncSPlane;
}

SFPlane *TextureChunkBase::getSFGenFuncTPlane(void)
{
	return &_genFuncTPlane;
}

SFPlane *TextureChunkBase::getSFGenFuncRPlane(void)
{
	return &_genFuncRPlane;
}

SFPlane *TextureChunkBase::getSFGenFuncQPlane(void)
{
	return &_genFuncQPlane;
}

SFUInt32 *TextureChunkBase::getSFGLId(void)
{
	return &_GLId;
}


ImageP &TextureChunkBase::getImage(void)
{
	return _image.getValue();
}

const ImageP &TextureChunkBase::getImage(void) const
{
	return _image.getValue();
}

void TextureChunkBase::setImage( ImageP value )
{
	_image.setValue(value);
}

UInt32 &TextureChunkBase::getMinFilter(void)
{
	return _minFilter.getValue();
}

const UInt32 &TextureChunkBase::getMinFilter(void) const
{
	return _minFilter.getValue();
}

void TextureChunkBase::setMinFilter( UInt32 value )
{
	_minFilter.setValue(value);
}

UInt32 &TextureChunkBase::getMagFilter(void)
{
	return _magFilter.getValue();
}

const UInt32 &TextureChunkBase::getMagFilter(void) const
{
	return _magFilter.getValue();
}

void TextureChunkBase::setMagFilter( UInt32 value )
{
	_magFilter.setValue(value);
}

UInt32 &TextureChunkBase::getWrapS(void)
{
	return _wrapS.getValue();
}

const UInt32 &TextureChunkBase::getWrapS(void) const
{
	return _wrapS.getValue();
}

void TextureChunkBase::setWrapS( UInt32 value )
{
	_wrapS.setValue(value);
}

UInt32 &TextureChunkBase::getWrapT(void)
{
	return _wrapT.getValue();
}

const UInt32 &TextureChunkBase::getWrapT(void) const
{
	return _wrapT.getValue();
}

void TextureChunkBase::setWrapT( UInt32 value )
{
	_wrapT.setValue(value);
}

UInt32 &TextureChunkBase::getWrapR(void)
{
	return _wrapR.getValue();
}

const UInt32 &TextureChunkBase::getWrapR(void) const
{
	return _wrapR.getValue();
}

void TextureChunkBase::setWrapR( UInt32 value )
{
	_wrapR.setValue(value);
}

UInt32 &TextureChunkBase::getEnvMode(void)
{
	return _envMode.getValue();
}

const UInt32 &TextureChunkBase::getEnvMode(void) const
{
	return _envMode.getValue();
}

void TextureChunkBase::setEnvMode( UInt32 value )
{
	_envMode.setValue(value);
}

UInt32 &TextureChunkBase::getGenFuncS(void)
{
	return _genFuncS.getValue();
}

const UInt32 &TextureChunkBase::getGenFuncS(void) const
{
	return _genFuncS.getValue();
}

void TextureChunkBase::setGenFuncS( UInt32 value )
{
	_genFuncS.setValue(value);
}

UInt32 &TextureChunkBase::getGenFuncT(void)
{
	return _genFuncT.getValue();
}

const UInt32 &TextureChunkBase::getGenFuncT(void) const
{
	return _genFuncT.getValue();
}

void TextureChunkBase::setGenFuncT( UInt32 value )
{
	_genFuncT.setValue(value);
}

UInt32 &TextureChunkBase::getGenFuncR(void)
{
	return _genFuncR.getValue();
}

const UInt32 &TextureChunkBase::getGenFuncR(void) const
{
	return _genFuncR.getValue();
}

void TextureChunkBase::setGenFuncR( UInt32 value )
{
	_genFuncR.setValue(value);
}

UInt32 &TextureChunkBase::getGenFuncQ(void)
{
	return _genFuncQ.getValue();
}

const UInt32 &TextureChunkBase::getGenFuncQ(void) const
{
	return _genFuncQ.getValue();
}

void TextureChunkBase::setGenFuncQ( UInt32 value )
{
	_genFuncQ.setValue(value);
}

Plane &TextureChunkBase::getGenFuncSPlane(void)
{
	return _genFuncSPlane.getValue();
}

const Plane &TextureChunkBase::getGenFuncSPlane(void) const
{
	return _genFuncSPlane.getValue();
}

void TextureChunkBase::setGenFuncSPlane( Plane value )
{
	_genFuncSPlane.setValue(value);
}

Plane &TextureChunkBase::getGenFuncTPlane(void)
{
	return _genFuncTPlane.getValue();
}

const Plane &TextureChunkBase::getGenFuncTPlane(void) const
{
	return _genFuncTPlane.getValue();
}

void TextureChunkBase::setGenFuncTPlane( Plane value )
{
	_genFuncTPlane.setValue(value);
}

Plane &TextureChunkBase::getGenFuncRPlane(void)
{
	return _genFuncRPlane.getValue();
}

const Plane &TextureChunkBase::getGenFuncRPlane(void) const
{
	return _genFuncRPlane.getValue();
}

void TextureChunkBase::setGenFuncRPlane( Plane value )
{
	_genFuncRPlane.setValue(value);
}

Plane &TextureChunkBase::getGenFuncQPlane(void)
{
	return _genFuncQPlane.getValue();
}

const Plane &TextureChunkBase::getGenFuncQPlane(void) const
{
	return _genFuncQPlane.getValue();
}

void TextureChunkBase::setGenFuncQPlane( Plane value )
{
	_genFuncQPlane.setValue(value);
}

UInt32 &TextureChunkBase::getGLId(void)
{
	return _GLId.getValue();
}

const UInt32 &TextureChunkBase::getGLId(void) const
{
	return _GLId.getValue();
}

void TextureChunkBase::setGLId( UInt32 value )
{
	_GLId.setValue(value);
}



/*------------------------------ access -----------------------------------*/

/*------------------------------- size ----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/


OSG_END_NAMESPACE

