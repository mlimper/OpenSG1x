/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                         Copyright 2000 by OpenSG Forum                    *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include "OSGConfig.h"

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

inline OSG::FieldContainerType &PolygonChunkBase::getClassType(void)
{
    return _type; 
} 

inline OSG::UInt32 PolygonChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

inline PolygonChunkPtr PolygonChunkBase::create(void) 
{
    PolygonChunkPtr fc; 

    if(getClassType(). getPrototype() != osg::NullFC) 
    {
        fc = osg::dcast<PolygonChunkPtr>(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

inline PolygonChunkPtr PolygonChunkBase::createEmpty(void) 
{ 
    PolygonChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------- constructors & destructors --------------------------------*/

/*--------------------------- type information-----------------------------*/

/*------------------------------ access -----------------------------------*/

SFInt32 *PolygonChunkBase::getSFCullFace(void)
{
	return &_cullFace;
}

SFInt32 *PolygonChunkBase::getSFFrontFace(void)
{
	return &_frontFace;
}

SFInt32 *PolygonChunkBase::getSFModeFace(void)
{
	return &_modeFace;
}

SFInt32 *PolygonChunkBase::getSFMode(void)
{
	return &_mode;
}

SFBool *PolygonChunkBase::getSFSmooth(void)
{
	return &_smooth;
}

SFReal32 *PolygonChunkBase::getSFOffsetFactor(void)
{
	return &_offsetFactor;
}

SFReal32 *PolygonChunkBase::getSFOffsetBias(void)
{
	return &_offsetBias;
}

SFBool *PolygonChunkBase::getSFOffsetPoint(void)
{
	return &_offsetPoint;
}

SFBool *PolygonChunkBase::getSFOffsetLine(void)
{
	return &_offsetLine;
}

SFBool *PolygonChunkBase::getSFOffsetFill(void)
{
	return &_offsetFill;
}

MFInt32 *PolygonChunkBase::getMFStipple(void)
{
	return &_stipple;
}


Int32 &PolygonChunkBase::getCullFace(void)
{
	return _cullFace.getValue();
}

const Int32 &PolygonChunkBase::getCullFace(void) const
{
	return _cullFace.getValue();
}

void PolygonChunkBase::setCullFace( Int32 value )
{
	_cullFace.setValue(value);
}

Int32 &PolygonChunkBase::getFrontFace(void)
{
	return _frontFace.getValue();
}

const Int32 &PolygonChunkBase::getFrontFace(void) const
{
	return _frontFace.getValue();
}

void PolygonChunkBase::setFrontFace( Int32 value )
{
	_frontFace.setValue(value);
}

Int32 &PolygonChunkBase::getModeFace(void)
{
	return _modeFace.getValue();
}

const Int32 &PolygonChunkBase::getModeFace(void) const
{
	return _modeFace.getValue();
}

void PolygonChunkBase::setModeFace( Int32 value )
{
	_modeFace.setValue(value);
}

Int32 &PolygonChunkBase::getMode(void)
{
	return _mode.getValue();
}

const Int32 &PolygonChunkBase::getMode(void) const
{
	return _mode.getValue();
}

void PolygonChunkBase::setMode( Int32 value )
{
	_mode.setValue(value);
}

Bool &PolygonChunkBase::getSmooth(void)
{
	return _smooth.getValue();
}

const Bool &PolygonChunkBase::getSmooth(void) const
{
	return _smooth.getValue();
}

void PolygonChunkBase::setSmooth( Bool value )
{
	_smooth.setValue(value);
}

Real32 &PolygonChunkBase::getOffsetFactor(void)
{
	return _offsetFactor.getValue();
}

const Real32 &PolygonChunkBase::getOffsetFactor(void) const
{
	return _offsetFactor.getValue();
}

void PolygonChunkBase::setOffsetFactor( Real32 value )
{
	_offsetFactor.setValue(value);
}

Real32 &PolygonChunkBase::getOffsetBias(void)
{
	return _offsetBias.getValue();
}

const Real32 &PolygonChunkBase::getOffsetBias(void) const
{
	return _offsetBias.getValue();
}

void PolygonChunkBase::setOffsetBias( Real32 value )
{
	_offsetBias.setValue(value);
}

Bool &PolygonChunkBase::getOffsetPoint(void)
{
	return _offsetPoint.getValue();
}

const Bool &PolygonChunkBase::getOffsetPoint(void) const
{
	return _offsetPoint.getValue();
}

void PolygonChunkBase::setOffsetPoint( Bool value )
{
	_offsetPoint.setValue(value);
}

Bool &PolygonChunkBase::getOffsetLine(void)
{
	return _offsetLine.getValue();
}

const Bool &PolygonChunkBase::getOffsetLine(void) const
{
	return _offsetLine.getValue();
}

void PolygonChunkBase::setOffsetLine( Bool value )
{
	_offsetLine.setValue(value);
}

Bool &PolygonChunkBase::getOffsetFill(void)
{
	return _offsetFill.getValue();
}

const Bool &PolygonChunkBase::getOffsetFill(void) const
{
	return _offsetFill.getValue();
}

void PolygonChunkBase::setOffsetFill( Bool value )
{
	_offsetFill.setValue(value);
}


Int32 &PolygonChunkBase::getStipple( UInt32 index)
{
	return _stipple.getValue( index );
}


/*------------------------------ access -----------------------------------*/

/*------------------------------- size ----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/


OSG_END_NAMESPACE

