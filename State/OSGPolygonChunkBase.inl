/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PolygonChunkBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 PolygonChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
PolygonChunkPtr PolygonChunkBase::create(void) 
{
    PolygonChunkPtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = PolygonChunkPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
PolygonChunkPtr PolygonChunkBase::createEmpty(void) 
{ 
    PolygonChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
SFInt32 *PolygonChunkBase::getSFCullFace(void)
{
    return &_sfCullFace;
}

inline
SFInt32 *PolygonChunkBase::getSFFrontFace(void)
{
    return &_sfFrontFace;
}

inline
SFInt32 *PolygonChunkBase::getSFModeFace(void)
{
    return &_sfModeFace;
}

inline
SFInt32 *PolygonChunkBase::getSFMode(void)
{
    return &_sfMode;
}

inline
SFBool *PolygonChunkBase::getSFSmooth(void)
{
    return &_sfSmooth;
}

inline
SFReal32 *PolygonChunkBase::getSFOffsetFactor(void)
{
    return &_sfOffsetFactor;
}

inline
SFReal32 *PolygonChunkBase::getSFOffsetBias(void)
{
    return &_sfOffsetBias;
}

inline
SFBool *PolygonChunkBase::getSFOffsetPoint(void)
{
    return &_sfOffsetPoint;
}

inline
SFBool *PolygonChunkBase::getSFOffsetLine(void)
{
    return &_sfOffsetLine;
}

inline
SFBool *PolygonChunkBase::getSFOffsetFill(void)
{
    return &_sfOffsetFill;
}

inline
MFInt32 *PolygonChunkBase::getMFStipple(void)
{
    return &_mfStipple;
}


inline
Int32 &PolygonChunkBase::getCullFace(void)
{
    return _sfCullFace.getValue();
}

inline
const Int32 &PolygonChunkBase::getCullFace(void) const
{
    return _sfCullFace.getValue();
}

inline
void PolygonChunkBase::setCullFace(const Int32 &value)
{
    _sfCullFace.setValue(value);
}

inline
Int32 &PolygonChunkBase::getFrontFace(void)
{
    return _sfFrontFace.getValue();
}

inline
const Int32 &PolygonChunkBase::getFrontFace(void) const
{
    return _sfFrontFace.getValue();
}

inline
void PolygonChunkBase::setFrontFace(const Int32 &value)
{
    _sfFrontFace.setValue(value);
}

inline
Int32 &PolygonChunkBase::getModeFace(void)
{
    return _sfModeFace.getValue();
}

inline
const Int32 &PolygonChunkBase::getModeFace(void) const
{
    return _sfModeFace.getValue();
}

inline
void PolygonChunkBase::setModeFace(const Int32 &value)
{
    _sfModeFace.setValue(value);
}

inline
Int32 &PolygonChunkBase::getMode(void)
{
    return _sfMode.getValue();
}

inline
const Int32 &PolygonChunkBase::getMode(void) const
{
    return _sfMode.getValue();
}

inline
void PolygonChunkBase::setMode(const Int32 &value)
{
    _sfMode.setValue(value);
}

inline
bool &PolygonChunkBase::getSmooth(void)
{
    return _sfSmooth.getValue();
}

inline
const bool &PolygonChunkBase::getSmooth(void) const
{
    return _sfSmooth.getValue();
}

inline
void PolygonChunkBase::setSmooth(const bool &value)
{
    _sfSmooth.setValue(value);
}

inline
Real32 &PolygonChunkBase::getOffsetFactor(void)
{
    return _sfOffsetFactor.getValue();
}

inline
const Real32 &PolygonChunkBase::getOffsetFactor(void) const
{
    return _sfOffsetFactor.getValue();
}

inline
void PolygonChunkBase::setOffsetFactor(const Real32 &value)
{
    _sfOffsetFactor.setValue(value);
}

inline
Real32 &PolygonChunkBase::getOffsetBias(void)
{
    return _sfOffsetBias.getValue();
}

inline
const Real32 &PolygonChunkBase::getOffsetBias(void) const
{
    return _sfOffsetBias.getValue();
}

inline
void PolygonChunkBase::setOffsetBias(const Real32 &value)
{
    _sfOffsetBias.setValue(value);
}

inline
bool &PolygonChunkBase::getOffsetPoint(void)
{
    return _sfOffsetPoint.getValue();
}

inline
const bool &PolygonChunkBase::getOffsetPoint(void) const
{
    return _sfOffsetPoint.getValue();
}

inline
void PolygonChunkBase::setOffsetPoint(const bool &value)
{
    _sfOffsetPoint.setValue(value);
}

inline
bool &PolygonChunkBase::getOffsetLine(void)
{
    return _sfOffsetLine.getValue();
}

inline
const bool &PolygonChunkBase::getOffsetLine(void) const
{
    return _sfOffsetLine.getValue();
}

inline
void PolygonChunkBase::setOffsetLine(const bool &value)
{
    _sfOffsetLine.setValue(value);
}

inline
bool &PolygonChunkBase::getOffsetFill(void)
{
    return _sfOffsetFill.getValue();
}

inline
const bool &PolygonChunkBase::getOffsetFill(void) const
{
    return _sfOffsetFill.getValue();
}

inline
void PolygonChunkBase::setOffsetFill(const bool &value)
{
    _sfOffsetFill.setValue(value);
}


inline
Int32 &PolygonChunkBase::getStipple(const UInt32 index)
{
    return _mfStipple[index];
}

inline
MFInt32 &PolygonChunkBase::getStipple(void)
{
    return _mfStipple;
}

inline
const MFInt32 &PolygonChunkBase::getStipple(void) const
{
    return _mfStipple;
}


OSG_END_NAMESPACE

#define OSGPOLYGONCHUNKBASE_INLINE_CVSID "@(#)$Id: OSGPolygonChunkBase.inl,v 1.13 2002/05/13 09:21:11 vossg Exp $"

