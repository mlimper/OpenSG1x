/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LightChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLIGHTCHUNKBASE_H_
#define _OSGLIGHTCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGConfig.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>
#include <OSGStateDef.h>
#include <OSGStateChunk.h>
#include <OSGColor4fFields.h>	// Diffuse type
#include <OSGColor4fFields.h>	// Ambient type
#include <OSGColor4fFields.h>	// Specular type
#include <OSGVec4fFields.h>	// Position type
#include <OSGVec3fFields.h>	// Direction type
#include <OSGReal32Fields.h>	// Exponent type
#include <OSGReal32Fields.h>	// Cutoff type
#include <OSGReal32Fields.h>	// ConstantAttenuation type
#include <OSGReal32Fields.h>	// LinearAttenuation type
#include <OSGReal32Fields.h>	// QuadraticAttenuation type

#include "OSGLightChunkFields.h"

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class LightChunk;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! LightChunk Base Class. */

class OSG_STATE_DLLMAPPING LightChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
	static const osg::UInt32    DiffuseFieldId	= Inherited::NextFieldId;
	static const osg::BitVector DiffuseFieldMask	= Inherited::NextFieldMask;

	static const osg::UInt32    AmbientFieldId   = DiffuseFieldId + 1;
	static const osg::BitVector AmbientFieldMask = DiffuseFieldMask << 1;

	static const osg::UInt32    SpecularFieldId   = AmbientFieldId + 1;
	static const osg::BitVector SpecularFieldMask = AmbientFieldMask << 1;

	static const osg::UInt32    PositionFieldId   = SpecularFieldId + 1;
	static const osg::BitVector PositionFieldMask = SpecularFieldMask << 1;

	static const osg::UInt32    DirectionFieldId   = PositionFieldId + 1;
	static const osg::BitVector DirectionFieldMask = PositionFieldMask << 1;

	static const osg::UInt32    ExponentFieldId   = DirectionFieldId + 1;
	static const osg::BitVector ExponentFieldMask = DirectionFieldMask << 1;

	static const osg::UInt32    CutoffFieldId   = ExponentFieldId + 1;
	static const osg::BitVector CutoffFieldMask = ExponentFieldMask << 1;

	static const osg::UInt32    ConstantAttenuationFieldId   = CutoffFieldId + 1;
	static const osg::BitVector ConstantAttenuationFieldMask = CutoffFieldMask << 1;

	static const osg::UInt32    LinearAttenuationFieldId   = ConstantAttenuationFieldId + 1;
	static const osg::BitVector LinearAttenuationFieldMask = ConstantAttenuationFieldMask << 1;

	static const osg::UInt32    QuadraticAttenuationFieldId   = LinearAttenuationFieldId + 1;
	static const osg::BitVector QuadraticAttenuationFieldMask = LinearAttenuationFieldMask << 1;

	static const osg::UInt32	NextFieldId   = QuadraticAttenuationFieldId + 1;
	static const osg::BitVector	NextFieldMask = QuadraticAttenuationFieldMask << 1;


    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "LightChunkBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType(void); 
    virtual const OSG::FieldContainerType &getType(void) const; 
    
    static OSG::FieldContainerType &getClassType  (void); 
    static OSG::UInt32              getClassTypeId(void); 
    static LightChunkPtr         create        (void); 
    static LightChunkPtr         createEmpty   (void); 

    virtual OSG::FieldContainerPtr shallowCopy(void) const; 
    virtual OSG::UInt32            getSize    (void) const;

    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFColor4f	*getSFDiffuse(void);
    inline SFColor4f	*getSFAmbient(void);
    inline SFColor4f	*getSFSpecular(void);
    inline SFVec4f	*getSFPosition(void);
    inline SFVec3f	*getSFDirection(void);
    inline SFReal32	*getSFExponent(void);
    inline SFReal32	*getSFCutoff(void);
    inline SFReal32	*getSFConstantAttenuation(void);
    inline SFReal32	*getSFLinearAttenuation(void);
    inline SFReal32	*getSFQuadraticAttenuation(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       Color4f	&getDiffuse(void);
    inline const Color4f	&getDiffuse(void) const;
    inline       void	             setDiffuse( Color4f value );
    inline       Color4f	&getAmbient(void);
    inline const Color4f	&getAmbient(void) const;
    inline       void	             setAmbient( Color4f value );
    inline       Color4f	&getSpecular(void);
    inline const Color4f	&getSpecular(void) const;
    inline       void	             setSpecular( Color4f value );
    inline       Vec4f	&getPosition(void);
    inline const Vec4f	&getPosition(void) const;
    inline       void	             setPosition( Vec4f value );
    inline       Vec3f	&getDirection(void);
    inline const Vec3f	&getDirection(void) const;
    inline       void	             setDirection( Vec3f value );
    inline       Real32	&getExponent(void);
    inline const Real32	&getExponent(void) const;
    inline       void	             setExponent( Real32 value );
    inline       Real32	&getCutoff(void);
    inline const Real32	&getCutoff(void) const;
    inline       void	             setCutoff( Real32 value );
    inline       Real32	&getConstantAttenuation(void);
    inline const Real32	&getConstantAttenuation(void) const;
    inline       void	             setConstantAttenuation( Real32 value );
    inline       Real32	&getLinearAttenuation(void);
    inline const Real32	&getLinearAttenuation(void) const;
    inline       void	             setLinearAttenuation( Real32 value );
    inline       Real32	&getQuadraticAttenuation(void);
    inline const Real32	&getQuadraticAttenuation(void) const;
    inline       void	             setQuadraticAttenuation( Real32 value );


    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! The light's diffuse color. 	
     */
    SFColor4f	_diffuse;
    /*! The light's ambient color. 	
     */
    SFColor4f	_ambient;
    /*! The light's specular color. 	
     */
    SFColor4f	_specular;
    /*! The light's position. 	
     */
    SFVec4f	_position;
    /*! The light's direction (only for spotlights). 	
     */
    SFVec3f	_direction;
    /*! The light's spotlight exponent. 	
     */
    SFReal32	_exponent;
    /*! The light's spotlight cutoff. 	
     */
    SFReal32	_cutoff;
    /*! The light's constant attenuation. 	
     */
    SFReal32	_constantAttenuation;
    /*! The light's linear attenuation. 	
     */
    SFReal32	_linearAttenuation;
    /*! The light's quadratic attenuation. 	
     */
    SFReal32	_quadraticAttenuation;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    LightChunkBase(void);
    LightChunkBase(const LightChunkBase &source);
    virtual ~LightChunkBase(void); 
    

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   _desc[];

    static FieldContainerType _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const LightChunk &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef LightChunkBase *LightChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGLIGHTCHUNKBASE_H_ */
