/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LightChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGLIGHTCHUNKBASE_H_
#define _OSGLIGHTCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>

#include <OSGStateChunk.h> // Parent

#include <OSGColor4fFields.h> // Diffuse type
#include <OSGColor4fFields.h> // Ambient type
#include <OSGColor4fFields.h> // Specular type
#include <OSGVec4fFields.h> // Position type
#include <OSGVec3fFields.h> // Direction type
#include <OSGReal32Fields.h> // Exponent type
#include <OSGReal32Fields.h> // Cutoff type
#include <OSGReal32Fields.h> // ConstantAttenuation type
#include <OSGReal32Fields.h> // LinearAttenuation type
#include <OSGReal32Fields.h> // QuadraticAttenuation type

#include <OSGLightChunkFields.h>

OSG_BEGIN_NAMESPACE

class LightChunk;
class BinaryDataHandler;

//! \brief LightChunk Base Class.

class OSG_SYSTEMLIB_DLLMAPPING LightChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        DiffuseFieldId              = Inherited::NextFieldId,
        AmbientFieldId              = DiffuseFieldId              + 1,
        SpecularFieldId             = AmbientFieldId              + 1,
        PositionFieldId             = SpecularFieldId             + 1,
        DirectionFieldId            = PositionFieldId             + 1,
        ExponentFieldId             = DirectionFieldId            + 1,
        CutoffFieldId               = ExponentFieldId             + 1,
        ConstantAttenuationFieldId  = CutoffFieldId               + 1,
        LinearAttenuationFieldId    = ConstantAttenuationFieldId  + 1,
        QuadraticAttenuationFieldId = LinearAttenuationFieldId    + 1,
        NextFieldId                 = QuadraticAttenuationFieldId + 1
    };

    static const osg::BitVector DiffuseFieldMask;
    static const osg::BitVector AmbientFieldMask;
    static const osg::BitVector SpecularFieldMask;
    static const osg::BitVector PositionFieldMask;
    static const osg::BitVector DirectionFieldMask;
    static const osg::BitVector ExponentFieldMask;
    static const osg::BitVector CutoffFieldMask;
    static const osg::BitVector ConstantAttenuationFieldMask;
    static const osg::BitVector LinearAttenuationFieldMask;
    static const osg::BitVector QuadraticAttenuationFieldMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    inline       SFColor4f           *getSFDiffuse        (void);
    inline       SFColor4f           *getSFAmbient        (void);
    inline       SFColor4f           *getSFSpecular       (void);
    inline       SFVec4f             *getSFPosition       (void);
    inline       SFVec3f             *getSFDirection      (void);
    inline       SFReal32            *getSFExponent       (void);
    inline       SFReal32            *getSFCutoff         (void);
    inline       SFReal32            *getSFConstantAttenuation(void);
    inline       SFReal32            *getSFLinearAttenuation(void);
    inline       SFReal32            *getSFQuadraticAttenuation(void);

    inline       Color4f             &getDiffuse        (void);
    inline const Color4f             &getDiffuse        (void) const;
    inline       Color4f             &getAmbient        (void);
    inline const Color4f             &getAmbient        (void) const;
    inline       Color4f             &getSpecular       (void);
    inline const Color4f             &getSpecular       (void) const;
    inline       Vec4f               &getPosition       (void);
    inline const Vec4f               &getPosition       (void) const;
    inline       Vec3f               &getDirection      (void);
    inline const Vec3f               &getDirection      (void) const;
    inline       Real32              &getExponent       (void);
    inline const Real32              &getExponent       (void) const;
    inline       Real32              &getCutoff         (void);
    inline const Real32              &getCutoff         (void) const;
    inline       Real32              &getConstantAttenuation(void);
    inline const Real32              &getConstantAttenuation(void) const;
    inline       Real32              &getLinearAttenuation(void);
    inline const Real32              &getLinearAttenuation(void) const;
    inline       Real32              &getQuadraticAttenuation(void);
    inline const Real32              &getQuadraticAttenuation(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    inline void setDiffuse        ( const Color4f &value );
    inline void setAmbient        ( const Color4f &value );
    inline void setSpecular       ( const Color4f &value );
    inline void setPosition       ( const Vec4f &value );
    inline void setDirection      ( const Vec3f &value );
    inline void setExponent       ( const Real32 &value );
    inline void setCutoff         ( const Real32 &value );
    inline void setConstantAttenuation( const Real32 &value );
    inline void setLinearAttenuation( const Real32 &value );
    inline void setQuadraticAttenuation( const Real32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  LightChunkPtr      create          (void); 
    static  LightChunkPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor4f           _sfDiffuse;
    SFColor4f           _sfAmbient;
    SFColor4f           _sfSpecular;
    SFVec4f             _sfPosition;
    SFVec3f             _sfDirection;
    SFReal32            _sfExponent;
    SFReal32            _sfCutoff;
    SFReal32            _sfConstantAttenuation;
    SFReal32            _sfLinearAttenuation;
    SFReal32            _sfQuadraticAttenuation;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    LightChunkBase(void);
    LightChunkBase(const LightChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~LightChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      LightChunkBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const LightChunkBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef LightChunkBase *LightChunkBaseP;

OSG_END_NAMESPACE

#define OSGLIGHTCHUNKBASE_HEADER_CVSID "@(#)$Id: OSGLightChunkBase.h,v 1.17 2001/11/09 08:17:08 vossg Exp $"

#endif /* _OSGLIGHTCHUNKBASE_H_ */
