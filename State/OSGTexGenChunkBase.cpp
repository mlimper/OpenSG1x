/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TexGenChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXGENCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGTexGenChunkBase.h"
#include "OSGTexGenChunk.h"

#include <OSGGL.h>                        // GenFuncS default header
#include <OSGGL.h>                        // GenFuncT default header
#include <OSGGL.h>                        // GenFuncR default header
#include <OSGGL.h>                        // GenFuncQ default header

OSG_USING_NAMESPACE

const OSG::BitVector  TexGenChunkBase::GenFuncSFieldMask = 
    (1 << TexGenChunkBase::GenFuncSFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncTFieldMask = 
    (1 << TexGenChunkBase::GenFuncTFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncRFieldMask = 
    (1 << TexGenChunkBase::GenFuncRFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncQFieldMask = 
    (1 << TexGenChunkBase::GenFuncQFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncSPlaneFieldMask = 
    (1 << TexGenChunkBase::GenFuncSPlaneFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncTPlaneFieldMask = 
    (1 << TexGenChunkBase::GenFuncTPlaneFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncRPlaneFieldMask = 
    (1 << TexGenChunkBase::GenFuncRPlaneFieldId);

const OSG::BitVector  TexGenChunkBase::GenFuncQPlaneFieldMask = 
    (1 << TexGenChunkBase::GenFuncQPlaneFieldId);



// Field descriptions

/*! \var UInt32          TexGenChunkBase::_sfGenFuncS
    
*/
/*! \var UInt32          TexGenChunkBase::_sfGenFuncT
    
*/
/*! \var UInt32          TexGenChunkBase::_sfGenFuncR
    
*/
/*! \var UInt32          TexGenChunkBase::_sfGenFuncQ
    
*/
/*! \var Vec4f           TexGenChunkBase::_sfGenFuncSPlane
    
*/
/*! \var Vec4f           TexGenChunkBase::_sfGenFuncTPlane
    
*/
/*! \var Vec4f           TexGenChunkBase::_sfGenFuncRPlane
    
*/
/*! \var Vec4f           TexGenChunkBase::_sfGenFuncQPlane
    
*/

//! TexGenChunk description

FieldDescription *TexGenChunkBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncS", 
                     GenFuncSFieldId, GenFuncSFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncS),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncT", 
                     GenFuncTFieldId, GenFuncTFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncT),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncR", 
                     GenFuncRFieldId, GenFuncRFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncR),
    new FieldDescription(SFUInt32::getClassType(), 
                     "genFuncQ", 
                     GenFuncQFieldId, GenFuncQFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncQ),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncSPlane", 
                     GenFuncSPlaneFieldId, GenFuncSPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncSPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncTPlane", 
                     GenFuncTPlaneFieldId, GenFuncTPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncTPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncRPlane", 
                     GenFuncRPlaneFieldId, GenFuncRPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncRPlane),
    new FieldDescription(SFVec4f::getClassType(), 
                     "genFuncQPlane", 
                     GenFuncQPlaneFieldId, GenFuncQPlaneFieldMask,
                     false,
                     (FieldAccessMethod) &TexGenChunkBase::getSFGenFuncQPlane)
};

//! TexGenChunk type

FieldContainerType TexGenChunkBase::_type(
    "TexGenChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &TexGenChunkBase::createEmpty,
    TexGenChunk::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(TexGenChunkBase, TexGenChunkPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &TexGenChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TexGenChunkBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr TexGenChunkBase::shallowCopy(void) const 
{ 
    TexGenChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TexGenChunk *>(this)); 

    return returnValue; 
}

UInt32 TexGenChunkBase::getContainerSize(void) const 
{ 
    return sizeof(TexGenChunk); 
}


void TexGenChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TexGenChunkBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

TexGenChunkBase::TexGenChunkBase(void) :
    _sfGenFuncS               (UInt32(GL_NONE)), 
    _sfGenFuncT               (UInt32(GL_NONE)), 
    _sfGenFuncR               (UInt32(GL_NONE)), 
    _sfGenFuncQ               (UInt32(GL_NONE)), 
    _sfGenFuncSPlane          (), 
    _sfGenFuncTPlane          (), 
    _sfGenFuncRPlane          (), 
    _sfGenFuncQPlane          (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

TexGenChunkBase::TexGenChunkBase(const TexGenChunkBase &source) :
    _sfGenFuncS               (source._sfGenFuncS               ), 
    _sfGenFuncT               (source._sfGenFuncT               ), 
    _sfGenFuncR               (source._sfGenFuncR               ), 
    _sfGenFuncQ               (source._sfGenFuncQ               ), 
    _sfGenFuncSPlane          (source._sfGenFuncSPlane          ), 
    _sfGenFuncTPlane          (source._sfGenFuncTPlane          ), 
    _sfGenFuncRPlane          (source._sfGenFuncRPlane          ), 
    _sfGenFuncQPlane          (source._sfGenFuncQPlane          ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

TexGenChunkBase::~TexGenChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TexGenChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        returnValue += _sfGenFuncS.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        returnValue += _sfGenFuncT.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        returnValue += _sfGenFuncR.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        returnValue += _sfGenFuncQ.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncSPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncTPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncRPlane.getBinSize();
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        returnValue += _sfGenFuncQPlane.getBinSize();
    }


    return returnValue;
}

void TexGenChunkBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        _sfGenFuncS.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        _sfGenFuncT.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        _sfGenFuncR.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        _sfGenFuncQ.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        _sfGenFuncSPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        _sfGenFuncTPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        _sfGenFuncRPlane.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        _sfGenFuncQPlane.copyToBin(pMem);
    }


}

void TexGenChunkBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
    {
        _sfGenFuncS.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
    {
        _sfGenFuncT.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
    {
        _sfGenFuncR.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
    {
        _sfGenFuncQ.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
    {
        _sfGenFuncSPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
    {
        _sfGenFuncTPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
    {
        _sfGenFuncRPlane.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
    {
        _sfGenFuncQPlane.copyFromBin(pMem);
    }


}

void TexGenChunkBase::executeSyncImpl(      TexGenChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (GenFuncSFieldMask & whichField))
        _sfGenFuncS.syncWith(pOther->_sfGenFuncS);

    if(FieldBits::NoField != (GenFuncTFieldMask & whichField))
        _sfGenFuncT.syncWith(pOther->_sfGenFuncT);

    if(FieldBits::NoField != (GenFuncRFieldMask & whichField))
        _sfGenFuncR.syncWith(pOther->_sfGenFuncR);

    if(FieldBits::NoField != (GenFuncQFieldMask & whichField))
        _sfGenFuncQ.syncWith(pOther->_sfGenFuncQ);

    if(FieldBits::NoField != (GenFuncSPlaneFieldMask & whichField))
        _sfGenFuncSPlane.syncWith(pOther->_sfGenFuncSPlane);

    if(FieldBits::NoField != (GenFuncTPlaneFieldMask & whichField))
        _sfGenFuncTPlane.syncWith(pOther->_sfGenFuncTPlane);

    if(FieldBits::NoField != (GenFuncRPlaneFieldMask & whichField))
        _sfGenFuncRPlane.syncWith(pOther->_sfGenFuncRPlane);

    if(FieldBits::NoField != (GenFuncQPlaneFieldMask & whichField))
        _sfGenFuncQPlane.syncWith(pOther->_sfGenFuncQPlane);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<TexGenChunkPtr>::_type("TexGenChunkPtr", "StateChunkPtr");


OSG_DLLEXPORT_SFIELD_DEF1(TexGenChunkPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(TexGenChunkPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGTexGenChunkBase.cpp,v 1.1 2002/06/10 22:10:47 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGTEXGENCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTEXGENCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTEXGENCHUNKFIELDS_HEADER_CVSID;
}

