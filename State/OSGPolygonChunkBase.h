/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPOLYGONCHUNKBASE_H_
#define _OSGPOLYGONCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGConfig.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>
#include <OSGSystemDef.h>
#include <OSGStateChunk.h>
#include <OSGInt32Fields.h>	// CullFace type
#include <OSGInt32Fields.h>	// FrontFace type
#include <OSGInt32Fields.h>	// ModeFace type
#include <OSGInt32Fields.h>	// Mode type
#include <OSGBoolFields.h>	// Smooth type
#include <OSGReal32Fields.h>	// OffsetFactor type
#include <OSGReal32Fields.h>	// OffsetBias type
#include <OSGBoolFields.h>	// OffsetPoint type
#include <OSGBoolFields.h>	// OffsetLine type
#include <OSGBoolFields.h>	// OffsetFill type
#include <OSGInt32Fields.h>	// Stipple type

#include <OSGPolygonChunkFields.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class PolygonChunk;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! PolygonChunk Base Class. */

class OSG_SYSTEMLIB_DLLMAPPING PolygonChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
    enum
    {
        CullFaceFieldId = Inherited::NextFieldId,
        FrontFaceFieldId = CullFaceFieldId + 1,
        ModeFaceFieldId = FrontFaceFieldId + 1,
        ModeFieldId = ModeFaceFieldId + 1,
        SmoothFieldId = ModeFieldId + 1,
        OffsetFactorFieldId = SmoothFieldId + 1,
        OffsetBiasFieldId = OffsetFactorFieldId + 1,
        OffsetPointFieldId = OffsetBiasFieldId + 1,
        OffsetLineFieldId = OffsetPointFieldId + 1,
        OffsetFillFieldId = OffsetLineFieldId + 1,
        StippleFieldId = OffsetFillFieldId + 1,
        NextFieldId = StippleFieldId + 1

    };

    static const osg::BitVector CullFaceFieldMask;
    static const osg::BitVector FrontFaceFieldMask;
    static const osg::BitVector ModeFaceFieldMask;
    static const osg::BitVector ModeFieldMask;
    static const osg::BitVector SmoothFieldMask;
    static const osg::BitVector OffsetFactorFieldMask;
    static const osg::BitVector OffsetBiasFieldMask;
    static const osg::BitVector OffsetPointFieldMask;
    static const osg::BitVector OffsetLineFieldMask;
    static const osg::BitVector OffsetFillFieldMask;
    static const osg::BitVector StippleFieldMask;

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "PolygonChunkBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType  (void); 
    virtual const OSG::FieldContainerType &getType  (void) const; 
    
    static OSG::FieldContainerType &getClassType    (void); 
    static OSG::UInt32              getClassTypeId  (void); 
    static PolygonChunkPtr         create          (void); 
    static PolygonChunkPtr         createEmpty     (void); 

    virtual OSG::FieldContainerPtr  shallowCopy     (void) const; 
    virtual OSG::UInt32             getContainerSize(void) const;

    virtual void                    executeSync(      FieldContainer &other,
                                                const BitVector      &whichField);


    virtual UInt32       getBinSize (const BitVector    &whichField);
    virtual MemoryHandle copyToBin  (      MemoryHandle  pMem,
                                     const BitVector    &whichField);
    virtual MemoryHandle copyFromBin(      MemoryHandle  pMem,
                                     const BitVector    &whichField);

    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFInt32	*getSFCullFace(void);
    inline SFInt32	*getSFFrontFace(void);
    inline SFInt32	*getSFModeFace(void);
    inline SFInt32	*getSFMode(void);
    inline SFBool	*getSFSmooth(void);
    inline SFReal32	*getSFOffsetFactor(void);
    inline SFReal32	*getSFOffsetBias(void);
    inline SFBool	*getSFOffsetPoint(void);
    inline SFBool	*getSFOffsetLine(void);
    inline SFBool	*getSFOffsetFill(void);
    inline MFInt32	*getMFStipple(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       Int32	&getCullFace(void);
    inline const Int32	&getCullFace(void) const;
    inline       void	             setCullFace( Int32 value );
    inline       Int32	&getFrontFace(void);
    inline const Int32	&getFrontFace(void) const;
    inline       void	             setFrontFace( Int32 value );
    inline       Int32	&getModeFace(void);
    inline const Int32	&getModeFace(void) const;
    inline       void	             setModeFace( Int32 value );
    inline       Int32	&getMode(void);
    inline const Int32	&getMode(void) const;
    inline       void	             setMode( Int32 value );
    inline       Bool	&getSmooth(void);
    inline const Bool	&getSmooth(void) const;
    inline       void	             setSmooth( Bool value );
    inline       Real32	&getOffsetFactor(void);
    inline const Real32	&getOffsetFactor(void) const;
    inline       void	             setOffsetFactor( Real32 value );
    inline       Real32	&getOffsetBias(void);
    inline const Real32	&getOffsetBias(void) const;
    inline       void	             setOffsetBias( Real32 value );
    inline       Bool	&getOffsetPoint(void);
    inline const Bool	&getOffsetPoint(void) const;
    inline       void	             setOffsetPoint( Bool value );
    inline       Bool	&getOffsetLine(void);
    inline const Bool	&getOffsetLine(void) const;
    inline       void	             setOffsetLine( Bool value );
    inline       Bool	&getOffsetFill(void);
    inline const Bool	&getOffsetFill(void) const;
    inline       void	             setOffsetFill( Bool value );

    inline       Int32	               &getStipple( UInt32 index );
    inline       MFInt32 &getStipple(void);
    inline const MFInt32 &getStipple(void) const;

    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! Defines which side of the polygon is invisible.
     */
    SFInt32	_sfCullFace;
    /*! Defines which side of the polygon is considered the front side.
     */
    SFInt32	_sfFrontFace;
    /*! 
     */
    SFInt32	_sfModeFace;
    /*! Defines if polygons are rendered filled, outlined or as points.
     */
    SFInt32	_sfMode;
    /*! Defines if gouraud or flat shading is used.
     */
    SFBool	_sfSmooth;
    /*! Defines the polygon offset factor.
     */
    SFReal32	_sfOffsetFactor;
    /*! Defines the polygon offset bias.
     */
    SFReal32	_sfOffsetBias;
    /*! 
     */
    SFBool	_sfOffsetPoint;
    /*! 
     */
    SFBool	_sfOffsetLine;
    /*! 
     */
    SFBool	_sfOffsetFill;
    /*! Defines the stipple pattern. Is only valid and used if it contains 32 elements.
     */
    MFInt32	_mfStipple;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    PolygonChunkBase(void);
    PolygonChunkBase(const PolygonChunkBase &source);
    virtual ~PolygonChunkBase(void); 
    

    void executeSyncImpl(      PolygonChunkBase *pOther,
                         const BitVector         &whichField);

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   *_desc[];

    static FieldContainerType  _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const PolygonChunk &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef PolygonChunkBase *PolygonChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPOLYGONCHUNKBASE_H_ */
