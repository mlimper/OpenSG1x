/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlendChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBLENDCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGBlendChunkBase.h"
#include "OSGBlendChunk.h"

#include <OSGGL.h>                        // AlphaFunc default header

OSG_USING_NAMESPACE

const OSG::BitVector  BlendChunkBase::SrcFactorFieldMask = 
    (1 << BlendChunkBase::SrcFactorFieldId);

const OSG::BitVector  BlendChunkBase::DestFactorFieldMask = 
    (1 << BlendChunkBase::DestFactorFieldId);

const OSG::BitVector  BlendChunkBase::ColorFieldMask = 
    (1 << BlendChunkBase::ColorFieldId);

const OSG::BitVector  BlendChunkBase::AlphaFuncFieldMask = 
    (1 << BlendChunkBase::AlphaFuncFieldId);

const OSG::BitVector  BlendChunkBase::AlphaValueFieldMask = 
    (1 << BlendChunkBase::AlphaValueFieldId);



// Field descriptions

/*! \var UInt32          BlendChunkBase::_sfSrcFactor
    The incoming pixel is multiplied by the source factor. Legal values are directly 	taken from the glBlendFunc() manpage.
*/
/*! \var UInt32          BlendChunkBase::_sfDestFactor
    The frame buffer pixel is multiplied by the destination factor. Legal values are  	directly taken from the glBlendFunc() manpage.
*/
/*! \var Color4f         BlendChunkBase::_sfColor
    This is the constant color used by blend modes *_CONSTANT_*.
*/
/*! \var UInt32          BlendChunkBase::_sfAlphaFunc
    The alphaFunc defines how fragments which do not fulfill a certain condition are handled. See glAlphaFunc() for details.
*/
/*! \var Real32          BlendChunkBase::_sfAlphaValue
    
*/

//! BlendChunk description

FieldDescription *BlendChunkBase::_desc[] = 
{
    new FieldDescription(SFUInt32::getClassType(), 
                     "SrcFactor", 
                     SrcFactorFieldId, SrcFactorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFSrcFactor),
    new FieldDescription(SFUInt32::getClassType(), 
                     "DestFactor", 
                     DestFactorFieldId, DestFactorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFDestFactor),
    new FieldDescription(SFColor4f::getClassType(), 
                     "Color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFColor),
    new FieldDescription(SFUInt32::getClassType(), 
                     "alphaFunc", 
                     AlphaFuncFieldId, AlphaFuncFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFAlphaFunc),
    new FieldDescription(SFReal32::getClassType(), 
                     "alphaValue", 
                     AlphaValueFieldId, AlphaValueFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFAlphaValue)
};

//! BlendChunk type

FieldContainerType BlendChunkBase::_type(
    "BlendChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &BlendChunkBase::createEmpty,
    BlendChunk::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(BlendChunkBase, BlendChunkPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &BlendChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &BlendChunkBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr BlendChunkBase::shallowCopy(void) const 
{ 
    BlendChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const BlendChunk *>(this)); 

    return returnValue; 
}

UInt32 BlendChunkBase::getContainerSize(void) const 
{ 
    return sizeof(BlendChunk); 
}


void BlendChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((BlendChunkBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

BlendChunkBase::BlendChunkBase(void) :
    _sfSrcFactor              (), 
    _sfDestFactor             (), 
    _sfColor                  (Color4f(0,0,0,0)), 
    _sfAlphaFunc              (UInt32(GL_NONE)), 
    _sfAlphaValue             (Real32(0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

BlendChunkBase::BlendChunkBase(const BlendChunkBase &source) :
    _sfSrcFactor              (source._sfSrcFactor              ), 
    _sfDestFactor             (source._sfDestFactor             ), 
    _sfColor                  (source._sfColor                  ), 
    _sfAlphaFunc              (source._sfAlphaFunc              ), 
    _sfAlphaValue             (source._sfAlphaValue             ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

BlendChunkBase::~BlendChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 BlendChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        returnValue += _sfSrcFactor.getBinSize();
    }

    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        returnValue += _sfDestFactor.getBinSize();
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }

    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        returnValue += _sfAlphaFunc.getBinSize();
    }

    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        returnValue += _sfAlphaValue.getBinSize();
    }


    return returnValue;
}

void BlendChunkBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        _sfSrcFactor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        _sfDestFactor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        _sfAlphaFunc.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        _sfAlphaValue.copyToBin(pMem);
    }


}

void BlendChunkBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        _sfSrcFactor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        _sfDestFactor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        _sfAlphaFunc.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        _sfAlphaValue.copyFromBin(pMem);
    }


}

void BlendChunkBase::executeSyncImpl(      BlendChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
        _sfSrcFactor.syncWith(pOther->_sfSrcFactor);

    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
        _sfDestFactor.syncWith(pOther->_sfDestFactor);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);

    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
        _sfAlphaFunc.syncWith(pOther->_sfAlphaFunc);

    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
        _sfAlphaValue.syncWith(pOther->_sfAlphaValue);


}




/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGBlendChunkBase.cpp,v 1.28 2002/05/16 04:10:17 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGBLENDCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGBLENDCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGBLENDCHUNKFIELDS_HEADER_CVSID;
}

