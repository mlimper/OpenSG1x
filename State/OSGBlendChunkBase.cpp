/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlendChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEBLENDCHUNKINST

#include "OSGBlendChunkBase.h"
#include "OSGBlendChunk.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		BlendChunkBase::SrcFactorFieldId;
const OSG::BitVector	BlendChunkBase::SrcFactorFieldMask;

const OSG::UInt32		BlendChunkBase::DestFactorFieldId;
const OSG::BitVector	BlendChunkBase::DestFactorFieldMask;

const OSG::UInt32		BlendChunkBase::ColorFieldId;
const OSG::BitVector	BlendChunkBase::ColorFieldMask;

const OSG::UInt32		BlendChunkBase::GLIdFieldId;
const OSG::BitVector	BlendChunkBase::GLIdFieldMask;


const OSG::UInt32    	BlendChunkBase::NextFieldId; 
const OSG::BitVector 	BlendChunkBase::NextFieldMask;


char BlendChunkBase::cvsid[] = "@(#)$Id: OSGBlendChunkBase.cpp,v 1.4 2001/06/10 12:42:07 vossg Exp $";

/** \brief Group field description
 */

FieldDescription BlendChunkBase::_desc[] = 
{
    FieldDescription(SFUInt32::getClassType(), 
                     "SrcFactor", 
                     SrcFactorFieldId, SrcFactorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFSrcFactor),
    FieldDescription(SFUInt32::getClassType(), 
                     "DestFactor", 
                     DestFactorFieldId, DestFactorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFDestFactor),
    FieldDescription(SFColor4f::getClassType(), 
                     "Color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &BlendChunkBase::getSFColor),
    FieldDescription(SFUInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &BlendChunkBase::getSFGLId)
};

/** \brief BlendChunk type
 */

FieldContainerType BlendChunkBase::_type(
    "BlendChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &BlendChunkBase::createEmpty,
    BlendChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(BlendChunkBase, BlendChunkPtr)

FieldContainerType &BlendChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &BlendChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr BlendChunkBase::shallowCopy(void) const 
{ 
    BlendChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const BlendChunk *>(this)); 

    return returnValue; 
}

UInt32 BlendChunkBase::getSize(void) const 
{ 
    return sizeof(BlendChunkBase); 
}


void BlendChunkBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((BlendChunkBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

BlendChunkBase::BlendChunkBase(void) :
	_SrcFactor	(), 
	_DestFactor	(), 
	_Color	(Color4f(0,0,0,0)), 
	_GLId	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

BlendChunkBase::BlendChunkBase(const BlendChunkBase &source) :
	_SrcFactor		(source._SrcFactor), 
	_DestFactor		(source._DestFactor), 
	_Color		(source._Color), 
	_GLId		(source._GLId), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

BlendChunkBase::~BlendChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void BlendChunkBase::executeSyncImpl(BlendChunkBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        _SrcFactor.syncWith(pOther->_SrcFactor);
    }

    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        _DestFactor.syncWith(pOther->_DestFactor);
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _Color.syncWith(pOther->_Color);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _GLId.syncWith(pOther->_GLId);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

