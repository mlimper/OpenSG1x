/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPOLYGONCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGPolygonChunkBase.h"
#include "OSGPolygonChunk.h"

#include <GL/gl.h>                        // CullFace default header
#include <GL/gl.h>                        // FrontFace default header
#include <GL/gl.h>                        // ModeFace default header
#include <GL/gl.h>                        // Mode default header
#include <GL/gl.h>                        // Smooth default header
#include <GL/gl.h>                        // OffsetPoint default header
#include <GL/gl.h>                        // OffsetLine default header
#include <GL/gl.h>                        // OffsetFill default header


OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static char cvsid_cpp       [] = "@(#)$Id: OSGPolygonChunkBase.cpp,v 1.17 2001/11/01 05:55:08 vossg Exp $";
    static char cvsid_hpp       [] = OSGPOLYGONCHUNKBASE_HEADER_CVSID;
    static char cvsid_inl       [] = OSGPOLYGONCHUNKBASE_INLINE_CVSID;

    static char cvsid_fields_hpp[] = OSGPOLYGONCHUNKFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  PolygonChunkBase::CullFaceFieldMask = 
    (1 << PolygonChunkBase::CullFaceFieldId);

const OSG::BitVector  PolygonChunkBase::FrontFaceFieldMask = 
    (1 << PolygonChunkBase::FrontFaceFieldId);

const OSG::BitVector  PolygonChunkBase::ModeFaceFieldMask = 
    (1 << PolygonChunkBase::ModeFaceFieldId);

const OSG::BitVector  PolygonChunkBase::ModeFieldMask = 
    (1 << PolygonChunkBase::ModeFieldId);

const OSG::BitVector  PolygonChunkBase::SmoothFieldMask = 
    (1 << PolygonChunkBase::SmoothFieldId);

const OSG::BitVector  PolygonChunkBase::OffsetFactorFieldMask = 
    (1 << PolygonChunkBase::OffsetFactorFieldId);

const OSG::BitVector  PolygonChunkBase::OffsetBiasFieldMask = 
    (1 << PolygonChunkBase::OffsetBiasFieldId);

const OSG::BitVector  PolygonChunkBase::OffsetPointFieldMask = 
    (1 << PolygonChunkBase::OffsetPointFieldId);

const OSG::BitVector  PolygonChunkBase::OffsetLineFieldMask = 
    (1 << PolygonChunkBase::OffsetLineFieldId);

const OSG::BitVector  PolygonChunkBase::OffsetFillFieldMask = 
    (1 << PolygonChunkBase::OffsetFillFieldId);

const OSG::BitVector  PolygonChunkBase::StippleFieldMask = 
    (1 << PolygonChunkBase::StippleFieldId);



// Field descriptions

/*! \var Int32           PolygonChunkBase::_sfCullFace
    Defines which side of the polygon is invisible.
*/
/*! \var Int32           PolygonChunkBase::_sfFrontFace
    Defines which side of the polygon is considered the front side.
*/
/*! \var Int32           PolygonChunkBase::_sfModeFace
    
*/
/*! \var Int32           PolygonChunkBase::_sfMode
    Defines if polygons are rendered filled, outlined or as points.
*/
/*! \var Bool            PolygonChunkBase::_sfSmooth
    Defines if gouraud or flat shading is used.
*/
/*! \var Real32          PolygonChunkBase::_sfOffsetFactor
    Defines the polygon offset factor.
*/
/*! \var Real32          PolygonChunkBase::_sfOffsetBias
    Defines the polygon offset bias.
*/
/*! \var Bool            PolygonChunkBase::_sfOffsetPoint
    
*/
/*! \var Bool            PolygonChunkBase::_sfOffsetLine
    
*/
/*! \var Bool            PolygonChunkBase::_sfOffsetFill
    
*/
/*! \var Int32           PolygonChunkBase::_mfStipple
    Defines the stipple pattern. Is only valid and used if it contains 32 elements.
*/
//! PolygonChunk description

FieldDescription *PolygonChunkBase::_desc[] = 
{
    new FieldDescription(SFInt32::getClassType(), 
                     "cullFace", 
                     CullFaceFieldId, CullFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFCullFace),
    new FieldDescription(SFInt32::getClassType(), 
                     "frontFace", 
                     FrontFaceFieldId, FrontFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFFrontFace),
    new FieldDescription(SFInt32::getClassType(), 
                     "modeFace", 
                     ModeFaceFieldId, ModeFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFModeFace),
    new FieldDescription(SFInt32::getClassType(), 
                     "mode", 
                     ModeFieldId, ModeFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFMode),
    new FieldDescription(SFBool::getClassType(), 
                     "smooth", 
                     SmoothFieldId, SmoothFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFSmooth),
    new FieldDescription(SFReal32::getClassType(), 
                     "offsetFactor", 
                     OffsetFactorFieldId, OffsetFactorFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetFactor),
    new FieldDescription(SFReal32::getClassType(), 
                     "offsetBias", 
                     OffsetBiasFieldId, OffsetBiasFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetBias),
    new FieldDescription(SFBool::getClassType(), 
                     "offsetPoint", 
                     OffsetPointFieldId, OffsetPointFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetPoint),
    new FieldDescription(SFBool::getClassType(), 
                     "offsetLine", 
                     OffsetLineFieldId, OffsetLineFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetLine),
    new FieldDescription(SFBool::getClassType(), 
                     "offsetFill", 
                     OffsetFillFieldId, OffsetFillFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetFill),
    new FieldDescription(MFInt32::getClassType(), 
                     "stipple", 
                     StippleFieldId, StippleFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getMFStipple)
};

//! PolygonChunk type

FieldContainerType PolygonChunkBase::_type(
    "PolygonChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &PolygonChunkBase::createEmpty,
    PolygonChunk::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(PolygonChunkBase, PolygonChunkPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PolygonChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PolygonChunkBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PolygonChunkBase::shallowCopy(void) const 
{ 
    PolygonChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PolygonChunk *>(this)); 

    return returnValue; 
}

UInt32 PolygonChunkBase::getContainerSize(void) const 
{ 
    return sizeof(PolygonChunkBase); 
}


void PolygonChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PolygonChunkBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PolygonChunkBase::PolygonChunkBase(void) :
    _sfCullFace               (Int32(GL_FALSE)), 
    _sfFrontFace              (Int32(GL_CCW)), 
    _sfModeFace               (Int32(GL_FRONT)), 
    _sfMode                   (Int32(GL_FILL)), 
    _sfSmooth                 (Bool(GL_TRUE)), 
    _sfOffsetFactor           (Real32(0)), 
    _sfOffsetBias             (Real32(0)), 
    _sfOffsetPoint            (Bool(GL_FALSE)), 
    _sfOffsetLine             (Bool(GL_FALSE)), 
    _sfOffsetFill             (Bool(GL_FALSE)), 
    _mfStipple                (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

PolygonChunkBase::PolygonChunkBase(const PolygonChunkBase &source) :
    _sfCullFace               (source._sfCullFace               ), 
    _sfFrontFace              (source._sfFrontFace              ), 
    _sfModeFace               (source._sfModeFace               ), 
    _sfMode                   (source._sfMode                   ), 
    _sfSmooth                 (source._sfSmooth                 ), 
    _sfOffsetFactor           (source._sfOffsetFactor           ), 
    _sfOffsetBias             (source._sfOffsetBias             ), 
    _sfOffsetPoint            (source._sfOffsetPoint            ), 
    _sfOffsetLine             (source._sfOffsetLine             ), 
    _sfOffsetFill             (source._sfOffsetFill             ), 
    _mfStipple                (source._mfStipple                ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

PolygonChunkBase::~PolygonChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PolygonChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
    {
        returnValue += _sfCullFace.getBinSize();
    }

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
    {
        returnValue += _sfFrontFace.getBinSize();
    }

    if(FieldBits::NoField != (ModeFaceFieldMask & whichField))
    {
        returnValue += _sfModeFace.getBinSize();
    }

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        returnValue += _sfMode.getBinSize();
    }

    if(FieldBits::NoField != (SmoothFieldMask & whichField))
    {
        returnValue += _sfSmooth.getBinSize();
    }

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        returnValue += _sfOffsetFactor.getBinSize();
    }

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        returnValue += _sfOffsetBias.getBinSize();
    }

    if(FieldBits::NoField != (OffsetPointFieldMask & whichField))
    {
        returnValue += _sfOffsetPoint.getBinSize();
    }

    if(FieldBits::NoField != (OffsetLineFieldMask & whichField))
    {
        returnValue += _sfOffsetLine.getBinSize();
    }

    if(FieldBits::NoField != (OffsetFillFieldMask & whichField))
    {
        returnValue += _sfOffsetFill.getBinSize();
    }

    if(FieldBits::NoField != (StippleFieldMask & whichField))
    {
        returnValue += _mfStipple.getBinSize();
    }


    return returnValue;
}

void PolygonChunkBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
    {
        _sfCullFace.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
    {
        _sfFrontFace.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ModeFaceFieldMask & whichField))
    {
        _sfModeFace.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SmoothFieldMask & whichField))
    {
        _sfSmooth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        _sfOffsetFactor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        _sfOffsetBias.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetPointFieldMask & whichField))
    {
        _sfOffsetPoint.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetLineFieldMask & whichField))
    {
        _sfOffsetLine.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFillFieldMask & whichField))
    {
        _sfOffsetFill.copyToBin(pMem);
    }

    if(FieldBits::NoField != (StippleFieldMask & whichField))
    {
        _mfStipple.copyToBin(pMem);
    }


}

void PolygonChunkBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
    {
        _sfCullFace.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
    {
        _sfFrontFace.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ModeFaceFieldMask & whichField))
    {
        _sfModeFace.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SmoothFieldMask & whichField))
    {
        _sfSmooth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        _sfOffsetFactor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        _sfOffsetBias.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetPointFieldMask & whichField))
    {
        _sfOffsetPoint.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetLineFieldMask & whichField))
    {
        _sfOffsetLine.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetFillFieldMask & whichField))
    {
        _sfOffsetFill.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (StippleFieldMask & whichField))
    {
        _mfStipple.copyFromBin(pMem);
    }


}

void PolygonChunkBase::executeSyncImpl(      PolygonChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
        _sfCullFace.syncWith(pOther->_sfCullFace);

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
        _sfFrontFace.syncWith(pOther->_sfFrontFace);

    if(FieldBits::NoField != (ModeFaceFieldMask & whichField))
        _sfModeFace.syncWith(pOther->_sfModeFace);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
        _sfMode.syncWith(pOther->_sfMode);

    if(FieldBits::NoField != (SmoothFieldMask & whichField))
        _sfSmooth.syncWith(pOther->_sfSmooth);

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
        _sfOffsetFactor.syncWith(pOther->_sfOffsetFactor);

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
        _sfOffsetBias.syncWith(pOther->_sfOffsetBias);

    if(FieldBits::NoField != (OffsetPointFieldMask & whichField))
        _sfOffsetPoint.syncWith(pOther->_sfOffsetPoint);

    if(FieldBits::NoField != (OffsetLineFieldMask & whichField))
        _sfOffsetLine.syncWith(pOther->_sfOffsetLine);

    if(FieldBits::NoField != (OffsetFillFieldMask & whichField))
        _sfOffsetFill.syncWith(pOther->_sfOffsetFill);

    if(FieldBits::NoField != (StippleFieldMask & whichField))
        _mfStipple.syncWith(pOther->_mfStipple);


}

