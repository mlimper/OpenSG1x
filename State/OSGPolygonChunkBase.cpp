/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEPOLYGONCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGPolygonChunkBase.h"
#include "OSGPolygonChunk.h"

#include <GL/gl.h>	// CullFace default header
#include <GL/gl.h>	// FrontFace default header
#include <GL/gl.h>	// ModeFace default header
#include <GL/gl.h>	// Mode default header
#include <GL/gl.h>	// Smooth default header
#include <GL/gl.h>	// OffsetPoint default header
#include <GL/gl.h>	// OffsetLine default header
#include <GL/gl.h>	// OffsetFill default header

OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	PolygonChunkBase::CullFaceFieldMask = 
    (1 << PolygonChunkBase::CullFaceFieldId);

const OSG::BitVector	PolygonChunkBase::FrontFaceFieldMask = 
    (1 << PolygonChunkBase::FrontFaceFieldId);

const OSG::BitVector	PolygonChunkBase::ModeFaceFieldMask = 
    (1 << PolygonChunkBase::ModeFaceFieldId);

const OSG::BitVector	PolygonChunkBase::ModeFieldMask = 
    (1 << PolygonChunkBase::ModeFieldId);

const OSG::BitVector	PolygonChunkBase::SmoothFieldMask = 
    (1 << PolygonChunkBase::SmoothFieldId);

const OSG::BitVector	PolygonChunkBase::OffsetFactorFieldMask = 
    (1 << PolygonChunkBase::OffsetFactorFieldId);

const OSG::BitVector	PolygonChunkBase::OffsetBiasFieldMask = 
    (1 << PolygonChunkBase::OffsetBiasFieldId);

const OSG::BitVector	PolygonChunkBase::OffsetPointFieldMask = 
    (1 << PolygonChunkBase::OffsetPointFieldId);

const OSG::BitVector	PolygonChunkBase::OffsetLineFieldMask = 
    (1 << PolygonChunkBase::OffsetLineFieldId);

const OSG::BitVector	PolygonChunkBase::OffsetFillFieldMask = 
    (1 << PolygonChunkBase::OffsetFillFieldId);

const OSG::BitVector	PolygonChunkBase::StippleFieldMask = 
    (1 << PolygonChunkBase::StippleFieldId);



char PolygonChunkBase::cvsid[] = "@(#)$Id: OSGPolygonChunkBase.cpp,v 1.5 2001/07/03 14:16:32 vossg Exp $";

/** \brief Group field description
 */

FieldDescription PolygonChunkBase::_desc[] = 
{
    FieldDescription(SFInt32::getClassType(), 
                     "sfCullFace", 
                     CullFaceFieldId, CullFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFCullFace),
    FieldDescription(SFInt32::getClassType(), 
                     "sfFrontFace", 
                     FrontFaceFieldId, FrontFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFFrontFace),
    FieldDescription(SFInt32::getClassType(), 
                     "sfModeFace", 
                     ModeFaceFieldId, ModeFaceFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFModeFace),
    FieldDescription(SFInt32::getClassType(), 
                     "sfMode", 
                     ModeFieldId, ModeFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFMode),
    FieldDescription(SFBool::getClassType(), 
                     "sfSmooth", 
                     SmoothFieldId, SmoothFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFSmooth),
    FieldDescription(SFReal32::getClassType(), 
                     "sfOffsetFactor", 
                     OffsetFactorFieldId, OffsetFactorFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetFactor),
    FieldDescription(SFReal32::getClassType(), 
                     "sfOffsetBias", 
                     OffsetBiasFieldId, OffsetBiasFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetBias),
    FieldDescription(SFBool::getClassType(), 
                     "sfOffsetPoint", 
                     OffsetPointFieldId, OffsetPointFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetPoint),
    FieldDescription(SFBool::getClassType(), 
                     "sfOffsetLine", 
                     OffsetLineFieldId, OffsetLineFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetLine),
    FieldDescription(SFBool::getClassType(), 
                     "sfOffsetFill", 
                     OffsetFillFieldId, OffsetFillFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getSFOffsetFill),
    FieldDescription(MFInt32::getClassType(), 
                     "mfStipple", 
                     StippleFieldId, StippleFieldMask,
                     false,
                     (FieldAccessMethod) &PolygonChunkBase::getMFStipple)
};

/** \brief PolygonChunk type
 */

FieldContainerType PolygonChunkBase::_type(
    "PolygonChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &PolygonChunkBase::createEmpty,
    PolygonChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(PolygonChunkBase, PolygonChunkPtr)

FieldContainerType &PolygonChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PolygonChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr PolygonChunkBase::shallowCopy(void) const 
{ 
    PolygonChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PolygonChunk *>(this)); 

    return returnValue; 
}

UInt32 PolygonChunkBase::getSize(void) const 
{ 
    return sizeof(PolygonChunkBase); 
}


void PolygonChunkBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((PolygonChunkBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

PolygonChunkBase::PolygonChunkBase(void) :
	_sfCullFace	(Int32(GL_FALSE)), 
	_sfFrontFace	(Int32(GL_CCW)), 
	_sfModeFace	(Int32(GL_FRONT)), 
	_sfMode	(Int32(GL_FILL)), 
	_sfSmooth	(Bool(GL_TRUE)), 
	_sfOffsetFactor	(Real32(0)), 
	_sfOffsetBias	(Real32(0)), 
	_sfOffsetPoint	(Bool(GL_FALSE)), 
	_sfOffsetLine	(Bool(GL_FALSE)), 
	_sfOffsetFill	(Bool(GL_FALSE)), 
	_mfStipple	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

PolygonChunkBase::PolygonChunkBase(const PolygonChunkBase &source) :
	_sfCullFace		(source._sfCullFace), 
	_sfFrontFace		(source._sfFrontFace), 
	_sfModeFace		(source._sfModeFace), 
	_sfMode		(source._sfMode), 
	_sfSmooth		(source._sfSmooth), 
	_sfOffsetFactor		(source._sfOffsetFactor), 
	_sfOffsetBias		(source._sfOffsetBias), 
	_sfOffsetPoint		(source._sfOffsetPoint), 
	_sfOffsetLine		(source._sfOffsetLine), 
	_sfOffsetFill		(source._sfOffsetFill), 
	_mfStipple		(source._mfStipple), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

PolygonChunkBase::~PolygonChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void PolygonChunkBase::executeSyncImpl(PolygonChunkBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (CullFaceFieldMask & whichField))
    {
        _sfCullFace.syncWith(pOther->_sfCullFace);
    }

    if(FieldBits::NoField != (FrontFaceFieldMask & whichField))
    {
        _sfFrontFace.syncWith(pOther->_sfFrontFace);
    }

    if(FieldBits::NoField != (ModeFaceFieldMask & whichField))
    {
        _sfModeFace.syncWith(pOther->_sfModeFace);
    }

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.syncWith(pOther->_sfMode);
    }

    if(FieldBits::NoField != (SmoothFieldMask & whichField))
    {
        _sfSmooth.syncWith(pOther->_sfSmooth);
    }

    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        _sfOffsetFactor.syncWith(pOther->_sfOffsetFactor);
    }

    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        _sfOffsetBias.syncWith(pOther->_sfOffsetBias);
    }

    if(FieldBits::NoField != (OffsetPointFieldMask & whichField))
    {
        _sfOffsetPoint.syncWith(pOther->_sfOffsetPoint);
    }

    if(FieldBits::NoField != (OffsetLineFieldMask & whichField))
    {
        _sfOffsetLine.syncWith(pOther->_sfOffsetLine);
    }

    if(FieldBits::NoField != (OffsetFillFieldMask & whichField))
    {
        _sfOffsetFill.syncWith(pOther->_sfOffsetFill);
    }

    if(FieldBits::NoField != (StippleFieldMask & whichField))
    {
        _mfStipple.syncWith(pOther->_mfStipple);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

