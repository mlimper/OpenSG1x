/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LightChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILELIGHTCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGLightChunkBase.h"
#include "OSGLightChunk.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	LightChunkBase::DiffuseFieldMask = 
    (1 << LightChunkBase::DiffuseFieldId);

const OSG::BitVector	LightChunkBase::AmbientFieldMask = 
    (1 << LightChunkBase::AmbientFieldId);

const OSG::BitVector	LightChunkBase::SpecularFieldMask = 
    (1 << LightChunkBase::SpecularFieldId);

const OSG::BitVector	LightChunkBase::PositionFieldMask = 
    (1 << LightChunkBase::PositionFieldId);

const OSG::BitVector	LightChunkBase::DirectionFieldMask = 
    (1 << LightChunkBase::DirectionFieldId);

const OSG::BitVector	LightChunkBase::ExponentFieldMask = 
    (1 << LightChunkBase::ExponentFieldId);

const OSG::BitVector	LightChunkBase::CutoffFieldMask = 
    (1 << LightChunkBase::CutoffFieldId);

const OSG::BitVector	LightChunkBase::ConstantAttenuationFieldMask = 
    (1 << LightChunkBase::ConstantAttenuationFieldId);

const OSG::BitVector	LightChunkBase::LinearAttenuationFieldMask = 
    (1 << LightChunkBase::LinearAttenuationFieldId);

const OSG::BitVector	LightChunkBase::QuadraticAttenuationFieldMask = 
    (1 << LightChunkBase::QuadraticAttenuationFieldId);



char LightChunkBase::cvsid[] = "@(#)$Id: OSGLightChunkBase.cpp,v 1.5 2001/07/03 14:16:32 vossg Exp $";

/** \brief Group field description
 */

FieldDescription LightChunkBase::_desc[] = 
{
    FieldDescription(SFColor4f::getClassType(), 
                     "sfDiffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFDiffuse),
    FieldDescription(SFColor4f::getClassType(), 
                     "sfAmbient", 
                     AmbientFieldId, AmbientFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFAmbient),
    FieldDescription(SFColor4f::getClassType(), 
                     "sfSpecular", 
                     SpecularFieldId, SpecularFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFSpecular),
    FieldDescription(SFVec4f::getClassType(), 
                     "sfPosition", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFPosition),
    FieldDescription(SFVec3f::getClassType(), 
                     "sfDirection", 
                     DirectionFieldId, DirectionFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFDirection),
    FieldDescription(SFReal32::getClassType(), 
                     "sfExponent", 
                     ExponentFieldId, ExponentFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFExponent),
    FieldDescription(SFReal32::getClassType(), 
                     "sfCutoff", 
                     CutoffFieldId, CutoffFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFCutoff),
    FieldDescription(SFReal32::getClassType(), 
                     "sfConstantAttenuation", 
                     ConstantAttenuationFieldId, ConstantAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFConstantAttenuation),
    FieldDescription(SFReal32::getClassType(), 
                     "sfLinearAttenuation", 
                     LinearAttenuationFieldId, LinearAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFLinearAttenuation),
    FieldDescription(SFReal32::getClassType(), 
                     "sfQuadraticAttenuation", 
                     QuadraticAttenuationFieldId, QuadraticAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightChunkBase::getSFQuadraticAttenuation)
};

/** \brief LightChunk type
 */

FieldContainerType LightChunkBase::_type(
    "LightChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &LightChunkBase::createEmpty,
    LightChunk::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(LightChunkBase, LightChunkPtr)

FieldContainerType &LightChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LightChunkBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr LightChunkBase::shallowCopy(void) const 
{ 
    LightChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const LightChunk *>(this)); 

    return returnValue; 
}

UInt32 LightChunkBase::getSize(void) const 
{ 
    return sizeof(LightChunkBase); 
}


void LightChunkBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((LightChunkBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

LightChunkBase::LightChunkBase(void) :
	_sfDiffuse	(Color4f(1,1,1,0)), 
	_sfAmbient	(Color4f(.1,.1,.1,0)), 
	_sfSpecular	(Color4f(1,1,1,0)), 
	_sfPosition	(Vec4f(0,-1,0,0)), 
	_sfDirection	(Vec3f(0,0,1)), 
	_sfExponent	(Real32(2)), 
	_sfCutoff	(Real32(180)), 
	_sfConstantAttenuation	(Real32(1)), 
	_sfLinearAttenuation	(Real32(0)), 
	_sfQuadraticAttenuation	(Real32(0)), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

LightChunkBase::LightChunkBase(const LightChunkBase &source) :
	_sfDiffuse		(source._sfDiffuse), 
	_sfAmbient		(source._sfAmbient), 
	_sfSpecular		(source._sfSpecular), 
	_sfPosition		(source._sfPosition), 
	_sfDirection		(source._sfDirection), 
	_sfExponent		(source._sfExponent), 
	_sfCutoff		(source._sfCutoff), 
	_sfConstantAttenuation		(source._sfConstantAttenuation), 
	_sfLinearAttenuation		(source._sfLinearAttenuation), 
	_sfQuadraticAttenuation		(source._sfQuadraticAttenuation), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

LightChunkBase::~LightChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void LightChunkBase::executeSyncImpl(LightChunkBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.syncWith(pOther->_sfDiffuse);
    }

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.syncWith(pOther->_sfAmbient);
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.syncWith(pOther->_sfSpecular);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.syncWith(pOther->_sfPosition);
    }

    if(FieldBits::NoField != (DirectionFieldMask & whichField))
    {
        _sfDirection.syncWith(pOther->_sfDirection);
    }

    if(FieldBits::NoField != (ExponentFieldMask & whichField))
    {
        _sfExponent.syncWith(pOther->_sfExponent);
    }

    if(FieldBits::NoField != (CutoffFieldMask & whichField))
    {
        _sfCutoff.syncWith(pOther->_sfCutoff);
    }

    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
    {
        _sfConstantAttenuation.syncWith(pOther->_sfConstantAttenuation);
    }

    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
    {
        _sfLinearAttenuation.syncWith(pOther->_sfLinearAttenuation);
    }

    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
    {
        _sfQuadraticAttenuation.syncWith(pOther->_sfQuadraticAttenuation);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

