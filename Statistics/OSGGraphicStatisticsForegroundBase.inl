/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GraphicStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &GraphicStatisticsForegroundBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 GraphicStatisticsForegroundBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
GraphicStatisticsForegroundPtr GraphicStatisticsForegroundBase::create(void) 
{
    GraphicStatisticsForegroundPtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = GraphicStatisticsForegroundPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
GraphicStatisticsForegroundPtr GraphicStatisticsForegroundBase::createEmpty(void) 
{ 
    GraphicStatisticsForegroundPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
MFInt32 *GraphicStatisticsForegroundBase::getMFElementIDs(void)
{
    return &_mfElementIDs;
}

inline
SFStatCollector *GraphicStatisticsForegroundBase::getSFCollector(void)
{
    return &_sfCollector;
}

inline
MFUInt32 *GraphicStatisticsForegroundBase::getMFDisplayType(void)
{
    return &_mfDisplayType;
}

inline
MFVec2f *GraphicStatisticsForegroundBase::getMFSize(void)
{
    return &_mfSize;
}

inline
MFVec2f *GraphicStatisticsForegroundBase::getMFPos(void)
{
    return &_mfPos;
}

inline
MFColor4f *GraphicStatisticsForegroundBase::getMFColorMax(void)
{
    return &_mfColorMax;
}

inline
MFColor4f *GraphicStatisticsForegroundBase::getMFColorMin(void)
{
    return &_mfColorMin;
}

inline
MFColor4f *GraphicStatisticsForegroundBase::getMFColorCurrent(void)
{
    return &_mfColorCurrent;
}

inline
MFReal32 *GraphicStatisticsForegroundBase::getMFMinValue(void)
{
    return &_mfMinValue;
}

inline
MFReal32 *GraphicStatisticsForegroundBase::getMFMaxValue(void)
{
    return &_mfMaxValue;
}

inline
MFUInt32 *GraphicStatisticsForegroundBase::getMFFlags(void)
{
    return &_mfFlags;
}

inline
MFString *GraphicStatisticsForegroundBase::getMFDescription(void)
{
    return &_mfDescription;
}

inline
SFReal32 *GraphicStatisticsForegroundBase::getSFLineWidth(void)
{
    return &_sfLineWidth;
}

inline
SFColor3f *GraphicStatisticsForegroundBase::getSFColorBackground(void)
{
    return &_sfColorBackground;
}

inline
SFBool *GraphicStatisticsForegroundBase::getSFTextEnabled(void)
{
    return &_sfTextEnabled;
}

inline
SFBool *GraphicStatisticsForegroundBase::getSFBackgroundEnabled(void)
{
    return &_sfBackgroundEnabled;
}

inline
SFBool *GraphicStatisticsForegroundBase::getSFBorderEnabled(void)
{
    return &_sfBorderEnabled;
}


inline
StatCollector &GraphicStatisticsForegroundBase::getCollector(void)
{
    return _sfCollector.getValue();
}

inline
const StatCollector &GraphicStatisticsForegroundBase::getCollector(void) const
{
    return _sfCollector.getValue();
}

inline
void GraphicStatisticsForegroundBase::setCollector(const StatCollector &value)
{
    _sfCollector.setValue(value);
}

inline
Real32 &GraphicStatisticsForegroundBase::getLineWidth(void)
{
    return _sfLineWidth.getValue();
}

inline
const Real32 &GraphicStatisticsForegroundBase::getLineWidth(void) const
{
    return _sfLineWidth.getValue();
}

inline
void GraphicStatisticsForegroundBase::setLineWidth(const Real32 &value)
{
    _sfLineWidth.setValue(value);
}

inline
Color3f &GraphicStatisticsForegroundBase::getColorBackground(void)
{
    return _sfColorBackground.getValue();
}

inline
const Color3f &GraphicStatisticsForegroundBase::getColorBackground(void) const
{
    return _sfColorBackground.getValue();
}

inline
void GraphicStatisticsForegroundBase::setColorBackground(const Color3f &value)
{
    _sfColorBackground.setValue(value);
}

inline
bool &GraphicStatisticsForegroundBase::getTextEnabled(void)
{
    return _sfTextEnabled.getValue();
}

inline
const bool &GraphicStatisticsForegroundBase::getTextEnabled(void) const
{
    return _sfTextEnabled.getValue();
}

inline
void GraphicStatisticsForegroundBase::setTextEnabled(const bool &value)
{
    _sfTextEnabled.setValue(value);
}

inline
bool &GraphicStatisticsForegroundBase::getBackgroundEnabled(void)
{
    return _sfBackgroundEnabled.getValue();
}

inline
const bool &GraphicStatisticsForegroundBase::getBackgroundEnabled(void) const
{
    return _sfBackgroundEnabled.getValue();
}

inline
void GraphicStatisticsForegroundBase::setBackgroundEnabled(const bool &value)
{
    _sfBackgroundEnabled.setValue(value);
}

inline
bool &GraphicStatisticsForegroundBase::getBorderEnabled(void)
{
    return _sfBorderEnabled.getValue();
}

inline
const bool &GraphicStatisticsForegroundBase::getBorderEnabled(void) const
{
    return _sfBorderEnabled.getValue();
}

inline
void GraphicStatisticsForegroundBase::setBorderEnabled(const bool &value)
{
    _sfBorderEnabled.setValue(value);
}


inline
Int32 &GraphicStatisticsForegroundBase::getElementIDs(const UInt32 index)
{
    return _mfElementIDs[index];
}

inline
MFInt32 &GraphicStatisticsForegroundBase::getElementIDs(void)
{
    return _mfElementIDs;
}

inline
const MFInt32 &GraphicStatisticsForegroundBase::getElementIDs(void) const
{
    return _mfElementIDs;
}

inline
UInt32 &GraphicStatisticsForegroundBase::getDisplayType(const UInt32 index)
{
    return _mfDisplayType[index];
}

inline
MFUInt32 &GraphicStatisticsForegroundBase::getDisplayType(void)
{
    return _mfDisplayType;
}

inline
const MFUInt32 &GraphicStatisticsForegroundBase::getDisplayType(void) const
{
    return _mfDisplayType;
}

inline
Vec2f &GraphicStatisticsForegroundBase::getSize(const UInt32 index)
{
    return _mfSize[index];
}

inline
MFVec2f &GraphicStatisticsForegroundBase::getSize(void)
{
    return _mfSize;
}

inline
const MFVec2f &GraphicStatisticsForegroundBase::getSize(void) const
{
    return _mfSize;
}

inline
Vec2f &GraphicStatisticsForegroundBase::getPos(const UInt32 index)
{
    return _mfPos[index];
}

inline
MFVec2f &GraphicStatisticsForegroundBase::getPos(void)
{
    return _mfPos;
}

inline
const MFVec2f &GraphicStatisticsForegroundBase::getPos(void) const
{
    return _mfPos;
}

inline
Color4f &GraphicStatisticsForegroundBase::getColorMax(const UInt32 index)
{
    return _mfColorMax[index];
}

inline
MFColor4f &GraphicStatisticsForegroundBase::getColorMax(void)
{
    return _mfColorMax;
}

inline
const MFColor4f &GraphicStatisticsForegroundBase::getColorMax(void) const
{
    return _mfColorMax;
}

inline
Color4f &GraphicStatisticsForegroundBase::getColorMin(const UInt32 index)
{
    return _mfColorMin[index];
}

inline
MFColor4f &GraphicStatisticsForegroundBase::getColorMin(void)
{
    return _mfColorMin;
}

inline
const MFColor4f &GraphicStatisticsForegroundBase::getColorMin(void) const
{
    return _mfColorMin;
}

inline
Color4f &GraphicStatisticsForegroundBase::getColorCurrent(const UInt32 index)
{
    return _mfColorCurrent[index];
}

inline
MFColor4f &GraphicStatisticsForegroundBase::getColorCurrent(void)
{
    return _mfColorCurrent;
}

inline
const MFColor4f &GraphicStatisticsForegroundBase::getColorCurrent(void) const
{
    return _mfColorCurrent;
}

inline
Real32 &GraphicStatisticsForegroundBase::getMinValue(const UInt32 index)
{
    return _mfMinValue[index];
}

inline
MFReal32 &GraphicStatisticsForegroundBase::getMinValue(void)
{
    return _mfMinValue;
}

inline
const MFReal32 &GraphicStatisticsForegroundBase::getMinValue(void) const
{
    return _mfMinValue;
}

inline
Real32 &GraphicStatisticsForegroundBase::getMaxValue(const UInt32 index)
{
    return _mfMaxValue[index];
}

inline
MFReal32 &GraphicStatisticsForegroundBase::getMaxValue(void)
{
    return _mfMaxValue;
}

inline
const MFReal32 &GraphicStatisticsForegroundBase::getMaxValue(void) const
{
    return _mfMaxValue;
}

inline
UInt32 &GraphicStatisticsForegroundBase::getFlags(const UInt32 index)
{
    return _mfFlags[index];
}

inline
MFUInt32 &GraphicStatisticsForegroundBase::getFlags(void)
{
    return _mfFlags;
}

inline
const MFUInt32 &GraphicStatisticsForegroundBase::getFlags(void) const
{
    return _mfFlags;
}

inline
string &GraphicStatisticsForegroundBase::getDescription(const UInt32 index)
{
    return _mfDescription[index];
}

inline
MFString &GraphicStatisticsForegroundBase::getDescription(void)
{
    return _mfDescription;
}

inline
const MFString &GraphicStatisticsForegroundBase::getDescription(void) const
{
    return _mfDescription;
}

OSG_END_NAMESPACE

#define OSGGRAPHICSTATISTICSFOREGROUNDBASE_INLINE_CVSID "@(#)$Id: OSGGraphicStatisticsForegroundBase.inl,v 1.1 2002/07/18 16:09:33 jbehr Exp $"

