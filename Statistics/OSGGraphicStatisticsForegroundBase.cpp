/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GraphicStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGRAPHICSTATISTICSFOREGROUNDINST

#ifndef WIN32

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGraphicStatisticsForegroundBase.h"
#include "OSGGraphicStatisticsForeground.h"


OSG_USING_NAMESPACE

const OSG::BitVector  GraphicStatisticsForegroundBase::DisplayTypeFieldMask = 
    (1 << GraphicStatisticsForegroundBase::DisplayTypeFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::SizeFieldMask = 
    (1 << GraphicStatisticsForegroundBase::SizeFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::PosFieldMask = 
    (1 << GraphicStatisticsForegroundBase::PosFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::ColorMaxFieldMask = 
    (1 << GraphicStatisticsForegroundBase::ColorMaxFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::ColorMinFieldMask = 
    (1 << GraphicStatisticsForegroundBase::ColorMinFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::ColorCurrentFieldMask = 
    (1 << GraphicStatisticsForegroundBase::ColorCurrentFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::MinValueFieldMask = 
    (1 << GraphicStatisticsForegroundBase::MinValueFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::MaxValueFieldMask = 
    (1 << GraphicStatisticsForegroundBase::MaxValueFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::FlagsFieldMask = 
    (1 << GraphicStatisticsForegroundBase::FlagsFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::HistorySizeFieldMask = 
    (1 << GraphicStatisticsForegroundBase::HistorySizeFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::DescriptionFieldMask = 
    (1 << GraphicStatisticsForegroundBase::DescriptionFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::LineWidthFieldMask = 
    (1 << GraphicStatisticsForegroundBase::LineWidthFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::ColorBackgroundFieldMask = 
    (1 << GraphicStatisticsForegroundBase::ColorBackgroundFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::TextEnabledFieldMask = 
    (1 << GraphicStatisticsForegroundBase::TextEnabledFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::BackgroundEnabledFieldMask = 
    (1 << GraphicStatisticsForegroundBase::BackgroundEnabledFieldId);

const OSG::BitVector  GraphicStatisticsForegroundBase::BorderEnabledFieldMask = 
    (1 << GraphicStatisticsForegroundBase::BorderEnabledFieldId);



// Field descriptions

/*! \var UInt32          GraphicStatisticsForegroundBase::_mfDisplayType
    type[i] sets the graphical representation of this statistics data
*/
/*! \var Vec2f           GraphicStatisticsForegroundBase::_mfSize
    size of this StatisticsElement
*/
/*! \var Vec2f           GraphicStatisticsForegroundBase::_mfPos
    Position at which this StatisticsElement should be drawn
*/
/*! \var Color4f         GraphicStatisticsForegroundBase::_mfColorMax
    max color of this StatisticsElement
*/
/*! \var Color4f         GraphicStatisticsForegroundBase::_mfColorMin
    color2[i] is the second color of this StatisticsElement
*/
/*! \var Color4f         GraphicStatisticsForegroundBase::_mfColorCurrent
    color2[i] is the third color of this StatisticsElement
*/
/*! \var Real32          GraphicStatisticsForegroundBase::_mfMinValue
    The minimum value to be displayed by the Statistic
*/
/*! \var Real32          GraphicStatisticsForegroundBase::_mfMaxValue
    The maximum value to be displayed by the Statistic
*/
/*! \var UInt32          GraphicStatisticsForegroundBase::_mfFlags
    
*/
/*! \var UInt32          GraphicStatisticsForegroundBase::_mfHistorySize
    
*/
/*! \var std::string     GraphicStatisticsForegroundBase::_mfDescription
    The description for every id
*/
/*! \var Real32          GraphicStatisticsForegroundBase::_sfLineWidth
    The default line width to be used by this foreground
*/
/*! \var Color3f         GraphicStatisticsForegroundBase::_sfColorBackground
    BackgroundColor of the statistics Display
*/
/*! \var bool            GraphicStatisticsForegroundBase::_sfTextEnabled
    Set this to false to disable the text
*/
/*! \var bool            GraphicStatisticsForegroundBase::_sfBackgroundEnabled
    Set this to "false" to disable the backround of all Graphs
*/
/*! \var bool            GraphicStatisticsForegroundBase::_sfBorderEnabled
    Set this to false to disable the border around elements
*/

//! GraphicStatisticsForeground description

FieldDescription *GraphicStatisticsForegroundBase::_desc[] = 
{
    new FieldDescription(MFUInt32::getClassType(), 
                     "displayType", 
                     DisplayTypeFieldId, DisplayTypeFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFDisplayType),
    new FieldDescription(MFVec2f::getClassType(), 
                     "size", 
                     SizeFieldId, SizeFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFSize),
    new FieldDescription(MFVec2f::getClassType(), 
                     "pos", 
                     PosFieldId, PosFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFPos),
    new FieldDescription(MFColor4f::getClassType(), 
                     "colorMax", 
                     ColorMaxFieldId, ColorMaxFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFColorMax),
    new FieldDescription(MFColor4f::getClassType(), 
                     "colorMin", 
                     ColorMinFieldId, ColorMinFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFColorMin),
    new FieldDescription(MFColor4f::getClassType(), 
                     "colorCurrent", 
                     ColorCurrentFieldId, ColorCurrentFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFColorCurrent),
    new FieldDescription(MFReal32::getClassType(), 
                     "minValue", 
                     MinValueFieldId, MinValueFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFMinValue),
    new FieldDescription(MFReal32::getClassType(), 
                     "maxValue", 
                     MaxValueFieldId, MaxValueFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFMaxValue),
    new FieldDescription(MFUInt32::getClassType(), 
                     "flags", 
                     FlagsFieldId, FlagsFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFFlags),
    new FieldDescription(MFUInt32::getClassType(), 
                     "historySize", 
                     HistorySizeFieldId, HistorySizeFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFHistorySize),
    new FieldDescription(MFString::getClassType(), 
                     "description", 
                     DescriptionFieldId, DescriptionFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getMFDescription),
    new FieldDescription(SFReal32::getClassType(), 
                     "lineWidth", 
                     LineWidthFieldId, LineWidthFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getSFLineWidth),
    new FieldDescription(SFColor3f::getClassType(), 
                     "colorBackground", 
                     ColorBackgroundFieldId, ColorBackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getSFColorBackground),
    new FieldDescription(SFBool::getClassType(), 
                     "textEnabled", 
                     TextEnabledFieldId, TextEnabledFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getSFTextEnabled),
    new FieldDescription(SFBool::getClassType(), 
                     "backgroundEnabled", 
                     BackgroundEnabledFieldId, BackgroundEnabledFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getSFBackgroundEnabled),
    new FieldDescription(SFBool::getClassType(), 
                     "borderEnabled", 
                     BorderEnabledFieldId, BorderEnabledFieldMask,
                     false,
                     (FieldAccessMethod) &GraphicStatisticsForegroundBase::getSFBorderEnabled)
};

//! GraphicStatisticsForeground type

FieldContainerType GraphicStatisticsForegroundBase::_type(
    "GraphicStatisticsForeground",
    "StatisticsForeground",
    NULL,
    (PrototypeCreateF) &GraphicStatisticsForegroundBase::createEmpty,
    GraphicStatisticsForeground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GraphicStatisticsForegroundBase, GraphicStatisticsForegroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &GraphicStatisticsForegroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GraphicStatisticsForegroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr GraphicStatisticsForegroundBase::shallowCopy(void) const 
{ 
    GraphicStatisticsForegroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GraphicStatisticsForeground *>(this)); 

    return returnValue; 
}

UInt32 GraphicStatisticsForegroundBase::getContainerSize(void) const 
{ 
    return sizeof(GraphicStatisticsForeground); 
}


void GraphicStatisticsForegroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GraphicStatisticsForegroundBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

GraphicStatisticsForegroundBase::GraphicStatisticsForegroundBase(void) :
    _mfDisplayType            (), 
    _mfSize                   (), 
    _mfPos                    (), 
    _mfColorMax               (), 
    _mfColorMin               (), 
    _mfColorCurrent           (), 
    _mfMinValue               (), 
    _mfMaxValue               (), 
    _mfFlags                  (), 
    _mfHistorySize            (), 
    _mfDescription            (), 
    _sfLineWidth              (Real32(1.0)), 
    _sfColorBackground        (Color3f(0.0,0.0,0.0)), 
    _sfTextEnabled            (bool(true)), 
    _sfBackgroundEnabled      (bool(true)), 
    _sfBorderEnabled          (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

GraphicStatisticsForegroundBase::GraphicStatisticsForegroundBase(const GraphicStatisticsForegroundBase &source) :
    _mfDisplayType            (source._mfDisplayType            ), 
    _mfSize                   (source._mfSize                   ), 
    _mfPos                    (source._mfPos                    ), 
    _mfColorMax               (source._mfColorMax               ), 
    _mfColorMin               (source._mfColorMin               ), 
    _mfColorCurrent           (source._mfColorCurrent           ), 
    _mfMinValue               (source._mfMinValue               ), 
    _mfMaxValue               (source._mfMaxValue               ), 
    _mfFlags                  (source._mfFlags                  ), 
    _mfHistorySize            (source._mfHistorySize            ), 
    _mfDescription            (source._mfDescription            ), 
    _sfLineWidth              (source._sfLineWidth              ), 
    _sfColorBackground        (source._sfColorBackground        ), 
    _sfTextEnabled            (source._sfTextEnabled            ), 
    _sfBackgroundEnabled      (source._sfBackgroundEnabled      ), 
    _sfBorderEnabled          (source._sfBorderEnabled          ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

GraphicStatisticsForegroundBase::~GraphicStatisticsForegroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GraphicStatisticsForegroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DisplayTypeFieldMask & whichField))
    {
        returnValue += _mfDisplayType.getBinSize();
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _mfSize.getBinSize();
    }

    if(FieldBits::NoField != (PosFieldMask & whichField))
    {
        returnValue += _mfPos.getBinSize();
    }

    if(FieldBits::NoField != (ColorMaxFieldMask & whichField))
    {
        returnValue += _mfColorMax.getBinSize();
    }

    if(FieldBits::NoField != (ColorMinFieldMask & whichField))
    {
        returnValue += _mfColorMin.getBinSize();
    }

    if(FieldBits::NoField != (ColorCurrentFieldMask & whichField))
    {
        returnValue += _mfColorCurrent.getBinSize();
    }

    if(FieldBits::NoField != (MinValueFieldMask & whichField))
    {
        returnValue += _mfMinValue.getBinSize();
    }

    if(FieldBits::NoField != (MaxValueFieldMask & whichField))
    {
        returnValue += _mfMaxValue.getBinSize();
    }

    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        returnValue += _mfFlags.getBinSize();
    }

    if(FieldBits::NoField != (HistorySizeFieldMask & whichField))
    {
        returnValue += _mfHistorySize.getBinSize();
    }

    if(FieldBits::NoField != (DescriptionFieldMask & whichField))
    {
        returnValue += _mfDescription.getBinSize();
    }

    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        returnValue += _sfLineWidth.getBinSize();
    }

    if(FieldBits::NoField != (ColorBackgroundFieldMask & whichField))
    {
        returnValue += _sfColorBackground.getBinSize();
    }

    if(FieldBits::NoField != (TextEnabledFieldMask & whichField))
    {
        returnValue += _sfTextEnabled.getBinSize();
    }

    if(FieldBits::NoField != (BackgroundEnabledFieldMask & whichField))
    {
        returnValue += _sfBackgroundEnabled.getBinSize();
    }

    if(FieldBits::NoField != (BorderEnabledFieldMask & whichField))
    {
        returnValue += _sfBorderEnabled.getBinSize();
    }


    return returnValue;
}

void GraphicStatisticsForegroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DisplayTypeFieldMask & whichField))
    {
        _mfDisplayType.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _mfSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PosFieldMask & whichField))
    {
        _mfPos.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorMaxFieldMask & whichField))
    {
        _mfColorMax.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorMinFieldMask & whichField))
    {
        _mfColorMin.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorCurrentFieldMask & whichField))
    {
        _mfColorCurrent.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MinValueFieldMask & whichField))
    {
        _mfMinValue.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaxValueFieldMask & whichField))
    {
        _mfMaxValue.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        _mfFlags.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HistorySizeFieldMask & whichField))
    {
        _mfHistorySize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DescriptionFieldMask & whichField))
    {
        _mfDescription.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        _sfLineWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorBackgroundFieldMask & whichField))
    {
        _sfColorBackground.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TextEnabledFieldMask & whichField))
    {
        _sfTextEnabled.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundEnabledFieldMask & whichField))
    {
        _sfBackgroundEnabled.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BorderEnabledFieldMask & whichField))
    {
        _sfBorderEnabled.copyToBin(pMem);
    }


}

void GraphicStatisticsForegroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DisplayTypeFieldMask & whichField))
    {
        _mfDisplayType.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _mfSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PosFieldMask & whichField))
    {
        _mfPos.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorMaxFieldMask & whichField))
    {
        _mfColorMax.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorMinFieldMask & whichField))
    {
        _mfColorMin.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorCurrentFieldMask & whichField))
    {
        _mfColorCurrent.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MinValueFieldMask & whichField))
    {
        _mfMinValue.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaxValueFieldMask & whichField))
    {
        _mfMaxValue.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FlagsFieldMask & whichField))
    {
        _mfFlags.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HistorySizeFieldMask & whichField))
    {
        _mfHistorySize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DescriptionFieldMask & whichField))
    {
        _mfDescription.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
    {
        _sfLineWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorBackgroundFieldMask & whichField))
    {
        _sfColorBackground.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TextEnabledFieldMask & whichField))
    {
        _sfTextEnabled.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BackgroundEnabledFieldMask & whichField))
    {
        _sfBackgroundEnabled.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BorderEnabledFieldMask & whichField))
    {
        _sfBorderEnabled.copyFromBin(pMem);
    }


}

void GraphicStatisticsForegroundBase::executeSyncImpl(      GraphicStatisticsForegroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (DisplayTypeFieldMask & whichField))
        _mfDisplayType.syncWith(pOther->_mfDisplayType);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _mfSize.syncWith(pOther->_mfSize);

    if(FieldBits::NoField != (PosFieldMask & whichField))
        _mfPos.syncWith(pOther->_mfPos);

    if(FieldBits::NoField != (ColorMaxFieldMask & whichField))
        _mfColorMax.syncWith(pOther->_mfColorMax);

    if(FieldBits::NoField != (ColorMinFieldMask & whichField))
        _mfColorMin.syncWith(pOther->_mfColorMin);

    if(FieldBits::NoField != (ColorCurrentFieldMask & whichField))
        _mfColorCurrent.syncWith(pOther->_mfColorCurrent);

    if(FieldBits::NoField != (MinValueFieldMask & whichField))
        _mfMinValue.syncWith(pOther->_mfMinValue);

    if(FieldBits::NoField != (MaxValueFieldMask & whichField))
        _mfMaxValue.syncWith(pOther->_mfMaxValue);

    if(FieldBits::NoField != (FlagsFieldMask & whichField))
        _mfFlags.syncWith(pOther->_mfFlags);

    if(FieldBits::NoField != (HistorySizeFieldMask & whichField))
        _mfHistorySize.syncWith(pOther->_mfHistorySize);

    if(FieldBits::NoField != (DescriptionFieldMask & whichField))
        _mfDescription.syncWith(pOther->_mfDescription);

    if(FieldBits::NoField != (LineWidthFieldMask & whichField))
        _sfLineWidth.syncWith(pOther->_sfLineWidth);

    if(FieldBits::NoField != (ColorBackgroundFieldMask & whichField))
        _sfColorBackground.syncWith(pOther->_sfColorBackground);

    if(FieldBits::NoField != (TextEnabledFieldMask & whichField))
        _sfTextEnabled.syncWith(pOther->_sfTextEnabled);

    if(FieldBits::NoField != (BackgroundEnabledFieldMask & whichField))
        _sfBackgroundEnabled.syncWith(pOther->_sfBackgroundEnabled);

    if(FieldBits::NoField != (BorderEnabledFieldMask & whichField))
        _sfBorderEnabled.syncWith(pOther->_sfBorderEnabled);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<GraphicStatisticsForegroundPtr>::_type("GraphicStatisticsForegroundPtr", "StatisticsForegroundPtr");

OSG_DLLEXPORT_SFIELD_DEF1(GraphicStatisticsForegroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(GraphicStatisticsForegroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGGraphicStatisticsForegroundBase.cpp,v 1.6 2002/09/18 17:31:37 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGGRAPHICSTATISTICSFOREGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGRAPHICSTATISTICSFOREGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGRAPHICSTATISTICSFOREGROUNDFIELDS_HEADER_CVSID;
}

#endif
