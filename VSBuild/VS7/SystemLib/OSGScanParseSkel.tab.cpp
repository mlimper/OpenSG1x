
/*  A Bison parser, made from ../../../source/system/fileio/scanparseskel/osgscanparseskel.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse OSGScanParseSkel_parse
#define yylex OSGScanParseSkel_lex
#define yyerror OSGScanParseSkel_error
#define yylval OSGScanParseSkel_lval
#define yychar OSGScanParseSkel_char
#define yydebug OSGScanParseSkel_debug
#define yynerrs OSGScanParseSkel_nerrs
#define	TOK_HEADER	258
#define	TOK_PROFILE	259
#define	TOK_COMPONENT	260
#define	TOK_META	261
#define	TOK_PROTO	262
#define	TOK_EXTERNPROTO	263
#define	TOK_IS	264
#define	TOK_DEF	265
#define	TOK_USE	266
#define	TOK_ROUTE	267
#define	TOK_TO	268
#define	TOK_IMPORT	269
#define	TOK_EXPORT	270
#define	TOK_AS	271
#define	TOK_eventIn	272
#define	TOK_eventOut	273
#define	TOK_exposedField	274
#define	TOK_field	275
#define	TOK_MFBool	276
#define	TOK_MFColor	277
#define	TOK_MFColorRGBA	278
#define	TOK_MFDouble	279
#define	TOK_MFFloat	280
#define	TOK_MFImage	281
#define	TOK_MFInt32	282
#define	TOK_MFMatrix3d	283
#define	TOK_MFMatrix3f	284
#define	TOK_MFMatrix4d	285
#define	TOK_MFMatrix4f	286
#define	TOK_MFNode	287
#define	TOK_MFRotation	288
#define	TOK_MFString	289
#define	TOK_MFTime	290
#define	TOK_MFVec2d	291
#define	TOK_MFVec2f	292
#define	TOK_MFVec3d	293
#define	TOK_MFVec3f	294
#define	TOK_MFVec4d	295
#define	TOK_MFVec4f	296
#define	TOK_SFBool	297
#define	TOK_SFColor	298
#define	TOK_SFColorRGBA	299
#define	TOK_SFDouble	300
#define	TOK_SFFloat	301
#define	TOK_SFImage	302
#define	TOK_SFInt32	303
#define	TOK_SFMatrix3d	304
#define	TOK_SFMatrix3f	305
#define	TOK_SFMatrix4d	306
#define	TOK_SFMatrix4f	307
#define	TOK_SFNode	308
#define	TOK_SFRotation	309
#define	TOK_SFString	310
#define	TOK_SFTime	311
#define	TOK_SFVec2d	312
#define	TOK_SFVec2f	313
#define	TOK_SFVec3d	314
#define	TOK_SFVec3f	315
#define	TOK_SFVec4d	316
#define	TOK_SFVec4f	317
#define	TOK_MFColor4i	318
#define	TOK_MFPnt2f	319
#define	TOK_MFPnt3f	320
#define	TOK_MFPnt4f	321
#define	TOK_MFPlane	322
#define	TOK_SFColor4i	323
#define	TOK_SFPnt2f	324
#define	TOK_SFPnt3f	325
#define	TOK_SFPnt4f	326
#define	TOK_SFPlane	327
#define	TOK_SFVolume	328
#define	TOK_hex	329
#define	TOK_int32	330
#define	TOK_double	331
#define	TOK_string	332
#define	TOK_bool	333
#define	TOK_NULL	334
#define	TOK_Id	335
#define	TOK_ImageFinished	336
#define	TOK_Error	337


#line 41 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
typedef union {
    long intVal;
    double doubleVal;
    float floatVal;
    const char *stringVal;
    bool boolVal;
} YYSTYPE;
#line 49 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"


#define YYPARSE_PARAM pSkel
#define YYLEX_PARAM   pSkel

#define OSGScanParseSkel_error SKEL->handleError

#include <OSGConfig.h>
#include <OSGBaseFunctions.h>
#include "OSGScanParseLexer.h"
#include "OSGScanParseSkel.h"
#include <iostream>

#if defined(OSG_LINUX_ICC) || defined(OSG_WIN32_ICL)
#pragma warning( disable : 193 810 177 )
#endif

OSG_USING_NAMESPACE

int OSGScanParseSkel_lex(YYSTYPE *lvalp, void *);

#define SKEL ((ScanParseSkel *) pSkel)

#if(!defined(__GNUC__) && defined(__ICL) && __INTEL_COMPILER_VERSION >= 900)
# define alloca(size)   __builtin_alloca (size)
#endif


#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		742
#define	YYFLAG		-32768
#define	YYNTBASE	88

#define YYTRANSLATE(x) ((unsigned)(x) <= 337 ? yytranslate[x] : 342)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,    87,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    83,     2,    84,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    85,     2,    86,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     6,     8,     9,    12,    13,    15,    18,    19,    22,
    24,    27,    28,    29,    34,    36,    38,    41,    42,    44,
    46,    48,    50,    52,    53,    57,    58,    59,    66,    69,
    70,    74,    75,    76,    83,    85,    87,    90,    91,    92,
   102,   106,   109,   110,   111,   116,   117,   122,   123,   124,
   131,   133,   134,   135,   142,   143,   144,   153,   156,   157,
   158,   163,   164,   169,   170,   175,   176,   181,   182,   183,
   184,   196,   197,   198,   206,   207,   212,   215,   216,   218,
   222,   225,   226,   228,   230,   232,   234,   236,   237,   238,
   245,   246,   247,   254,   255,   258,   259,   260,   267,   269,
   273,   274,   278,   280,   282,   284,   286,   288,   292,   294,
   296,   298,   300,   302,   304,   306,   308,   310,   312,   314,
   316,   318,   320,   322,   324,   326,   328,   330,   332,   334,
   336,   338,   340,   342,   344,   346,   348,   350,   352,   354,
   356,   358,   360,   362,   364,   366,   368,   370,   372,   374,
   376,   378,   380,   382,   384,   386,   388,   390,   392,   394,
   396,   398,   400,   402,   404,   406,   408,   411,   414,   417,
   420,   423,   426,   429,   432,   435,   438,   441,   444,   447,
   450,   453,   456,   459,   462,   465,   468,   471,   474,   477,
   480,   483,   486,   489,   492,   495,   498,   501,   504,   507,
   510,   513,   516,   519,   522,   525,   528,   531,   534,   537,
   540,   543,   546,   549,   552,   555,   558,   561,   564,   567,
   569,   571,   573,   575,   577,   579,   581,   583,   584,   585,
   591,   592,   593,   594,   602,   604,   606,   607,   608,   609,
   618,   621,   622,   624,   625,   626,   627,   628,   629,   630,
   631,   632,   650,   651,   652,   653,   654,   655,   656,   657,
   658,   676,   677,   678,   679,   680,   681,   682,   683,   684,
   685,   686,   687,   688,   689,   690,   691,   723,   724,   725,
   726,   727,   728,   729,   730,   731,   732,   733,   734,   735,
   736,   737,   738,   770,   772,   774,   775,   776,   777,   785,
   787,   789,   791,   792,   796,   797,   801,   802,   803,   804,
   811,   812,   813,   814,   821,   822,   823,   824,   825,   834,
   835,   836,   837,   838,   847,   849,   853,   856,   857,   859,
   863,   866,   867,   869,   873,   876,   877,   879,   883,   886,
   887,   889,   893,   896,   897,   899,   903,   906,   907,   909,
   913,   916,   917,   919,   923,   926,   927,   929,   933,   936,
   937,   939,   943,   946,   947,   949,   953,   956,   957,   959,
   963,   966,   967,   969,   973,   976,   977,   979,   983,   986,
   987,   989,   993,   996,   997,   999,  1003,  1006,  1007,  1009,
  1013,  1016,  1017,  1019,  1023,  1026,  1027,  1029,  1033,  1036,
  1037,  1039,  1043,  1046,  1047,  1049,  1053,  1056,  1057,  1058,
  1059,  1060,  1068,  1069,  1073,  1074,  1075,  1081,  1082,  1083,
  1084,  1092,  1093,  1094,  1095,  1103,  1104,  1105,  1106,  1107,
  1117,  1118,  1122,  1123,  1125,  1129,  1132,  1133,  1135,  1139,
  1142,  1143,  1145,  1149,  1152,  1153,  1155,  1159,  1162,  1163,
  1165,  1169,  1172
};

static const short yyrhs[] = {    89,
    90,    92,    95,   100,     0,     3,     0,     0,     4,    91,
     0,     0,    80,     0,    92,    93,     0,     0,     5,    94,
     0,    80,     0,    95,    96,     0,     0,     0,     6,    98,
    97,    99,     0,    77,     0,    77,     0,   100,   101,     0,
     0,   102,     0,   110,     0,   133,     0,   137,     0,   140,
     0,     0,   162,   103,   144,     0,     0,     0,    10,   161,
   104,   162,   105,   144,     0,    11,   161,     0,     0,   162,
   107,   144,     0,     0,     0,    10,   161,   108,   162,   109,
   144,     0,   112,     0,   124,     0,   111,   110,     0,     0,
     0,     7,   162,   113,    83,   115,    84,    85,   114,    86,
     0,   111,   106,   100,     0,   115,   121,     0,     0,     0,
    17,   166,   117,   164,     0,     0,    18,   166,   118,   165,
     0,     0,     0,    20,   166,   119,   163,   120,   167,     0,
   116,     0,     0,     0,    19,   166,   122,   163,   123,   167,
     0,     0,     0,     8,   162,   125,    83,   127,    84,   126,
   143,     0,   127,   128,     0,     0,     0,    17,   166,   129,
   164,     0,     0,    18,   166,   130,   165,     0,     0,    20,
   166,   131,   163,     0,     0,    19,   166,   132,   163,     0,
     0,     0,     0,    12,   161,   134,    87,   165,   135,    13,
   161,   136,    87,   164,     0,     0,     0,    14,   161,   138,
    87,   161,   139,   142,     0,     0,    15,   161,   141,   142,
     0,    16,   161,     0,     0,   292,     0,    85,   145,    86,
     0,   145,   146,     0,     0,   158,     0,   147,     0,   150,
     0,   154,     0,     1,     0,     0,     0,    17,   166,   148,
   164,   149,   153,     0,     0,     0,    18,   166,   151,   165,
   152,   153,     0,     0,     9,   163,     0,     0,     0,    20,
   166,   155,   163,   156,   157,     0,   167,     0,   166,     9,
   163,     0,     0,   163,   159,   160,     0,   133,     0,   110,
     0,   137,     0,   140,     0,   167,     0,   166,     9,   163,
     0,    80,     0,    80,     0,    80,     0,    80,     0,    80,
     0,    21,     0,    22,     0,    23,     0,    24,     0,    25,
     0,    26,     0,    27,     0,    28,     0,    29,     0,    30,
     0,    31,     0,    32,     0,    33,     0,    34,     0,    35,
     0,    36,     0,    37,     0,    38,     0,    39,     0,    40,
     0,    41,     0,    42,     0,    43,     0,    44,     0,    45,
     0,    46,     0,    47,     0,    48,     0,    49,     0,    50,
     0,    51,     0,    52,     0,    53,     0,    54,     0,    55,
     0,    56,     0,    57,     0,    58,     0,    59,     0,    60,
     0,    61,     0,    62,     0,    63,     0,    64,     0,    65,
     0,    66,     0,    67,     0,    68,     0,    69,     0,    70,
     0,    71,     0,    72,     0,    73,     0,    21,   266,     0,
    22,   268,     0,    23,   270,     0,    24,   272,     0,    25,
   274,     0,    26,   276,     0,    27,   278,     0,    28,   280,
     0,    29,   282,     0,    30,   284,     0,    31,   286,     0,
    32,   288,     0,    33,   290,     0,    34,   292,     0,    35,
   294,     0,    36,   296,     0,    37,   298,     0,    38,   300,
     0,    39,   302,     0,    40,   304,     0,    41,   306,     0,
    42,   171,     0,    43,   172,     0,    44,   175,     0,    45,
   179,     0,    46,   180,     0,    47,   181,     0,    48,   186,
     0,    49,   187,     0,    50,   196,     0,    51,   205,     0,
    52,   221,     0,    53,   237,     0,    54,   238,     0,    55,
   242,     0,    56,   243,     0,    57,   244,     0,    58,   246,
     0,    59,   248,     0,    60,   252,     0,    61,   256,     0,
    62,   261,     0,    63,   332,     0,    64,   334,     0,    65,
   336,     0,    66,   338,     0,    67,   340,     0,    68,   308,
     0,    69,   312,     0,    70,   314,     0,    71,   317,     0,
    72,   321,     0,    73,   325,     0,    74,     0,    75,     0,
    75,     0,    76,     0,    75,     0,    76,     0,    78,     0,
    80,     0,     0,     0,   170,   173,   170,   174,   170,     0,
     0,     0,     0,   170,   176,   170,   177,   170,   178,   170,
     0,   169,     0,   170,     0,     0,     0,     0,   168,   182,
   168,   183,   168,   184,   185,    81,     0,   185,   168,     0,
     0,   168,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   169,   188,   169,   189,   169,   190,   169,   191,   169,
   192,   169,   193,   169,   194,   169,   195,   169,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   170,   197,   170,
   198,   170,   199,   170,   200,   170,   201,   170,   202,   170,
   203,   170,   204,   170,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   169,   206,   169,   207,   169,   208,   169,   209,   169,   210,
   169,   211,   169,   212,   169,   213,   169,   214,   169,   215,
   169,   216,   169,   217,   169,   218,   169,   219,   169,   220,
   169,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   170,   222,   170,
   223,   170,   224,   170,   225,   170,   226,   170,   227,   170,
   228,   170,   229,   170,   230,   170,   231,   170,   232,   170,
   233,   170,   234,   170,   235,   170,   236,   170,     0,   102,
     0,    79,     0,     0,     0,     0,   170,   239,   170,   240,
   170,   241,   170,     0,    77,     0,    80,     0,   169,     0,
     0,   169,   245,   169,     0,     0,   170,   247,   170,     0,
     0,     0,     0,   169,   249,   169,   250,   169,   251,     0,
     0,     0,     0,   170,   253,   170,   254,   170,   255,     0,
     0,     0,     0,     0,   169,   257,   169,   258,   169,   259,
   169,   260,     0,     0,     0,     0,     0,   170,   262,   170,
   263,   170,   264,   170,   265,     0,   171,     0,    83,   267,
    84,     0,   267,   171,     0,     0,   172,     0,    83,   269,
    84,     0,   269,   172,     0,     0,   175,     0,    83,   271,
    84,     0,   271,   175,     0,     0,   179,     0,    83,   273,
    84,     0,   273,   179,     0,     0,   180,     0,    83,   275,
    84,     0,   275,   180,     0,     0,   181,     0,    83,   277,
    84,     0,   277,   181,     0,     0,   186,     0,    83,   279,
    84,     0,   279,   186,     0,     0,   187,     0,    83,   281,
    84,     0,   281,   187,     0,     0,   196,     0,    83,   283,
    84,     0,   283,   196,     0,     0,   205,     0,    83,   285,
    84,     0,   285,   205,     0,     0,   221,     0,    83,   287,
    84,     0,   287,   221,     0,     0,   237,     0,    83,   289,
    84,     0,   289,   237,     0,     0,   238,     0,    83,   291,
    84,     0,   291,   238,     0,     0,   242,     0,    83,   293,
    84,     0,   293,   242,     0,     0,   243,     0,    83,   295,
    84,     0,   295,   243,     0,     0,   244,     0,    83,   297,
    84,     0,   297,   244,     0,     0,   246,     0,    83,   299,
    84,     0,   299,   246,     0,     0,   248,     0,    83,   301,
    84,     0,   301,   248,     0,     0,   252,     0,    83,   303,
    84,     0,   303,   252,     0,     0,   256,     0,    83,   305,
    84,     0,   305,   256,     0,     0,   261,     0,    83,   307,
    84,     0,   307,   261,     0,     0,     0,     0,     0,   168,
   309,   168,   310,   168,   311,   168,     0,     0,   170,   313,
   170,     0,     0,     0,   170,   315,   170,   316,   170,     0,
     0,     0,     0,   170,   318,   170,   319,   170,   320,   170,
     0,     0,     0,     0,   170,   322,   170,   323,   170,   324,
   170,     0,     0,     0,     0,     0,   170,   326,   170,   327,
   170,   328,   170,   329,   330,     0,     0,   170,   331,   170,
     0,     0,   308,     0,    83,   333,    84,     0,   333,   308,
     0,     0,   312,     0,    83,   335,    84,     0,   335,   312,
     0,     0,   314,     0,    83,   337,    84,     0,   337,   314,
     0,     0,   317,     0,    83,   339,    84,     0,   339,   317,
     0,     0,   321,     0,    83,   341,    84,     0,   341,   321,
     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   194,   201,   203,   205,   207,   209,   212,   214,   216,   222,
   230,   232,   234,   239,   241,   244,   247,   249,   251,   253,
   254,   255,   256,   258,   261,   261,   263,   265,   265,   268,
   271,   271,   273,   274,   276,   278,   280,   282,   284,   286,
   289,   292,   294,   296,   299,   300,   302,   303,   305,   306,
   308,   310,   312,   313,   315,   317,   318,   320,   322,   324,
   327,   328,   330,   331,   333,   334,   336,   338,   342,   344,
   346,   349,   353,   355,   362,   366,   373,   376,   378,   381,
   384,   386,   388,   390,   391,   392,   393,   395,   398,   399,
   401,   404,   405,   407,   409,   411,   414,   415,   417,   419,
   421,   430,   431,   432,   433,   434,   436,   438,   440,   443,
   446,   449,   452,   455,   457,   458,   459,   460,   461,   462,
   463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
   473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
   483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
   493,   494,   495,   496,   497,   499,   500,   501,   502,   503,
   504,   505,   506,   507,   508,   509,   511,   513,   514,   515,
   516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
   526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
   536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
   546,   547,   548,   549,   550,   551,   552,   553,   555,   556,
   557,   558,   559,   560,   561,   562,   563,   564,   565,   567,
   569,   571,   573,   575,   577,   579,   584,   586,   588,   590,
   595,   597,   598,   600,   605,   611,   617,   619,   621,   625,
   630,   635,   637,   643,   645,   646,   647,   648,   649,   650,
   651,   653,   661,   663,   664,   665,   666,   667,   668,   669,
   671,   679,   681,   682,   683,   684,   685,   686,   687,   688,
   689,   690,   691,   692,   693,   694,   696,   705,   707,   708,
   709,   710,   711,   712,   713,   714,   715,   716,   717,   718,
   719,   720,   722,   731,   733,   735,   737,   738,   740,   745,
   750,   755,   761,   764,   769,   772,   777,   779,   780,   781,
   786,   788,   789,   790,   795,   797,   798,   799,   800,   805,
   807,   808,   809,   810,   815,   817,   819,   821,   823,   825,
   827,   829,   831,   833,   835,   837,   839,   841,   843,   845,
   847,   849,   851,   853,   855,   857,   859,   861,   863,   865,
   867,   869,   871,   873,   875,   877,   879,   881,   883,   885,
   887,   889,   891,   893,   895,   897,   899,   901,   903,   905,
   907,   909,   911,   913,   915,   917,   919,   921,   923,   925,
   927,   929,   931,   933,   935,   937,   939,   941,   943,   945,
   947,   949,   951,   953,   955,   957,   959,   961,   963,   965,
   967,   969,   971,   973,   975,   977,   979,   981,   985,   987,
   988,   990,   996,   999,  1004,  1006,  1008,  1013,  1015,  1016,
  1018,  1023,  1025,  1026,  1028,  1033,  1035,  1036,  1038,  1043,
  1045,  1048,  1055,  1063,  1065,  1067,  1069,  1071,  1073,  1075,
  1077,  1079,  1081,  1083,  1085,  1087,  1089,  1091,  1093,  1095,
  1097,  1099,  1101
};

static const char * const yytname[] = {   "$","error","$undefined.","TOK_HEADER",
"TOK_PROFILE","TOK_COMPONENT","TOK_META","TOK_PROTO","TOK_EXTERNPROTO","TOK_IS",
"TOK_DEF","TOK_USE","TOK_ROUTE","TOK_TO","TOK_IMPORT","TOK_EXPORT","TOK_AS",
"TOK_eventIn","TOK_eventOut","TOK_exposedField","TOK_field","TOK_MFBool","TOK_MFColor",
"TOK_MFColorRGBA","TOK_MFDouble","TOK_MFFloat","TOK_MFImage","TOK_MFInt32","TOK_MFMatrix3d",
"TOK_MFMatrix3f","TOK_MFMatrix4d","TOK_MFMatrix4f","TOK_MFNode","TOK_MFRotation",
"TOK_MFString","TOK_MFTime","TOK_MFVec2d","TOK_MFVec2f","TOK_MFVec3d","TOK_MFVec3f",
"TOK_MFVec4d","TOK_MFVec4f","TOK_SFBool","TOK_SFColor","TOK_SFColorRGBA","TOK_SFDouble",
"TOK_SFFloat","TOK_SFImage","TOK_SFInt32","TOK_SFMatrix3d","TOK_SFMatrix3f",
"TOK_SFMatrix4d","TOK_SFMatrix4f","TOK_SFNode","TOK_SFRotation","TOK_SFString",
"TOK_SFTime","TOK_SFVec2d","TOK_SFVec2f","TOK_SFVec3d","TOK_SFVec3f","TOK_SFVec4d",
"TOK_SFVec4f","TOK_MFColor4i","TOK_MFPnt2f","TOK_MFPnt3f","TOK_MFPnt4f","TOK_MFPlane",
"TOK_SFColor4i","TOK_SFPnt2f","TOK_SFPnt3f","TOK_SFPnt4f","TOK_SFPlane","TOK_SFVolume",
"TOK_hex","TOK_int32","TOK_double","TOK_string","TOK_bool","TOK_NULL","TOK_Id",
"TOK_ImageFinished","TOK_Error","'['","']'","'{'","'}'","'.'","x3dScene","headerStatement",
"profileStatement","profileNameId","componentStatements","componentStatement",
"componentNameId","metaStatements","metaStatement","@1","metakey","metavalue",
"statements","statement","nodeStatement","@2","@3","@4","rootNodeStatement",
"@5","@6","@7","protoStatement","protoStatements","proto","@8","protoBody","interfaceDeclarations",
"restrictedInterfaceDeclaration","@9","@10","@11","@12","interfaceDeclaration",
"@13","@14","externproto","@15","@16","externInterfaceDeclarations","externInterfaceDeclaration",
"@17","@18","@19","@20","routeStatement","@21","@22","@23","importStatement",
"@24","@25","exportStatement","@26","asStatement","URLList","node","scriptBody",
"scriptBodyElement","eventInDeclaration","@27","@28","eventOutDeclaration","@29",
"@30","eventDeclarationEnd","fieldDeclaration","@31","@32","fieldDeclarationEnd",
"nodeBodyElement","@33","fieldEnd","nodeNameId","nodeTypeId","fieldId","eventInId",
"eventOutId","fieldType","fieldValue","int32","double","float","sfboolValue",
"sfcolorValue","@34","@35","sfcolorRGBAValue","@36","@37","@38","sfdoubleValue",
"sffloatValue","sfimageValue","@39","@40","@41","pixels","sfint32Value","sfmatrix3dValue",
"@42","@43","@44","@45","@46","@47","@48","@49","sfmatrix3fValue","@50","@51",
"@52","@53","@54","@55","@56","@57","sfmatrix4dValue","@58","@59","@60","@61",
"@62","@63","@64","@65","@66","@67","@68","@69","@70","@71","@72","sfmatrix4fValue",
"@73","@74","@75","@76","@77","@78","@79","@80","@81","@82","@83","@84","@85",
"@86","@87","sfnodeValue","sfrotationValue","@88","@89","@90","sfstringValue",
"sftimeValue","sfvec2dValue","@91","sfvec2fValue","@92","sfvec3dValue","@93",
"@94","@95","sfvec3fValue","@96","@97","@98","sfvec4dValue","@99","@100","@101",
"@102","sfvec4fValue","@103","@104","@105","@106","mfboolValue","sfboolValues",
"mfcolorValue","sfcolorValues","mfcolorRGBAValue","sfcolorRGBAValues","mfdoubleValue",
"sfdoubleValues","mffloatValue","sffloatValues","mfimageValue","sfimageValues",
"mfint32Value","sfint32Values","mfmatrix3dValue","sfmatrix3dValues","mfmatrix3fValue",
"sfmatrix3fValues","mfmatrix4dValue","sfmatrix4dValues","mfmatrix4fValue","sfmatrix4fValues",
"mfnodeValue","sfnodeValues","mfrotationValue","sfrotationValues","mfstringValue",
"sfstringValues","mftimeValue","sftimeValues","mfvec2dValue","sfvec2dValues",
"mfvec2fValue","sfvec2fValues","mfvec3dValue","sfvec3dValues","mfvec3fValue",
"sfvec3fValues","mfvec4dValue","sfvec4dValues","mfvec4fValue","sfvec4fValues",
"sfcolor4iValue","@107","@108","@109","sfpnt2fValue","@110","sfpnt3fValue","@111",
"@112","sfpnt4fValue","@113","@114","@115","sfplaneValue","@116","@117","@118",
"sfVolumeValue","@119","@120","@121","@122","sfVolumeValueEnd","@123","mfcolor4iValue",
"sfcolor4iValues","mfpnt2fValue","sfpnt2fValues","mfpnt3fValue","sfpnt3fValues",
"mfpnt4fValue","sfpnt4fValues","mfplaneValue","sfplaneValues",""
};
#endif

static const short yyr1[] = {     0,
    88,    89,    89,    90,    90,    91,    92,    92,    93,    94,
    95,    95,    97,    96,    98,    99,   100,   100,   101,   101,
   101,   101,   101,   103,   102,   104,   105,   102,   102,   107,
   106,   108,   109,   106,   110,   110,   111,   111,   113,   112,
   114,   115,   115,   117,   116,   118,   116,   119,   120,   116,
   121,   122,   123,   121,   125,   126,   124,   127,   127,   129,
   128,   130,   128,   131,   128,   132,   128,   134,   135,   136,
   133,   138,   139,   137,   141,   140,   142,   142,   143,   144,
   145,   145,   146,   146,   146,   146,   146,   148,   149,   147,
   151,   152,   150,   153,   153,   155,   156,   154,   157,   157,
   159,   158,   158,   158,   158,   158,   160,   160,   161,   162,
   163,   164,   165,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
   168,   169,   169,   170,   170,   171,   171,   173,   174,   172,
   176,   177,   178,   175,   179,   180,   182,   183,   184,   181,
   185,   185,   186,   188,   189,   190,   191,   192,   193,   194,
   195,   187,   197,   198,   199,   200,   201,   202,   203,   204,
   196,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   205,   222,   223,   224,
   225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
   235,   236,   221,   237,   237,   239,   240,   241,   238,   242,
   242,   243,   245,   244,   247,   246,   249,   250,   251,   248,
   253,   254,   255,   252,   257,   258,   259,   260,   256,   262,
   263,   264,   265,   261,   266,   266,   267,   267,   268,   268,
   269,   269,   270,   270,   271,   271,   272,   272,   273,   273,
   274,   274,   275,   275,   276,   276,   277,   277,   278,   278,
   279,   279,   280,   280,   281,   281,   282,   282,   283,   283,
   284,   284,   285,   285,   286,   286,   287,   287,   288,   288,
   289,   289,   290,   290,   291,   291,   292,   292,   293,   293,
   294,   294,   295,   295,   296,   296,   297,   297,   298,   298,
   299,   299,   300,   300,   301,   301,   302,   302,   303,   303,
   304,   304,   305,   305,   306,   306,   307,   307,   309,   310,
   311,   308,   313,   312,   315,   316,   314,   318,   319,   320,
   317,   322,   323,   324,   321,   326,   327,   328,   329,   325,
   331,   330,   330,   332,   332,   333,   333,   334,   334,   335,
   335,   336,   336,   337,   337,   338,   338,   339,   339,   340,
   340,   341,   341
};

static const short yyr2[] = {     0,
     5,     1,     0,     2,     0,     1,     2,     0,     2,     1,
     2,     0,     0,     4,     1,     1,     2,     0,     1,     1,
     1,     1,     1,     0,     3,     0,     0,     6,     2,     0,
     3,     0,     0,     6,     1,     1,     2,     0,     0,     9,
     3,     2,     0,     0,     4,     0,     4,     0,     0,     6,
     1,     0,     0,     6,     0,     0,     8,     2,     0,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     0,     0,
    11,     0,     0,     7,     0,     4,     2,     0,     1,     3,
     2,     0,     1,     1,     1,     1,     1,     0,     0,     6,
     0,     0,     6,     0,     2,     0,     0,     6,     1,     3,
     0,     3,     1,     1,     1,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     0,     0,     5,
     0,     0,     0,     7,     1,     1,     0,     0,     0,     8,
     2,     0,     1,     0,     0,     0,     0,     0,     0,     0,
     0,    17,     0,     0,     0,     0,     0,     0,     0,     0,
    17,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    31,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    31,     1,     1,     0,     0,     0,     7,     1,
     1,     1,     0,     3,     0,     3,     0,     0,     0,     6,
     0,     0,     0,     6,     0,     0,     0,     0,     8,     0,
     0,     0,     0,     8,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     0,     0,
     0,     7,     0,     3,     0,     0,     5,     0,     0,     0,
     7,     0,     0,     0,     7,     0,     0,     0,     0,     9,
     0,     3,     0,     1,     3,     2,     0,     1,     3,     2,
     0,     1,     3,     2,     0,     1,     3,     2,     0,     1,
     3,     2,     0
};

static const short yydefact[] = {     3,
     2,     5,     0,     8,     6,     4,    12,     0,     7,    18,
    10,     9,     0,    11,     1,    15,    13,     0,     0,     0,
     0,     0,     0,     0,   110,    17,    19,    20,    35,    36,
    21,    22,    23,    24,     0,    39,    55,   109,    26,    29,
    68,    72,    75,     0,    16,    14,     0,     0,     0,     0,
     0,    78,    82,    25,    43,    59,    27,     0,     0,     0,
    76,     0,     0,     0,     0,   113,    69,    73,    77,    87,
     0,     0,     0,   111,    80,   104,   103,   105,   106,    81,
    84,    85,    86,    83,   101,     0,     0,     0,     0,     0,
    51,    42,     0,     0,     0,     0,    56,    58,    28,     0,
    78,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,    88,    91,    96,     0,    44,    46,
    52,    48,    38,    60,    62,    66,    64,     0,     0,    74,
     0,     0,     0,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   102,     0,   107,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   300,
   301,   380,    57,   377,    79,    70,   112,    89,    92,    97,
   226,   227,   328,   325,   167,   224,   225,   332,   228,   329,
   168,   336,   231,   333,   169,   222,   223,   340,   235,   337,
   170,   344,   236,   341,   171,   220,   221,   348,   237,   345,
   172,   352,   243,   349,   173,   356,   244,   353,   174,   360,
   253,   357,   175,   364,   262,   361,   176,   368,   278,   365,
   177,   295,   372,   294,   369,   178,   376,   296,   373,   179,
   180,   384,   302,   381,   181,   388,   303,   385,   182,   392,
   305,   389,   183,   396,   307,   393,   184,   400,   311,   397,
   185,   404,   315,   401,   186,   408,   320,   405,   187,   188,
   189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
   199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
   437,   409,   434,   209,   441,   413,   438,   210,   445,   415,
   442,   211,   449,   418,   446,   212,   453,   422,   450,   213,
   214,   215,   216,   217,   218,   426,   219,     0,    45,    47,
    53,    49,     0,    18,    37,    30,    40,    61,    63,    67,
    65,     0,     0,    94,    94,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   108,     0,     0,    32,    41,     0,   378,   379,     0,
     0,    90,    93,    98,     0,    99,   326,   327,   330,   331,
   229,   334,   335,   232,   338,   339,   342,   343,   346,   347,
   238,   350,   351,   354,   355,   245,   358,   359,   254,   362,
   363,   263,   366,   367,   279,   370,   371,   374,   375,   297,
   382,   383,   386,   387,   304,   390,   391,   306,   394,   395,
   308,   398,   399,   312,   402,   403,   316,   406,   407,   321,
   435,   436,   410,   439,   440,   414,   443,   444,   416,   447,
   448,   419,   451,   452,   423,   427,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    50,     0,    31,    71,    95,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    33,   100,   230,   233,   239,   246,   255,
   264,   280,   298,   309,   313,   317,   322,   411,   417,   420,
   424,   428,     0,     0,   242,     0,     0,     0,     0,     0,
   310,   314,     0,     0,     0,     0,     0,     0,    34,   234,
     0,   247,   256,   265,   281,   299,   318,   323,   412,   421,
   425,   429,   240,   241,     0,     0,     0,     0,   319,   324,
   433,   248,   257,   266,   282,   431,   430,     0,     0,     0,
     0,     0,   249,   258,   267,   283,   432,     0,     0,     0,
     0,   250,   259,   268,   284,     0,     0,     0,     0,   251,
   260,   269,   285,     0,     0,     0,     0,   252,   261,   270,
   286,     0,     0,   271,   287,     0,     0,   272,   288,     0,
     0,   273,   289,     0,     0,   274,   290,     0,     0,   275,
   291,     0,     0,   276,   292,     0,     0,   277,   293,     0,
     0,     0
};

static const short yydefgoto[] = {   740,
     2,     4,     6,     7,     9,    12,    10,    14,    35,    17,
    46,    15,    26,   304,    44,    49,    65,   394,   457,   592,
   633,    28,   234,    29,    47,   235,    63,    91,   230,   231,
   233,   454,    92,   232,   453,    30,    48,   168,    64,    98,
   236,   237,   239,   238,    31,    50,   100,   403,    32,    51,
   101,    33,    52,    61,   243,    54,    62,    80,    81,   171,
   404,    82,   172,   405,   462,    83,   173,   406,   464,    84,
   158,   227,    39,    34,    85,   248,    67,   155,   229,   279,
   269,   259,   254,   260,   409,   597,   264,   411,   598,   634,
   270,   274,   280,   415,   599,   635,   651,   284,   288,   418,
   600,   636,   665,   678,   688,   696,   704,   292,   420,   601,
   637,   666,   679,   689,   697,   705,   296,   422,   602,   638,
   667,   680,   690,   698,   706,   712,   716,   720,   724,   728,
   732,   736,   300,   424,   603,   639,   668,   681,   691,   699,
   707,   713,   717,   721,   725,   729,   733,   737,   305,   309,
   427,   604,   640,   244,   314,   318,   430,   322,   432,   326,
   434,   605,   641,   330,   436,   606,   642,   334,   438,   607,
   643,   669,   338,   440,   608,   644,   670,   255,   407,   261,
   408,   265,   410,   271,   412,   275,   413,   281,   414,   285,
   416,   289,   417,   293,   419,   297,   421,   301,   423,   306,
   425,   310,   426,   311,   402,   315,   428,   319,   429,   323,
   431,   327,   433,   331,   435,   335,   437,   339,   439,   363,
   442,   609,   645,   367,   444,   371,   446,   610,   375,   448,
   611,   646,   379,   450,   612,   647,   387,   451,   613,   648,
   671,   677,   682,   364,   441,   368,   443,   372,   445,   376,
   447,   380,   449
};

static const short yypact[] = {    32,
-32768,    35,   -32,-32768,-32768,-32768,    71,     0,-32768,    83,
-32768,-32768,    34,-32768,   118,-32768,-32768,    40,    40,    51,
    51,    51,    51,    51,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    65,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    67,-32768,-32768,    84,    92,    40,    75,
   127,   165,-32768,-32768,-32768,-32768,-32768,   105,    51,    51,
-32768,    90,   117,   128,    67,-32768,-32768,-32768,-32768,-32768,
   554,   554,   554,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   554,   554,   554,   554,   137,
-32768,-32768,   554,   554,   554,   554,-32768,-32768,-32768,   216,
   165,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   837,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    26,    51,-32768,
   146,   105,   161,   375,    -1,   149,   225,   246,    44,    94,
   268,   277,   279,   281,    61,   371,    26,   373,   376,   393,
   403,   405,   407,   409,    81,   193,   193,   209,   193,   343,
   343,   209,   193,   209,   193,    85,   193,   116,   209,   209,
   193,   209,   193,   209,   193,    97,   421,   424,   427,   436,
   343,   193,   193,   193,   193,   193,-32768,   235,-32768,   146,
   105,   161,   161,    78,   163,   146,   105,   161,   161,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   161,-32768,-32768,
-32768,-32768,    51,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   437,   173,   270,   270,   837,   -17,    98,   193,   103,
   193,   108,   113,    76,   343,    79,   115,   209,   119,   193,
   129,   209,   131,   193,    59,   133,   193,   135,   181,   209,
   207,   193,   213,   209,   223,   193,   240,   209,   242,   193,
    82,   343,   252,   193,   262,   193,   264,   193,   266,   193,
   193,-32768,   890,   890,-32768,   118,    67,-32768,-32768,   146,
   161,-32768,-32768,-32768,   286,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   375,    -1,   149,   225,
   246,    44,    94,   268,   277,   279,   281,    61,   371,    26,
   373,   376,   393,   403,   405,   407,   409,    81,   193,   193,
   209,   193,   343,   343,   209,   193,   209,   193,    85,   193,
   116,   209,   209,   193,   209,   193,   209,   193,    97,   421,
   424,   427,   436,   343,   193,   193,   193,   193,   193,-32768,
-32768,    40,-32768,-32768,-32768,   161,   193,   193,   343,   209,
   193,   209,   193,   193,   209,   193,   209,   193,   343,   193,
   193,   193,   193,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    67,   193,-32768,   209,   193,   209,   193,   193,
-32768,-32768,   209,   193,   343,   193,   193,   193,-32768,-32768,
   284,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   209,   193,   209,   193,-32768,-32768,
   193,-32768,-32768,-32768,-32768,-32768,-32768,   209,   193,   209,
   193,   193,-32768,-32768,-32768,-32768,-32768,   209,   193,   209,
   193,-32768,-32768,-32768,-32768,   209,   193,   209,   193,-32768,
-32768,-32768,-32768,   209,   193,   209,   193,-32768,-32768,-32768,
-32768,   209,   193,-32768,-32768,   209,   193,-32768,-32768,   209,
   193,-32768,-32768,   209,   193,-32768,-32768,   209,   193,-32768,
-32768,   209,   193,-32768,-32768,   209,   193,-32768,-32768,   305,
   313,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -108,-32768,   -11,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -34,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   272,-32768,-32768,-32768,   283,-32768,
-32768,   285,-32768,   231,-32768,   -63,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -56,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    33,   -18,  -155,  -168,   -82,    28,  -341,  -122,
   121,  -173,  -189,  -188,-32768,-32768,  -187,-32768,-32768,-32768,
  -191,  -185,  -184,-32768,-32768,-32768,-32768,  -181,  -190,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -180,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -179,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -177,  -192,
-32768,-32768,-32768,  -171,  -176,  -174,-32768,  -170,-32768,  -169,
-32768,-32768,-32768,  -154,-32768,-32768,-32768,  -150,-32768,-32768,
-32768,-32768,  -149,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   195,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -161,
-32768,-32768,-32768,  -200,-32768,  -142,-32768,-32768,  -151,-32768,
-32768,-32768,  -138,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768
};


#define	YYLAST		963


static const short yytable[] = {    36,
    37,    99,   263,    27,   273,   340,   343,   341,   291,   342,
   299,   347,   308,   344,   352,   345,   321,   250,   329,   346,
   337,   382,   348,   263,   349,   273,   350,    76,   351,   291,
    57,   299,   354,   308,     1,   355,   353,   321,     3,   329,
   356,   337,   357,   366,   370,   374,   378,     5,   366,   370,
   374,   378,   386,    40,    41,    42,    43,   283,   358,   381,
   251,   389,   252,   359,   466,   360,   467,   398,    20,    21,
    20,    21,   384,   256,   257,     8,   391,   392,   283,    11,
   383,   258,   400,   401,    18,    19,   385,   393,    13,   249,
    70,    68,    69,   362,    20,    21,    18,    19,   362,   156,
   157,    22,   240,    23,    24,   241,    71,    72,   242,    73,
    16,   590,   591,   159,   160,   161,   162,   276,   277,    25,
   164,   165,   166,   167,    18,    19,   278,    20,    21,    22,
    38,    23,    24,    86,    87,    88,    89,   302,    25,   302,
    25,    45,   496,   303,    93,    94,    95,    96,   390,   276,
   277,    53,   276,   277,   399,   276,   277,    25,   251,   479,
   252,    58,   482,   302,    25,   521,    55,   276,   277,    74,
   276,   277,   256,   257,    56,    75,   282,   256,   257,   361,
    60,   469,   266,   267,    66,   228,   472,   256,   257,   266,
   267,   475,   240,   256,   257,   241,   477,    25,   484,   395,
    90,   246,   487,   266,   267,   256,   257,   256,   257,   266,
   267,    97,   490,    59,   493,   396,   498,   468,   501,   470,
   476,   163,   473,   256,   257,   247,   485,   478,   169,   480,
   459,   262,   452,   499,   483,   471,   263,   474,   488,   273,
    74,   491,   525,   388,   494,   291,   489,   497,   397,   299,
   495,   502,   308,   500,   504,   266,   267,   321,   508,   460,
   507,   329,   514,   510,   503,   337,   520,   256,   257,   366,
   526,   370,   529,   374,   532,   378,   535,   536,   461,   522,
   513,   256,   257,   266,   267,   456,   516,   266,   267,   519,
   506,   594,   481,   283,   596,   531,   509,   256,   257,   266,
   267,   287,   528,   295,   741,   595,   512,   268,   313,   317,
   534,   325,   742,   333,   266,   267,   256,   257,   362,   523,
   256,   257,   287,   515,   295,   518,   256,   257,   272,   313,
   317,   170,   325,    77,   333,   524,   256,   257,   256,   257,
   256,   257,   266,   267,    78,   527,    79,   530,   463,   533,
   286,   256,   257,   266,   267,   256,   257,   276,   277,   290,
     0,   294,   245,   298,   663,   263,     0,   273,   340,   343,
   341,   291,   342,   299,   347,   308,   344,   352,   345,   321,
     0,   329,   346,   337,   382,   348,   263,   349,   273,   350,
     0,   351,   291,   593,   299,   354,   308,     0,   355,   353,
   321,     0,   329,   356,   337,   357,   366,   370,   374,   378,
     0,   366,   370,   374,   378,   386,   276,   277,     0,     0,
   283,   358,   381,   616,   617,   455,   359,   620,   360,   622,
   623,     0,   625,   465,   627,   384,   629,   630,   631,   632,
   615,   283,     0,   383,    27,   256,   257,   266,   267,   385,
   266,   267,   251,   307,   252,   312,   362,   253,   316,     0,
   650,   362,     0,   653,     0,   655,   656,   256,   257,     0,
   658,     0,   660,   661,   662,   320,   618,   266,   267,   256,
   257,   266,   267,   256,   257,   324,   628,   328,     0,   332,
     0,   336,   673,     0,   675,   256,   257,   676,   256,   257,
     0,   256,   257,   365,     0,   684,   369,   686,   687,   373,
   256,   257,     0,   240,     0,   693,   241,   695,   377,     0,
   458,     0,   659,   701,     0,   703,     0,     0,   664,     0,
     0,   709,     0,   711,     0,     0,     0,   287,   486,   715,
     0,   295,   492,   719,     0,     0,     0,   723,   313,   317,
   505,   727,     0,   325,   511,   731,     0,   333,   517,   735,
     0,     0,     0,   739,     0,     0,     0,     0,     0,   649,
     0,     0,     0,   614,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   287,     0,   295,     0,     0,     0,
     0,   313,   317,     0,   325,     0,   333,     0,     0,     0,
     0,     0,     0,     0,     0,   287,     0,   295,     0,     0,
     0,     0,   313,   317,     0,   325,     0,   333,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   619,     0,   621,     0,     0,   624,     0,   626,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   652,     0,   654,     0,
     0,     0,     0,   657,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   672,     0,   674,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   683,     0,
   685,     0,     0,     0,     0,     0,     0,     0,   692,     0,
   694,     0,     0,     0,     0,     0,   700,     0,   702,     0,
     0,     0,     0,     0,   708,     0,   710,     0,     0,     0,
     0,     0,   714,     0,     0,     0,   718,     0,     0,     0,
   722,     0,     0,     0,   726,     0,     0,     0,   730,     0,
     0,     0,   734,     0,     0,     0,   738,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
   197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
   547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
   557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
   567,   568,   569,   570,   571,   572,   573,   574,   575,   576,
   577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
   587,   588,   589
};

static const short yycheck[] = {    18,
    19,    65,   176,    15,   178,   195,   198,   196,   182,   197,
   184,   202,   186,   199,   207,   200,   190,   173,   192,   201,
   194,   222,   203,   197,   204,   199,   205,    62,   206,   203,
    49,   205,   209,   207,     3,   210,   208,   211,     4,   213,
   211,   215,   212,   217,   218,   219,   220,    80,   222,   223,
   224,   225,   226,    21,    22,    23,    24,   180,   213,   221,
    78,   230,    80,   214,   406,   215,    84,   236,    10,    11,
    10,    11,   224,    75,    76,     5,   232,   233,   201,    80,
   223,    83,   238,   239,     7,     8,   225,    10,     6,   172,
     1,    59,    60,   216,    10,    11,     7,     8,   221,    72,
    73,    12,    77,    14,    15,    80,    17,    18,    83,    20,
    77,   453,   454,    86,    87,    88,    89,    74,    75,    80,
    93,    94,    95,    96,     7,     8,    83,    10,    11,    12,
    80,    14,    15,    17,    18,    19,    20,    79,    80,    79,
    80,    77,    84,    83,    17,    18,    19,    20,   231,    74,
    75,    85,    74,    75,   237,    74,    75,    80,    78,    84,
    80,    87,    84,    79,    80,    84,    83,    74,    75,    80,
    74,    75,    75,    76,    83,    86,    83,    75,    76,    83,
    16,    84,    75,    76,    80,   158,    84,    75,    76,    75,
    76,    84,    77,    75,    76,    80,    84,    80,    84,   234,
    84,   169,    84,    75,    76,    75,    76,    75,    76,    75,
    76,    84,    84,    87,    84,   234,    84,   407,    84,   408,
   412,    85,   410,    75,    76,    80,   417,   413,    13,   414,
   402,    83,   388,   426,   416,   409,   410,   411,   419,   413,
    80,   421,   443,     9,   423,   419,   420,   425,    86,   423,
   424,   428,   426,   427,   429,    75,    76,   431,   432,    87,
   431,   435,   436,   433,    84,   439,   440,    75,    76,   443,
   444,   445,   446,   447,   448,   449,   450,   451,     9,   441,
   435,    75,    76,    75,    76,   394,   437,    75,    76,   439,
    84,   460,   415,   416,     9,   447,    84,    75,    76,    75,
    76,   181,   445,   183,     0,   461,    84,    83,   188,   189,
   449,   191,     0,   193,    75,    76,    75,    76,   441,   442,
    75,    76,   202,    84,   204,    84,    75,    76,    83,   209,
   210,   101,   212,    62,   214,    84,    75,    76,    75,    76,
    75,    76,    75,    76,    62,    84,    62,    84,   405,    84,
    83,    75,    76,    75,    76,    75,    76,    74,    75,    83,
    -1,    83,   168,    83,    81,   539,    -1,   541,   558,   561,
   559,   545,   560,   547,   565,   549,   562,   570,   563,   553,
    -1,   555,   564,   557,   585,   566,   560,   567,   562,   568,
    -1,   569,   566,   457,   568,   572,   570,    -1,   573,   571,
   574,    -1,   576,   574,   578,   575,   580,   581,   582,   583,
    -1,   585,   586,   587,   588,   589,    74,    75,    -1,    -1,
   543,   576,   584,   597,   598,   393,   577,   601,   578,   603,
   604,    -1,   606,   406,   608,   587,   610,   611,   612,   613,
   596,   564,    -1,   586,   456,    75,    76,    75,    76,   588,
    75,    76,    78,    83,    80,    83,   579,    83,    83,    -1,
   634,   584,    -1,   637,    -1,   639,   640,    75,    76,    -1,
   644,    -1,   646,   647,   648,    83,   599,    75,    76,    75,
    76,    75,    76,    75,    76,    83,   609,    83,    -1,    83,
    -1,    83,   666,    -1,   668,    75,    76,   671,    75,    76,
    -1,    75,    76,    83,    -1,   679,    83,   681,   682,    83,
    75,    76,    -1,    77,    -1,   689,    80,   691,    83,    -1,
    84,    -1,   645,   697,    -1,   699,    -1,    -1,   651,    -1,
    -1,   705,    -1,   707,    -1,    -1,    -1,   417,   418,   713,
    -1,   421,   422,   717,    -1,    -1,    -1,   721,   428,   429,
   430,   725,    -1,   433,   434,   729,    -1,   437,   438,   733,
    -1,    -1,    -1,   737,    -1,    -1,    -1,    -1,    -1,   633,
    -1,    -1,    -1,   592,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   544,    -1,   546,    -1,    -1,    -1,
    -1,   551,   552,    -1,   554,    -1,   556,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   565,    -1,   567,    -1,    -1,
    -1,    -1,   572,   573,    -1,   575,    -1,   577,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   600,    -1,   602,    -1,    -1,   605,    -1,   607,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   636,    -1,   638,    -1,
    -1,    -1,    -1,   643,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   665,    -1,   667,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   678,    -1,
   680,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   688,    -1,
   690,    -1,    -1,    -1,    -1,    -1,   696,    -1,   698,    -1,
    -1,    -1,    -1,    -1,   704,    -1,   706,    -1,    -1,    -1,
    -1,    -1,   712,    -1,    -1,    -1,   716,    -1,    -1,    -1,
   720,    -1,    -1,    -1,   724,    -1,    -1,    -1,   728,    -1,
    -1,    -1,   732,    -1,    -1,    -1,   736,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 202 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->verifyHeader(yyvsp[0].stringVal); ;
    break;}
case 4:
#line 206 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->profileElement(yyvsp[0].stringVal); ;
    break;}
case 9:
#line 220 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->componentElement(yyvsp[0].stringVal); ;
    break;}
case 13:
#line 237 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 14:
#line 239 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->metaElement(SKEL->_tmpString1.c_str(), yyvsp[0].stringVal); ;
    break;}
case 24:
#line 259 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, 0); ;
    break;}
case 26:
#line 262 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 27:
#line 263 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, SKEL->_tmpString1.c_str()); ;
    break;}
case 29:
#line 266 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->use(yyvsp[0].stringVal); ;
    break;}
case 30:
#line 269 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, 0); ;
    break;}
case 32:
#line 272 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 33:
#line 273 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, SKEL->_tmpString1.c_str()); ;
    break;}
case 39:
#line 285 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginProto(yyvsp[0].stringVal); ;
    break;}
case 40:
#line 287 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endProto(); ;
    break;}
case 44:
#line 298 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 45:
#line 299 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->endEventDecl(); ;
    break;}
case 46:
#line 301 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 47:
#line 302 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->endEventDecl(); ;
    break;}
case 48:
#line 304 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 49:
#line 305 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 50:
#line 306 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endFieldDecl(); ;
    break;}
case 52:
#line 311 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 53:
#line 312 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginExposedFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 54:
#line 313 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExposedFieldDecl(); ;
    break;}
case 55:
#line 316 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginExternProto(yyvsp[0].stringVal); ;
    break;}
case 56:
#line 317 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExternProtoInterface(); ;
    break;}
case 57:
#line 318 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExternProto(); ;
    break;}
case 60:
#line 326 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 61:
#line 327 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 62:
#line 329 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 63:
#line 330 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 64:
#line 332 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 65:
#line 333 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 66:
#line 335 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 67:
#line 336 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternExposedFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 68:
#line 340 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 69:
#line 342 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString2 = yyvsp[0].stringVal; ;
    break;}
case 70:
#line 344 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString3 = yyvsp[0].stringVal; ;
    break;}
case 71:
#line 347 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addRoute(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), SKEL->_tmpString3.c_str(), yyvsp[0].stringVal); ;
    break;}
case 72:
#line 351 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 73:
#line 353 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString2 = yyvsp[0].stringVal; ;
    break;}
case 74:
#line 355 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ 
        if (yyvsp[0].stringVal != 0)
            SKEL->importElement(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), yyvsp[0].stringVal);
        else
            SKEL->importElement(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), 0);
    ;
    break;}
case 75:
#line 364 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 76:
#line 366 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ 
        if (yyvsp[0].stringVal != 0)
            SKEL->exportElement(SKEL->_tmpString1.c_str(), yyvsp[0].stringVal);
        else
            SKEL->exportElement(SKEL->_tmpString1.c_str(), 0);
    ;
    break;}
case 77:
#line 375 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.stringVal = yyvsp[0].stringVal; ;
    break;}
case 78:
#line 376 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.stringVal = 0; ;
    break;}
case 80:
#line 382 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endNode(); ;
    break;}
case 88:
#line 397 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 89:
#line 398 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 90:
#line 399 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endEventDecl(); ;
    break;}
case 91:
#line 403 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 92:
#line 404 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 93:
#line 405 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endEventDecl(); ;
    break;}
case 95:
#line 409 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 96:
#line 413 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 97:
#line 414 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 98:
#line 415 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endFieldDecl(); ;
    break;}
case 100:
#line 419 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 101:
#line 423 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        Int32 iFieldTypeId = SKEL->getFieldType(yyvsp[0].stringVal);
        if (SKEL->getMapFieldTypes() == true)
            iFieldTypeId = SKEL->mapExtIntFieldType(yyvsp[0].stringVal, iFieldTypeId);
        SKEL->getLexer()->expectType(iFieldTypeId);
        SKEL->beginField(yyvsp[0].stringVal, iFieldTypeId);
    ;
    break;}
case 102:
#line 430 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endField(); ;
    break;}
case 108:
#line 438 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 220:
#line 568 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.intVal = yyvsp[0].intVal; ;
    break;}
case 221:
#line 569 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.intVal = yyvsp[0].intVal; ;
    break;}
case 222:
#line 572 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.doubleVal = yyvsp[0].intVal; ;
    break;}
case 223:
#line 573 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.doubleVal = yyvsp[0].doubleVal; ;
    break;}
case 224:
#line 576 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.floatVal = static_cast<float>(yyvsp[0].intVal); ;
    break;}
case 225:
#line 577 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.floatVal = static_cast<float>(yyvsp[0].doubleVal); ;
    break;}
case 226:
#line 581 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addBoolValue(yyvsp[0].boolVal);
    ;
    break;}
case 227:
#line 584 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addFieldValue(yyvsp[0].stringVal); ;
    break;}
case 228:
#line 587 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 229:
#line 588 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 230:
#line 590 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColorValue(Color3f(yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 231:
#line 596 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 232:
#line 597 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 233:
#line 598 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 234:
#line 600 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColorRGBAValue(Color4f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 235:
#line 607 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addDoubleValue(yyvsp[0].doubleVal);
    ;
    break;}
case 236:
#line 613 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addFloatValue(yyvsp[0].floatVal);
    ;
    break;}
case 237:
#line 618 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 238:
#line 619 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 239:
#line 621 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->beginImage(yyvsp[-4].intVal, yyvsp[-2].intVal, yyvsp[0].intVal);
    ;
    break;}
case 240:
#line 626 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->endImage();
    ;
    break;}
case 241:
#line 632 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addImagePixel(yyvsp[0].intVal);
    ;
    break;}
case 243:
#line 639 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addInt32Value(yyvsp[0].intVal);
    ;
    break;}
case 244:
#line 644 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 245:
#line 645 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 246:
#line 646 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 247:
#line 647 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 248:
#line 648 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 249:
#line 649 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 250:
#line 650 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 251:
#line 651 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 252:
#line 653 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix3dValue(
             yyvsp[-16].doubleVal,  yyvsp[-14].doubleVal,  yyvsp[-12].doubleVal,
             yyvsp[-10].doubleVal,  yyvsp[-8].doubleVal, yyvsp[-6].doubleVal,
            yyvsp[-4].doubleVal, yyvsp[-2].doubleVal, yyvsp[0].doubleVal);
    ;
    break;}
case 253:
#line 662 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 254:
#line 663 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 255:
#line 664 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 256:
#line 665 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 257:
#line 666 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 258:
#line 667 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 259:
#line 668 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 260:
#line 669 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 261:
#line 671 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix3fValue(
             yyvsp[-16].floatVal,  yyvsp[-14].floatVal,  yyvsp[-12].floatVal,
             yyvsp[-10].floatVal,  yyvsp[-8].floatVal, yyvsp[-6].floatVal,
            yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal);
    ;
    break;}
case 262:
#line 680 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 263:
#line 681 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 264:
#line 682 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 265:
#line 683 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 266:
#line 684 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 267:
#line 685 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 268:
#line 686 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 269:
#line 687 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 270:
#line 688 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 271:
#line 689 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 272:
#line 690 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 273:
#line 691 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 274:
#line 692 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 275:
#line 693 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 276:
#line 694 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 277:
#line 696 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix4dValue(Matrix4d(
             yyvsp[-30].doubleVal,  yyvsp[-28].doubleVal,  yyvsp[-26].doubleVal,  yyvsp[-24].doubleVal,
             yyvsp[-22].doubleVal, yyvsp[-20].doubleVal, yyvsp[-18].doubleVal, yyvsp[-16].doubleVal,
            yyvsp[-14].doubleVal, yyvsp[-12].doubleVal, yyvsp[-10].doubleVal, yyvsp[-8].doubleVal,
            yyvsp[-6].doubleVal, yyvsp[-4].doubleVal, yyvsp[-2].doubleVal, yyvsp[0].doubleVal));
    ;
    break;}
case 278:
#line 706 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 279:
#line 707 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 280:
#line 708 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 281:
#line 709 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 282:
#line 710 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 283:
#line 711 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 284:
#line 712 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 285:
#line 713 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 286:
#line 714 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 287:
#line 715 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 288:
#line 716 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 289:
#line 717 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 290:
#line 718 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 291:
#line 719 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 292:
#line 720 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 293:
#line 722 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix4fValue(Matrix4f(
             yyvsp[-30].floatVal,  yyvsp[-28].floatVal,  yyvsp[-26].floatVal,  yyvsp[-24].floatVal,
             yyvsp[-22].floatVal, yyvsp[-20].floatVal, yyvsp[-18].floatVal, yyvsp[-16].floatVal,
            yyvsp[-14].floatVal, yyvsp[-12].floatVal, yyvsp[-10].floatVal, yyvsp[-8].floatVal,
            yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 296:
#line 736 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 297:
#line 737 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 298:
#line 738 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 299:
#line 740 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addRotationValue(Vec3f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal), yyvsp[0].floatVal);
    ;
    break;}
case 300:
#line 747 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addStringValue(yyvsp[0].stringVal);
    ;
    break;}
case 301:
#line 751 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ /* Not VRML conformant */
        SKEL->addStringValue(yyvsp[0].stringVal);
    ;
    break;}
case 302:
#line 757 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addTimeValue(yyvsp[0].doubleVal);
    ;
    break;}
case 303:
#line 762 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 304:
#line 764 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec2dValue(Vec2d(yyvsp[-2].doubleVal, yyvsp[0].doubleVal));
    ;
    break;}
case 305:
#line 770 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 306:
#line 772 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec2fValue(Vec2f(yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 307:
#line 778 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 308:
#line 779 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 309:
#line 780 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 310:
#line 781 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec3dValue(Vec3d(yyvsp[-5].doubleVal, yyvsp[-3].doubleVal, yyvsp[-1].doubleVal));
    ;
    break;}
case 311:
#line 787 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 312:
#line 788 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 313:
#line 789 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 314:
#line 790 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec3fValue(Vec3f(yyvsp[-5].floatVal, yyvsp[-3].floatVal, yyvsp[-1].floatVal));
    ;
    break;}
case 315:
#line 796 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 316:
#line 797 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 317:
#line 798 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 318:
#line 799 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 319:
#line 800 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec4dValue(Vec4d(yyvsp[-7].doubleVal, yyvsp[-5].doubleVal, yyvsp[-3].doubleVal, yyvsp[-1].doubleVal));
    ;
    break;}
case 320:
#line 806 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 321:
#line 807 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 322:
#line 808 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 323:
#line 809 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 324:
#line 810 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec4fValue(Vec4f(yyvsp[-7].floatVal, yyvsp[-5].floatVal, yyvsp[-3].floatVal, yyvsp[-1].floatVal));
    ;
    break;}
case 409:
#line 986 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 410:
#line 987 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 411:
#line 988 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 412:
#line 990 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColor4iValue(Color4ub(static_cast<UInt8>(yyvsp[-6].intVal), static_cast<UInt8>(yyvsp[-4].intVal),
                                       static_cast<UInt8>(yyvsp[-2].intVal), static_cast<UInt8>(yyvsp[0].intVal)));
    ;
    break;}
case 413:
#line 997 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 414:
#line 999 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt2fValue(Pnt2f(yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 415:
#line 1005 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 416:
#line 1006 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 417:
#line 1008 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt3fValue(Pnt3f(yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 418:
#line 1014 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 419:
#line 1015 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 420:
#line 1016 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 421:
#line 1018 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt4fValue(Pnt4f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 422:
#line 1024 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 423:
#line 1025 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 424:
#line 1026 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 425:
#line 1028 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPlaneValue(Plane(Vec3f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal), yyvsp[0].floatVal));
    ;
    break;}
case 426:
#line 1034 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 427:
#line 1035 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 428:
#line 1036 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 429:
#line 1038 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->_tmpFloat1 = yyvsp[-6].floatVal; SKEL->_tmpFloat2 = yyvsp[-4].floatVal;
        SKEL->_tmpFloat3 = yyvsp[-2].floatVal; SKEL->_tmpFloat4 = yyvsp[0].floatVal;
    ;
    break;}
case 431:
#line 1046 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 432:
#line 1048 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        DynamicVolume dv(DynamicVolume::BOX_VOLUME);
        BoxVolume &bv = dynamic_cast<BoxVolume&>(dv.getInstance());
        bv.setBounds(SKEL->_tmpFloat1, SKEL->_tmpFloat2, SKEL->_tmpFloat3, SKEL->_tmpFloat4, yyvsp[-2].floatVal, yyvsp[0].floatVal);
        SKEL->addVolumeValue(dv);
    ;
    break;}
case 433:
#line 1056 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        DynamicVolume dv(DynamicVolume::SPHERE_VOLUME);
        SphereVolume &sv = dynamic_cast<SphereVolume&>(dv.getInstance());
        sv.setValue(Pnt3f(SKEL->_tmpFloat1, SKEL->_tmpFloat2, SKEL->_tmpFloat3), SKEL->_tmpFloat4);
        SKEL->addVolumeValue(dv);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1103 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"


int OSGScanParseSkel_lex(YYSTYPE *lvalp, void *pSkel)
{
    return SKEL->lex(lvalp);
}
