
/*  A Bison parser, made from ../../../source/system/fileio/scanparseskel/osgscanparseskel.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse OSGScanParseSkel_parse
#define yylex OSGScanParseSkel_lex
#define yyerror OSGScanParseSkel_error
#define yylval OSGScanParseSkel_lval
#define yychar OSGScanParseSkel_char
#define yydebug OSGScanParseSkel_debug
#define yynerrs OSGScanParseSkel_nerrs
#define	TOK_HEADER	258
#define	TOK_PROFILE	259
#define	TOK_COMPONENT	260
#define	TOK_META	261
#define	TOK_PROTO	262
#define	TOK_EXTERNPROTO	263
#define	TOK_IS	264
#define	TOK_DEF	265
#define	TOK_USE	266
#define	TOK_ROUTE	267
#define	TOK_TO	268
#define	TOK_IMPORT	269
#define	TOK_EXPORT	270
#define	TOK_AS	271
#define	TOK_eventIn	272
#define	TOK_eventOut	273
#define	TOK_exposedField	274
#define	TOK_field	275
#define	TOK_MFBool	276
#define	TOK_MFColor	277
#define	TOK_MFColorRGBA	278
#define	TOK_MFDouble	279
#define	TOK_MFFloat	280
#define	TOK_MFImage	281
#define	TOK_MFInt32	282
#define	TOK_MFMatrix3d	283
#define	TOK_MFMatrix3f	284
#define	TOK_MFMatrix4d	285
#define	TOK_MFMatrix4f	286
#define	TOK_MFNode	287
#define	TOK_MFRotation	288
#define	TOK_MFString	289
#define	TOK_MFTime	290
#define	TOK_MFVec2d	291
#define	TOK_MFVec2f	292
#define	TOK_MFVec3d	293
#define	TOK_MFVec3f	294
#define	TOK_MFVec4d	295
#define	TOK_MFVec4f	296
#define	TOK_SFBool	297
#define	TOK_SFColor	298
#define	TOK_SFColorRGBA	299
#define	TOK_SFDouble	300
#define	TOK_SFFloat	301
#define	TOK_SFImage	302
#define	TOK_SFInt32	303
#define	TOK_SFMatrix3d	304
#define	TOK_SFMatrix3f	305
#define	TOK_SFMatrix4d	306
#define	TOK_SFMatrix4f	307
#define	TOK_SFNode	308
#define	TOK_SFRotation	309
#define	TOK_SFString	310
#define	TOK_SFTime	311
#define	TOK_SFVec2d	312
#define	TOK_SFVec2f	313
#define	TOK_SFVec3d	314
#define	TOK_SFVec3f	315
#define	TOK_SFVec4d	316
#define	TOK_SFVec4f	317
#define	TOK_MFColor4i	318
#define	TOK_MFPnt2f	319
#define	TOK_MFPnt3f	320
#define	TOK_MFPnt4f	321
#define	TOK_MFPlane	322
#define	TOK_SFColor4i	323
#define	TOK_SFPnt2f	324
#define	TOK_SFPnt3f	325
#define	TOK_SFPnt4f	326
#define	TOK_SFPlane	327
#define	TOK_SFVolume	328
#define	TOK_hex	329
#define	TOK_int32	330
#define	TOK_double	331
#define	TOK_string	332
#define	TOK_bool	333
#define	TOK_NULL	334
#define	TOK_Id	335
#define	TOK_ImageFinished	336
#define	TOK_Error	337


#line 41 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
typedef union {
    long intVal;
    double doubleVal;
    float floatVal;
    const char *stringVal;
    bool boolVal;
} YYSTYPE;
#line 49 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"


#define YYPARSE_PARAM pSkel
#define YYLEX_PARAM   pSkel

#define OSGScanParseSkel_error SKEL->handleError

#include <OSGConfig.h>
#include <OSGBaseFunctions.h>
#include "OSGScanParseLexer.h"
#include "OSGScanParseSkel.h"
#include <iostream>

#if defined(OSG_LINUX_ICC) || defined(OSG_WIN32_ICL)
#pragma warning( disable : 193 810 177 )
#endif

OSG_USING_NAMESPACE

int OSGScanParseSkel_lex(YYSTYPE *lvalp, void *);

#define SKEL ((ScanParseSkel *) pSkel)

#if(!defined(__GNUC__) && defined(__ICL) && __INTEL_COMPILER_VERSION >= 900)
# define alloca(size)   __builtin_alloca (size)
#endif


#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		736
#define	YYFLAG		-32768
#define	YYNTBASE	88

#define YYTRANSLATE(x) ((unsigned)(x) <= 337 ? yytranslate[x] : 338)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,    87,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    83,     2,    84,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    85,     2,    86,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     6,     8,     9,    12,    13,    15,    18,    19,    22,
    24,    26,    29,    30,    31,    36,    38,    40,    43,    44,
    46,    48,    50,    52,    54,    55,    59,    60,    61,    68,
    71,    73,    75,    78,    79,    80,    90,    93,    94,    95,
   100,   101,   106,   107,   108,   115,   116,   117,   124,   125,
   126,   135,   138,   139,   140,   145,   146,   151,   152,   157,
   158,   163,   164,   165,   166,   178,   179,   180,   188,   189,
   194,   197,   198,   200,   204,   207,   208,   210,   212,   214,
   216,   218,   220,   221,   222,   229,   230,   231,   238,   239,
   242,   243,   244,   251,   252,   253,   260,   262,   266,   267,
   271,   273,   275,   277,   279,   281,   285,   287,   289,   291,
   293,   295,   297,   299,   301,   303,   305,   307,   309,   311,
   313,   315,   317,   319,   321,   323,   325,   327,   329,   331,
   333,   335,   337,   339,   341,   343,   345,   347,   349,   351,
   353,   355,   357,   359,   361,   363,   365,   367,   369,   371,
   373,   375,   377,   379,   381,   383,   385,   387,   389,   391,
   393,   395,   397,   399,   401,   404,   407,   410,   413,   416,
   419,   422,   425,   428,   431,   434,   437,   440,   443,   446,
   449,   452,   455,   458,   461,   464,   467,   470,   473,   476,
   479,   482,   485,   488,   491,   494,   497,   500,   503,   506,
   509,   512,   515,   518,   521,   524,   527,   530,   533,   536,
   539,   542,   545,   548,   551,   554,   557,   560,   562,   564,
   566,   568,   570,   572,   574,   576,   577,   578,   584,   585,
   586,   587,   595,   597,   599,   600,   601,   602,   611,   614,
   615,   617,   618,   619,   620,   621,   622,   623,   624,   625,
   643,   644,   645,   646,   647,   648,   649,   650,   651,   669,
   670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
   680,   681,   682,   683,   684,   716,   717,   718,   719,   720,
   721,   722,   723,   724,   725,   726,   727,   728,   729,   730,
   731,   763,   765,   767,   768,   769,   770,   778,   780,   782,
   784,   785,   789,   790,   794,   795,   796,   797,   804,   805,
   806,   807,   814,   815,   816,   817,   818,   827,   828,   829,
   830,   831,   840,   842,   846,   849,   850,   852,   856,   859,
   860,   862,   866,   869,   870,   872,   876,   879,   880,   882,
   886,   889,   890,   892,   896,   899,   900,   902,   906,   909,
   910,   912,   916,   919,   920,   922,   926,   929,   930,   932,
   936,   939,   940,   942,   946,   949,   950,   952,   956,   959,
   960,   962,   966,   969,   970,   972,   976,   979,   980,   982,
   986,   989,   990,   992,   996,   999,  1000,  1002,  1006,  1009,
  1010,  1012,  1016,  1019,  1020,  1022,  1026,  1029,  1030,  1032,
  1036,  1039,  1040,  1042,  1046,  1049,  1050,  1051,  1052,  1053,
  1061,  1062,  1066,  1067,  1068,  1074,  1075,  1076,  1077,  1085,
  1086,  1087,  1088,  1096,  1097,  1098,  1099,  1100,  1110,  1111,
  1115,  1116,  1118,  1122,  1125,  1126,  1128,  1132,  1135,  1136,
  1138,  1142,  1145,  1146,  1148,  1152,  1155,  1156,  1158,  1162,
  1165
};

static const short yyrhs[] = {    89,
    90,    92,    95,   100,     0,     3,     0,     0,     4,    91,
     0,     0,    80,     0,    92,    93,     0,     0,     5,    94,
     0,    80,     0,    77,     0,    95,    96,     0,     0,     0,
     6,    98,    97,    99,     0,    77,     0,    77,     0,   100,
   101,     0,     0,   102,     0,   106,     0,   126,     0,   130,
     0,   133,     0,     0,   158,   103,   137,     0,     0,     0,
    10,   157,   104,   158,   105,   137,     0,    11,   157,     0,
   107,     0,   117,     0,     0,   106,     0,     0,     0,     7,
   158,   108,    83,   109,    84,    85,   100,    86,     0,   109,
   110,     0,     0,     0,    17,   162,   111,   160,     0,     0,
    18,   162,   112,   161,     0,     0,     0,    20,   162,   113,
   159,   114,   163,     0,     0,     0,    19,   162,   115,   159,
   116,   163,     0,     0,     0,     8,   158,   118,    83,   120,
    84,   119,   136,     0,   120,   121,     0,     0,     0,    17,
   162,   122,   160,     0,     0,    18,   162,   123,   161,     0,
     0,    20,   162,   124,   159,     0,     0,    19,   162,   125,
   159,     0,     0,     0,     0,    12,   157,   127,    87,   161,
   128,    13,   157,   129,    87,   160,     0,     0,     0,    14,
   157,   131,    87,   157,   132,   135,     0,     0,    15,   157,
   134,   135,     0,    16,   157,     0,     0,   288,     0,    85,
   138,    86,     0,   138,   139,     0,     0,   154,     0,   140,
     0,   143,     0,   147,     0,   150,     0,     1,     0,     0,
     0,    17,   162,   141,   160,   142,   146,     0,     0,     0,
    18,   162,   144,   161,   145,   146,     0,     0,     9,   159,
     0,     0,     0,    20,   162,   148,   159,   149,   153,     0,
     0,     0,    19,   162,   151,   159,   152,   153,     0,   163,
     0,   162,     9,   159,     0,     0,   159,   155,   156,     0,
   126,     0,   106,     0,   130,     0,   133,     0,   163,     0,
   162,     9,   159,     0,    80,     0,    80,     0,    80,     0,
    80,     0,    80,     0,    21,     0,    22,     0,    23,     0,
    24,     0,    25,     0,    26,     0,    27,     0,    28,     0,
    29,     0,    30,     0,    31,     0,    32,     0,    33,     0,
    34,     0,    35,     0,    36,     0,    37,     0,    38,     0,
    39,     0,    40,     0,    41,     0,    42,     0,    43,     0,
    44,     0,    45,     0,    46,     0,    47,     0,    48,     0,
    49,     0,    50,     0,    51,     0,    52,     0,    53,     0,
    54,     0,    55,     0,    56,     0,    57,     0,    58,     0,
    59,     0,    60,     0,    61,     0,    62,     0,    63,     0,
    64,     0,    65,     0,    66,     0,    67,     0,    68,     0,
    69,     0,    70,     0,    71,     0,    72,     0,    73,     0,
    21,   262,     0,    22,   264,     0,    23,   266,     0,    24,
   268,     0,    25,   270,     0,    26,   272,     0,    27,   274,
     0,    28,   276,     0,    29,   278,     0,    30,   280,     0,
    31,   282,     0,    32,   284,     0,    33,   286,     0,    34,
   288,     0,    35,   290,     0,    36,   292,     0,    37,   294,
     0,    38,   296,     0,    39,   298,     0,    40,   300,     0,
    41,   302,     0,    42,   167,     0,    43,   168,     0,    44,
   171,     0,    45,   175,     0,    46,   176,     0,    47,   177,
     0,    48,   182,     0,    49,   183,     0,    50,   192,     0,
    51,   201,     0,    52,   217,     0,    53,   233,     0,    54,
   234,     0,    55,   238,     0,    56,   239,     0,    57,   240,
     0,    58,   242,     0,    59,   244,     0,    60,   248,     0,
    61,   252,     0,    62,   257,     0,    63,   328,     0,    64,
   330,     0,    65,   332,     0,    66,   334,     0,    67,   336,
     0,    68,   304,     0,    69,   308,     0,    70,   310,     0,
    71,   313,     0,    72,   317,     0,    73,   321,     0,    74,
     0,    75,     0,    75,     0,    76,     0,    75,     0,    76,
     0,    78,     0,    80,     0,     0,     0,   166,   169,   166,
   170,   166,     0,     0,     0,     0,   166,   172,   166,   173,
   166,   174,   166,     0,   165,     0,   166,     0,     0,     0,
     0,   164,   178,   164,   179,   164,   180,   181,    81,     0,
   181,   164,     0,     0,   164,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   165,   184,   165,   185,   165,   186,
   165,   187,   165,   188,   165,   189,   165,   190,   165,   191,
   165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   166,   193,   166,   194,   166,   195,   166,   196,   166,   197,
   166,   198,   166,   199,   166,   200,   166,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   165,   202,   165,   203,   165,   204,   165,
   205,   165,   206,   165,   207,   165,   208,   165,   209,   165,
   210,   165,   211,   165,   212,   165,   213,   165,   214,   165,
   215,   165,   216,   165,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   166,   218,   166,   219,   166,   220,   166,   221,   166,   222,
   166,   223,   166,   224,   166,   225,   166,   226,   166,   227,
   166,   228,   166,   229,   166,   230,   166,   231,   166,   232,
   166,     0,   102,     0,    79,     0,     0,     0,     0,   166,
   235,   166,   236,   166,   237,   166,     0,    77,     0,    80,
     0,   165,     0,     0,   165,   241,   165,     0,     0,   166,
   243,   166,     0,     0,     0,     0,   165,   245,   165,   246,
   165,   247,     0,     0,     0,     0,   166,   249,   166,   250,
   166,   251,     0,     0,     0,     0,     0,   165,   253,   165,
   254,   165,   255,   165,   256,     0,     0,     0,     0,     0,
   166,   258,   166,   259,   166,   260,   166,   261,     0,   167,
     0,    83,   263,    84,     0,   263,   167,     0,     0,   168,
     0,    83,   265,    84,     0,   265,   168,     0,     0,   171,
     0,    83,   267,    84,     0,   267,   171,     0,     0,   175,
     0,    83,   269,    84,     0,   269,   175,     0,     0,   176,
     0,    83,   271,    84,     0,   271,   176,     0,     0,   177,
     0,    83,   273,    84,     0,   273,   177,     0,     0,   182,
     0,    83,   275,    84,     0,   275,   182,     0,     0,   183,
     0,    83,   277,    84,     0,   277,   183,     0,     0,   192,
     0,    83,   279,    84,     0,   279,   192,     0,     0,   201,
     0,    83,   281,    84,     0,   281,   201,     0,     0,   217,
     0,    83,   283,    84,     0,   283,   217,     0,     0,   233,
     0,    83,   285,    84,     0,   285,   233,     0,     0,   234,
     0,    83,   287,    84,     0,   287,   234,     0,     0,   238,
     0,    83,   289,    84,     0,   289,   238,     0,     0,   239,
     0,    83,   291,    84,     0,   291,   239,     0,     0,   240,
     0,    83,   293,    84,     0,   293,   240,     0,     0,   242,
     0,    83,   295,    84,     0,   295,   242,     0,     0,   244,
     0,    83,   297,    84,     0,   297,   244,     0,     0,   248,
     0,    83,   299,    84,     0,   299,   248,     0,     0,   252,
     0,    83,   301,    84,     0,   301,   252,     0,     0,   257,
     0,    83,   303,    84,     0,   303,   257,     0,     0,     0,
     0,     0,   164,   305,   164,   306,   164,   307,   164,     0,
     0,   166,   309,   166,     0,     0,     0,   166,   311,   166,
   312,   166,     0,     0,     0,     0,   166,   314,   166,   315,
   166,   316,   166,     0,     0,     0,     0,   166,   318,   166,
   319,   166,   320,   166,     0,     0,     0,     0,     0,   166,
   322,   166,   323,   166,   324,   166,   325,   326,     0,     0,
   166,   327,   166,     0,     0,   304,     0,    83,   329,    84,
     0,   329,   304,     0,     0,   308,     0,    83,   331,    84,
     0,   331,   308,     0,     0,   310,     0,    83,   333,    84,
     0,   333,   310,     0,     0,   313,     0,    83,   335,    84,
     0,   335,   313,     0,     0,   317,     0,    83,   337,    84,
     0,   337,   317,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   194,   201,   203,   205,   207,   209,   212,   214,   216,   222,
   224,   230,   232,   234,   239,   241,   244,   247,   249,   251,
   253,   254,   255,   256,   258,   261,   261,   263,   265,   265,
   268,   270,   272,   274,   276,   278,   281,   283,   285,   288,
   289,   291,   292,   294,   295,   296,   298,   299,   301,   303,
   304,   306,   308,   310,   313,   314,   316,   317,   319,   320,
   322,   324,   328,   330,   332,   335,   339,   341,   348,   352,
   359,   362,   364,   367,   370,   372,   374,   376,   377,   378,
   379,   380,   382,   385,   386,   388,   391,   392,   394,   396,
   398,   401,   402,   404,   407,   408,   410,   412,   414,   423,
   424,   425,   426,   427,   429,   431,   433,   436,   439,   442,
   445,   448,   450,   451,   452,   453,   454,   455,   456,   457,
   458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
   468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
   478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
   488,   489,   490,   492,   493,   494,   495,   496,   497,   498,
   499,   500,   501,   502,   504,   506,   507,   508,   509,   510,
   511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
   521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
   531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
   541,   542,   543,   544,   545,   546,   548,   549,   550,   551,
   552,   553,   554,   555,   556,   557,   558,   560,   562,   564,
   566,   568,   570,   572,   577,   579,   581,   583,   588,   590,
   591,   593,   598,   604,   610,   612,   614,   618,   623,   628,
   630,   636,   638,   639,   640,   641,   642,   643,   644,   646,
   654,   656,   657,   658,   659,   660,   661,   662,   664,   672,
   674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
   684,   685,   686,   687,   689,   698,   700,   701,   702,   703,
   704,   705,   706,   707,   708,   709,   710,   711,   712,   713,
   715,   724,   726,   728,   730,   731,   733,   738,   743,   748,
   754,   757,   762,   765,   770,   772,   773,   774,   779,   781,
   782,   783,   788,   790,   791,   792,   793,   798,   800,   801,
   802,   803,   808,   810,   812,   814,   816,   818,   820,   822,
   824,   826,   828,   830,   832,   834,   836,   838,   840,   842,
   844,   846,   848,   850,   852,   854,   856,   858,   860,   862,
   864,   866,   868,   870,   872,   874,   876,   878,   880,   882,
   884,   886,   888,   890,   892,   894,   896,   898,   900,   902,
   904,   906,   908,   910,   912,   914,   916,   918,   920,   922,
   924,   926,   928,   930,   932,   934,   936,   938,   940,   942,
   944,   946,   948,   950,   952,   954,   956,   958,   960,   962,
   964,   966,   968,   970,   972,   974,   978,   980,   981,   983,
   989,   992,   997,   999,  1001,  1006,  1008,  1009,  1011,  1016,
  1018,  1019,  1021,  1026,  1028,  1029,  1031,  1036,  1038,  1041,
  1048,  1056,  1058,  1060,  1062,  1064,  1066,  1068,  1070,  1072,
  1074,  1076,  1078,  1080,  1082,  1084,  1086,  1088,  1090,  1092,
  1094
};

static const char * const yytname[] = {   "$","error","$undefined.","TOK_HEADER",
"TOK_PROFILE","TOK_COMPONENT","TOK_META","TOK_PROTO","TOK_EXTERNPROTO","TOK_IS",
"TOK_DEF","TOK_USE","TOK_ROUTE","TOK_TO","TOK_IMPORT","TOK_EXPORT","TOK_AS",
"TOK_eventIn","TOK_eventOut","TOK_exposedField","TOK_field","TOK_MFBool","TOK_MFColor",
"TOK_MFColorRGBA","TOK_MFDouble","TOK_MFFloat","TOK_MFImage","TOK_MFInt32","TOK_MFMatrix3d",
"TOK_MFMatrix3f","TOK_MFMatrix4d","TOK_MFMatrix4f","TOK_MFNode","TOK_MFRotation",
"TOK_MFString","TOK_MFTime","TOK_MFVec2d","TOK_MFVec2f","TOK_MFVec3d","TOK_MFVec3f",
"TOK_MFVec4d","TOK_MFVec4f","TOK_SFBool","TOK_SFColor","TOK_SFColorRGBA","TOK_SFDouble",
"TOK_SFFloat","TOK_SFImage","TOK_SFInt32","TOK_SFMatrix3d","TOK_SFMatrix3f",
"TOK_SFMatrix4d","TOK_SFMatrix4f","TOK_SFNode","TOK_SFRotation","TOK_SFString",
"TOK_SFTime","TOK_SFVec2d","TOK_SFVec2f","TOK_SFVec3d","TOK_SFVec3f","TOK_SFVec4d",
"TOK_SFVec4f","TOK_MFColor4i","TOK_MFPnt2f","TOK_MFPnt3f","TOK_MFPnt4f","TOK_MFPlane",
"TOK_SFColor4i","TOK_SFPnt2f","TOK_SFPnt3f","TOK_SFPnt4f","TOK_SFPlane","TOK_SFVolume",
"TOK_hex","TOK_int32","TOK_double","TOK_string","TOK_bool","TOK_NULL","TOK_Id",
"TOK_ImageFinished","TOK_Error","'['","']'","'{'","'}'","'.'","x3dScene","headerStatement",
"profileStatement","profileNameId","componentStatements","componentStatement",
"componentNameId","metaStatements","metaStatement","@1","metakey","metavalue",
"statements","statement","nodeStatement","@2","@3","@4","protoStatement","proto",
"@5","interfaceDeclarations","interfaceDeclaration","@6","@7","@8","@9","@10",
"@11","externproto","@12","@13","externInterfaceDeclarations","externInterfaceDeclaration",
"@14","@15","@16","@17","routeStatement","@18","@19","@20","importStatement",
"@21","@22","exportStatement","@23","asStatement","URLList","node","scriptBody",
"scriptBodyElement","eventInDeclaration","@24","@25","eventOutDeclaration","@26",
"@27","eventDeclarationEnd","fieldDeclaration","@28","@29","exposedFieldDeclaration",
"@30","@31","fieldDeclarationEnd","nodeBodyElement","@32","fieldEnd","nodeNameId",
"nodeTypeId","fieldId","eventInId","eventOutId","fieldType","fieldValue","int32",
"double","float","sfboolValue","sfcolorValue","@33","@34","sfcolorRGBAValue",
"@35","@36","@37","sfdoubleValue","sffloatValue","sfimageValue","@38","@39",
"@40","pixels","sfint32Value","sfmatrix3dValue","@41","@42","@43","@44","@45",
"@46","@47","@48","sfmatrix3fValue","@49","@50","@51","@52","@53","@54","@55",
"@56","sfmatrix4dValue","@57","@58","@59","@60","@61","@62","@63","@64","@65",
"@66","@67","@68","@69","@70","@71","sfmatrix4fValue","@72","@73","@74","@75",
"@76","@77","@78","@79","@80","@81","@82","@83","@84","@85","@86","sfnodeValue",
"sfrotationValue","@87","@88","@89","sfstringValue","sftimeValue","sfvec2dValue",
"@90","sfvec2fValue","@91","sfvec3dValue","@92","@93","@94","sfvec3fValue","@95",
"@96","@97","sfvec4dValue","@98","@99","@100","@101","sfvec4fValue","@102","@103",
"@104","@105","mfboolValue","sfboolValues","mfcolorValue","sfcolorValues","mfcolorRGBAValue",
"sfcolorRGBAValues","mfdoubleValue","sfdoubleValues","mffloatValue","sffloatValues",
"mfimageValue","sfimageValues","mfint32Value","sfint32Values","mfmatrix3dValue",
"sfmatrix3dValues","mfmatrix3fValue","sfmatrix3fValues","mfmatrix4dValue","sfmatrix4dValues",
"mfmatrix4fValue","sfmatrix4fValues","mfnodeValue","sfnodeValues","mfrotationValue",
"sfrotationValues","mfstringValue","sfstringValues","mftimeValue","sftimeValues",
"mfvec2dValue","sfvec2dValues","mfvec2fValue","sfvec2fValues","mfvec3dValue",
"sfvec3dValues","mfvec3fValue","sfvec3fValues","mfvec4dValue","sfvec4dValues",
"mfvec4fValue","sfvec4fValues","sfcolor4iValue","@106","@107","@108","sfpnt2fValue",
"@109","sfpnt3fValue","@110","@111","sfpnt4fValue","@112","@113","@114","sfplaneValue",
"@115","@116","@117","sfVolumeValue","@118","@119","@120","@121","sfVolumeValueEnd",
"@122","mfcolor4iValue","sfcolor4iValues","mfpnt2fValue","sfpnt2fValues","mfpnt3fValue",
"sfpnt3fValues","mfpnt4fValue","sfpnt4fValues","mfplaneValue","sfplaneValues",
"sfplaneValues"
};
#endif

static const short yyr1[] = {     0,
    88,    89,    89,    90,    90,    91,    92,    92,    93,    94,
    94,    95,    95,    97,    96,    98,    99,   100,   100,   101,
   101,   101,   101,   101,   103,   102,   104,   105,   102,   102,
   106,   106,    -1,    -1,   108,   107,   109,   109,   111,   110,
   112,   110,   113,   114,   110,   115,   116,   110,   118,   119,
   117,   120,   120,   122,   121,   123,   121,   124,   121,   125,
   121,   127,   128,   129,   126,   131,   132,   130,   134,   133,
   135,   135,   136,   137,   138,   138,   139,   139,   139,   139,
   139,   139,   141,   142,   140,   144,   145,   143,   146,   146,
   148,   149,   147,   151,   152,   150,   153,   153,   155,   154,
   154,   154,   154,   154,   156,   156,   157,   158,   159,   160,
   161,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   164,   164,   165,
   165,   166,   166,   167,   167,   169,   170,   168,   172,   173,
   174,   171,   175,   176,   178,   179,   180,   177,   181,   181,
   182,   184,   185,   186,   187,   188,   189,   190,   191,   183,
   193,   194,   195,   196,   197,   198,   199,   200,   192,   202,
   203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
   213,   214,   215,   216,   201,   218,   219,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   217,   233,   233,   235,   236,   237,   234,   238,   238,   239,
   241,   240,   243,   242,   245,   246,   247,   244,   249,   250,
   251,   248,   253,   254,   255,   256,   252,   258,   259,   260,
   261,   257,   262,   262,   263,   263,   264,   264,   265,   265,
   266,   266,   267,   267,   268,   268,   269,   269,   270,   270,
   271,   271,   272,   272,   273,   273,   274,   274,   275,   275,
   276,   276,   277,   277,   278,   278,   279,   279,   280,   280,
   281,   281,   282,   282,   283,   283,   284,   284,   285,   285,
   286,   286,   287,   287,   288,   288,   289,   289,   290,   290,
   291,   291,   292,   292,   293,   293,   294,   294,   295,   295,
   296,   296,   297,   297,   298,   298,   299,   299,   300,   300,
   301,   301,   302,   302,   303,   303,   305,   306,   307,   304,
   309,   308,   311,   312,   310,   314,   315,   316,   313,   318,
   319,   320,   317,   322,   323,   324,   325,   321,   327,   326,
   326,   328,   328,   329,   329,   330,   330,   331,   331,   332,
   332,   333,   333,   334,   334,   335,   335,   336,   336,   337,
   337
};

static const short yyr2[] = {     0,
     5,     1,     0,     2,     0,     1,     2,     0,     2,     1,
     1,     2,     0,     0,     4,     1,     1,     2,     0,     1,
     1,     1,     1,     1,     0,     3,     0,     0,     6,     2,
     1,     1,     2,     0,     0,     9,     2,     0,     0,     4,
     0,     4,     0,     0,     6,     0,     0,     6,     0,     0,
     8,     2,     0,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     0,     0,    11,     0,     0,     7,     0,     4,
     2,     0,     1,     3,     2,     0,     1,     1,     1,     1,
     1,     1,     0,     0,     6,     0,     0,     6,     0,     2,
     0,     0,     6,     0,     0,     6,     1,     3,     0,     3,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     0,     5,     0,     0,
     0,     7,     1,     1,     0,     0,     0,     8,     2,     0,
     1,     0,     0,     0,     0,     0,     0,     0,     0,    17,
     0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    31,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    31,     1,     1,     0,     0,     0,     7,     1,     1,     1,
     0,     3,     0,     3,     0,     0,     0,     6,     0,     0,
     0,     6,     0,     0,     0,     0,     8,     0,     0,     0,
     0,     8,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     1,     3,     2,     0,
     1,     3,     2,     0,     1,     3,     2,     0,     1,     3,
     2,     0,     1,     3,     2,     0,     0,     0,     0,     7,
     0,     3,     0,     0,     5,     0,     0,     0,     7,     0,
     0,     0,     7,     0,     0,     0,     0,     9,     0,     3,
     0,     1,     3,     2,     0,     1,     3,     2,     0,     1,
     3,     2,     0,     1,     3,     2,     0,     1,     3,     2,
     0
};

static const short yydefact[] = {     3,
     2,     5,     0,     8,     6,     4,    13,     0,     7,    19,
    11,    10,     9,     0,    12,     1,    16,    14,     0,     0,
     0,     0,     0,     0,     0,   108,    18,    20,    21,    31,
    32,    22,    23,    24,    25,     0,    35,    49,   107,    27,
    30,    62,    66,    69,     0,    17,    15,     0,     0,     0,
     0,     0,    72,    76,    26,    38,    53,    28,     0,     0,
     0,    70,     0,     0,     0,     0,   111,    63,    67,    71,
    82,     0,     0,     0,     0,   109,    74,   102,   101,   103,
   104,    75,    78,    79,    80,    81,    77,    99,     0,     0,
     0,     0,     0,    37,     0,     0,     0,     0,    50,    52,
    29,     0,    72,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,    83,    86,    94,    91,
     0,    39,    41,    46,    43,    19,    54,    56,    60,    58,
     0,     0,    68,     0,     0,     0,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   100,     0,   105,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   298,   299,   378,    51,   375,    73,    64,   110,
    84,    87,    95,    92,   224,   225,   326,   323,   165,   222,
   223,   330,   226,   327,   166,   334,   229,   331,   167,   220,
   221,   338,   233,   335,   168,   342,   234,   339,   169,   218,
   219,   346,   235,   343,   170,   350,   241,   347,   171,   354,
   242,   351,   172,   358,   251,   355,   173,   362,   260,   359,
   174,   366,   276,   363,   175,   293,   370,   292,   367,   176,
   374,   294,   371,   177,   178,   382,   300,   379,   179,   386,
   301,   383,   180,   390,   303,   387,   181,   394,   305,   391,
   182,   398,   309,   395,   183,   402,   313,   399,   184,   406,
   318,   403,   185,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
   203,   204,   205,   206,   435,   407,   432,   207,   439,   411,
   436,   208,   443,   413,   440,   209,   447,   416,   444,   210,
   451,   420,   448,   211,   212,   213,   214,   215,   216,   424,
   217,     0,    40,    42,    47,    44,    36,    55,    57,    61,
    59,     0,     0,    89,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   106,     0,     0,   376,   377,     0,     0,    85,
    88,    96,     0,    97,    93,   324,   325,   328,   329,   227,
   332,   333,   230,   336,   337,   340,   341,   344,   345,   236,
   348,   349,   352,   353,   243,   356,   357,   252,   360,   361,
   261,   364,   365,   277,   368,   369,   372,   373,   295,   380,
   381,   384,   385,   302,   388,   389,   304,   392,   393,   306,
   396,   397,   310,   400,   401,   314,   404,   405,   319,   433,
   434,   408,   437,   438,   412,   441,   442,   414,   445,   446,
   417,   449,   450,   421,   425,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,    45,
    65,    90,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    98,   228,   231,   237,   244,   253,   262,   278,   296,   307,
   311,   315,   320,   409,   415,   418,   422,   426,     0,   240,
     0,     0,     0,     0,     0,   308,   312,     0,     0,     0,
     0,     0,     0,   232,     0,   245,   254,   263,   279,   297,
   316,   321,   410,   419,   423,   427,   238,   239,     0,     0,
     0,     0,   317,   322,   431,   246,   255,   264,   280,   429,
   428,     0,     0,     0,     0,     0,   247,   256,   265,   281,
   430,     0,     0,     0,     0,   248,   257,   266,   282,     0,
     0,     0,     0,   249,   258,   267,   283,     0,     0,     0,
     0,   250,   259,   268,   284,     0,     0,   269,   285,     0,
     0,   270,   286,     0,     0,   271,   287,     0,     0,   272,
   288,     0,     0,   273,   289,     0,     0,   274,   290,     0,
     0,   275,   291,     0,     0,     0
};

static const short yydefgoto[] = {   734,
     2,     4,     6,     7,     9,    13,    10,    15,    36,    18,
    47,    16,    27,   308,    45,    50,    66,    29,    30,    48,
    64,    94,   234,   235,   237,   455,   236,   454,    31,    49,
   171,    65,   100,   239,   240,   242,   241,    32,    51,   102,
   403,    33,    52,   103,    34,    53,    62,   246,    55,    63,
    82,    83,   174,   404,    84,   175,   405,   460,    85,   177,
   407,    86,   176,   406,   462,    87,   161,   231,    40,    35,
    88,   251,    68,   463,   464,   283,   273,   263,   258,   264,
   410,   594,   268,   412,   595,   629,   274,   278,   284,   416,
   596,   630,   645,   288,   292,   419,   597,   631,   659,   672,
   682,   690,   698,   296,   421,   598,   632,   660,   673,   683,
   691,   699,   300,   423,   599,   633,   661,   674,   684,   692,
   700,   706,   710,   714,   718,   722,   726,   730,   304,   425,
   600,   634,   662,   675,   685,   693,   701,   707,   711,   715,
   719,   723,   727,   731,   309,   313,   428,   601,   635,   247,
   318,   322,   431,   326,   433,   330,   435,   602,   636,   334,
   437,   603,   637,   338,   439,   604,   638,   663,   342,   441,
   605,   639,   664,   259,   408,   265,   409,   269,   411,   275,
   413,   279,   414,   285,   415,   289,   417,   293,   418,   297,
   420,   301,   422,   305,   424,   310,   426,   314,   427,   315,
   402,   319,   429,   323,   430,   327,   432,   331,   434,   335,
   436,   339,   438,   343,   440,   367,   443,   606,   640,   371,
   445,   375,   447,   607,   379,   449,   608,   641,   383,   451,
   609,   642,   391,   452,   610,   643,   665,   671,   676,   368,
   442,   372,   444,   376,   446,   380,   448,   384,   450
};

static const short yypact[] = {    31,
-32768,    26,   -35,-32768,-32768,-32768,    51,   -14,-32768,    71,
-32768,-32768,-32768,   -26,-32768,   101,-32768,-32768,     1,     1,
     5,     5,     5,     5,     5,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    30,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    78,-32768,-32768,    92,   131,     1,
   104,   110,   195,-32768,-32768,-32768,-32768,-32768,   144,     5,
     5,-32768,   113,   118,   123,    78,-32768,-32768,-32768,-32768,
-32768,   539,   539,   539,   539,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   539,   539,
   539,   539,   150,-32768,   539,   539,   539,   539,-32768,-32768,
-32768,   213,   195,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   817,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    70,     5,-32768,   163,   144,   178,   178,    46,    97,   234,
   360,   362,    27,    96,   375,   389,   392,   395,    76,   408,
    70,   411,   423,   425,   439,   441,   457,   473,   128,    28,
    28,   236,    28,    77,    77,   236,    28,   236,    28,    89,
    28,   105,   236,   236,    28,   236,    28,   236,    28,   103,
   538,   540,   542,   544,    77,    28,    28,    28,    28,    28,
-32768,   254,-32768,   163,   144,   178,   178,    68,   163,   144,
   178,   178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   364,   194,   276,   276,   817,   817,   141,   108,    28,
   112,    28,   114,   119,   -22,    77,    83,   125,   236,   129,
    28,   175,   236,   202,    28,    82,   204,    28,   214,   221,
   236,   232,    28,   251,   236,   253,    28,   257,   236,   263,
    28,    90,    77,   267,    28,   269,    28,   356,    28,   358,
    28,    28,-32768,   870,   870,-32768,-32768,   163,   178,-32768,
-32768,-32768,   278,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    46,    97,   234,   360,   362,
    27,    96,   375,   389,   392,   395,    76,   408,    70,   411,
   423,   425,   439,   441,   457,   473,   128,    28,    28,   236,
    28,    77,    77,   236,    28,   236,    28,    89,    28,   105,
   236,   236,    28,   236,    28,   236,    28,   103,   538,   540,
   542,   544,    77,    28,    28,    28,    28,    28,-32768,-32768,
-32768,-32768,   178,    28,    28,    77,   236,    28,   236,    28,
    28,   236,    28,   236,    28,    77,    28,    28,    28,    28,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    28,-32768,
   236,    28,   236,    28,    28,-32768,-32768,   236,    28,    77,
    28,    28,    28,-32768,   274,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   236,    28,
   236,    28,-32768,-32768,    28,-32768,-32768,-32768,-32768,-32768,
-32768,   236,    28,   236,    28,    28,-32768,-32768,-32768,-32768,
-32768,   236,    28,   236,    28,-32768,-32768,-32768,-32768,   236,
    28,   236,    28,-32768,-32768,-32768,-32768,   236,    28,   236,
    28,-32768,-32768,-32768,-32768,   236,    28,-32768,-32768,   236,
    28,-32768,-32768,   236,    28,-32768,-32768,   236,    28,-32768,
-32768,   236,    28,-32768,-32768,   236,    28,-32768,-32768,   236,
    28,-32768,-32768,   291,   293,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   135,-32768,    24,-32768,-32768,-32768,   240,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   243,-32768,-32768,
-32768,   259,-32768,-32768,   261,-32768,   192,-32768,   248,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -71,-32768,-32768,
-32768,-32768,-32768,-32768,   -61,-32768,-32768,-32768,    45,   126,
  -119,  -174,   -91,    -1,  -136,   -86,   107,  -180,  -198,  -197,
-32768,-32768,  -196,-32768,-32768,-32768,  -195,  -194,  -193,-32768,
-32768,-32768,-32768,  -201,  -191,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -187,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -186,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -185,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -184,  -199,-32768,-32768,-32768,  -179,
  -200,  -176,-32768,  -183,-32768,  -188,-32768,-32768,-32768,  -181,
-32768,-32768,-32768,  -164,-32768,-32768,-32768,-32768,  -202,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   165,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -166,-32768,-32768,-32768,  -207,
-32768,  -163,-32768,-32768,  -173,-32768,-32768,-32768,  -168,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		943


static const short yytable[] = {   267,
   344,   277,   345,   350,   346,   295,   347,   303,   348,   312,
   349,   356,   358,   325,   351,   333,   364,   341,   386,   352,
   267,   353,   277,   354,   233,   355,   295,   361,   303,     3,
   312,   360,   357,     1,   325,   362,   333,   359,   341,    28,
   370,   374,   378,   382,     5,   370,   374,   378,   382,   390,
    17,   280,   281,   363,   388,     8,   253,   254,   385,   393,
   389,   478,    11,   387,   398,    12,    41,    42,    43,    44,
   157,   158,   159,   160,    19,    20,    14,    21,    22,    23,
    26,    24,    25,   252,    39,    21,    22,   162,   163,   164,
   165,    21,    22,   167,   168,   169,   170,   287,    21,    22,
   280,   281,   260,   261,    69,    70,    46,    19,    20,   282,
    21,    22,    23,    71,    24,    25,   395,   396,   287,    19,
    20,   400,   401,   255,    23,   256,    24,    25,   257,    72,
    73,    74,    75,   366,    89,    90,    91,    92,   366,    95,
    96,    97,    98,   394,    37,    38,   243,    26,   399,   244,
   280,   281,   245,   397,   306,    26,   280,   281,   307,   232,
   306,    26,    54,   280,   281,   495,   481,   306,    26,   280,
   281,   260,   261,   520,    56,    58,   280,   281,   286,   262,
    26,   243,   260,   261,   244,   365,   260,   261,   270,   271,
    59,   468,    76,   260,   261,   471,    60,   474,    77,   270,
   271,    93,   476,   260,   261,   255,    99,   256,   483,   467,
    61,   469,   486,    57,   472,   482,   249,   475,   255,   477,
   256,   479,   457,    67,   466,   172,   484,   498,   501,   470,
   267,   473,   487,   277,   166,   490,   524,   518,   493,   295,
   488,   496,   250,   303,   494,   509,   312,   499,   506,   270,
   271,   325,   507,   503,   512,   333,   513,    76,   489,   341,
   519,    28,   392,   370,   525,   374,   528,   378,   531,   382,
   534,   535,   453,   515,   530,   521,   260,   261,   260,   261,
   458,   533,   527,   591,   459,   492,   593,   497,   270,   271,
   735,   291,   736,   299,   173,   270,   271,   500,   317,   321,
   238,   329,    78,   337,   502,    79,   260,   261,   260,   261,
   270,   271,   291,   101,   299,   505,   266,   589,   590,   317,
   321,    80,   329,    81,   337,   270,   271,   260,   261,   480,
   287,   270,   271,   461,   508,   248,   511,   260,   261,   592,
   514,   260,   261,   260,   261,   465,   517,   280,   281,     0,
   523,     0,   526,     0,   657,   366,   522,   267,   344,   277,
   345,   350,   346,   295,   347,   303,   348,   312,   349,   356,
   358,   325,   351,   333,   364,   341,   386,   352,   267,   353,
   277,   354,     0,   355,   295,   361,   303,     0,   312,   360,
   357,     0,   325,   362,   333,   359,   341,     0,   370,   374,
   378,   382,     0,   370,   374,   378,   382,   390,     0,     0,
     0,   363,   388,   612,   613,     0,   385,   616,   389,   618,
   619,   387,   621,     0,   623,     0,   625,   626,   627,   628,
   260,   261,   260,   261,   270,   271,   260,   261,     0,   529,
   243,   532,   272,   244,   276,     0,     0,   456,   644,   270,
   271,   647,     0,   649,   650,   287,     0,   290,   652,     0,
   654,   655,   656,   260,   261,     0,   270,   271,     0,   260,
   261,   294,     0,   611,   298,     0,   287,   302,     0,   667,
     0,   669,   260,   261,   670,   270,   271,     0,     0,     0,
   311,   366,   678,   316,   680,   681,   366,   270,   271,   260,
   261,     0,   687,     0,   689,   320,     0,   324,     0,   614,
   695,     0,   697,   270,   271,   260,   261,     0,   703,   624,
   705,   328,     0,   332,   291,   485,   709,     0,   299,   491,
   713,   270,   271,     0,   717,   317,   321,   504,   721,   336,
   329,   510,   725,     0,   337,   516,   729,   260,   261,     0,
   733,     0,     0,   653,     0,   340,     0,     0,   658,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   260,   261,   260,   261,   260,   261,   260,   261,
   369,     0,   373,     0,   377,     0,   381,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   291,
     0,   299,     0,     0,     0,     0,   317,   321,     0,   329,
     0,   337,     0,     0,     0,     0,     0,     0,     0,     0,
   291,     0,   299,     0,     0,     0,     0,   317,   321,     0,
   329,     0,   337,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   615,     0,   617,     0,     0,   620,     0,
   622,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   646,     0,   648,
     0,     0,     0,     0,   651,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   666,     0,   668,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   677,     0,
   679,     0,     0,     0,     0,     0,     0,     0,   686,     0,
   688,     0,     0,     0,     0,     0,   694,     0,   696,     0,
     0,     0,     0,     0,   702,     0,   704,     0,     0,     0,
     0,     0,   708,     0,     0,     0,   712,     0,     0,     0,
   716,     0,     0,     0,   720,     0,     0,     0,   724,     0,
     0,     0,   728,     0,     0,     0,   732,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
   536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
   546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
   556,   557,   558,   559,   560,   561,   562,   563,   564,   565,
   566,   567,   568,   569,   570,   571,   572,   573,   574,   575,
   576,   577,   578,   579,   580,   581,   582,   583,   584,   585,
   586,   587,   588
};

static const short yycheck[] = {   180,
   199,   182,   200,   205,   201,   186,   202,   188,   203,   190,
   204,   211,   213,   194,   206,   196,   219,   198,   226,   207,
   201,   208,   203,   209,   161,   210,   207,   216,   209,     4,
   211,   215,   212,     3,   215,   217,   217,   214,   219,    16,
   221,   222,   223,   224,    80,   226,   227,   228,   229,   230,
    77,    74,    75,   218,   228,     5,   176,   177,   225,   234,
   229,    84,    77,   227,   239,    80,    22,    23,    24,    25,
    72,    73,    74,    75,     7,     8,     6,    10,    11,    12,
    80,    14,    15,   175,    80,    10,    11,    89,    90,    91,
    92,    10,    11,    95,    96,    97,    98,   184,    10,    11,
    74,    75,    75,    76,    60,    61,    77,     7,     8,    83,
    10,    11,    12,     1,    14,    15,   236,   237,   205,     7,
     8,   241,   242,    78,    12,    80,    14,    15,    83,    17,
    18,    19,    20,   220,    17,    18,    19,    20,   225,    17,
    18,    19,    20,   235,    19,    20,    77,    80,   240,    80,
    74,    75,    83,    86,    79,    80,    74,    75,    83,   161,
    79,    80,    85,    74,    75,    84,    84,    79,    80,    74,
    75,    75,    76,    84,    83,    50,    74,    75,    83,    83,
    80,    77,    75,    76,    80,    83,    75,    76,    75,    76,
    87,    84,    80,    75,    76,    84,    87,    84,    86,    75,
    76,    84,    84,    75,    76,    78,    84,    80,    84,   408,
    16,   409,    84,    83,   411,   417,   172,   413,    78,   414,
    80,   415,   402,    80,    84,    13,   418,   427,   429,   410,
   411,   412,   420,   414,    85,   422,   444,   440,   424,   420,
   421,   426,    80,   424,   425,   434,   427,   428,   432,    75,
    76,   432,   433,   430,   436,   436,   437,    80,    84,   440,
   441,   238,     9,   444,   445,   446,   447,   448,   449,   450,
   451,   452,   392,   438,   448,   442,    75,    76,    75,    76,
    87,   450,   446,   458,     9,    84,     9,    84,    75,    76,
     0,   185,     0,   187,   103,    75,    76,    84,   192,   193,
   166,   195,    63,   197,    84,    63,    75,    76,    75,    76,
    75,    76,   206,    66,   208,    84,    83,   454,   455,   213,
   214,    63,   216,    63,   218,    75,    76,    75,    76,   416,
   417,    75,    76,   405,    84,   171,    84,    75,    76,   459,
    84,    75,    76,    75,    76,   407,    84,    74,    75,    -1,
    84,    -1,    84,    -1,    81,   442,   443,   538,   557,   540,
   558,   563,   559,   544,   560,   546,   561,   548,   562,   569,
   571,   552,   564,   554,   577,   556,   584,   565,   559,   566,
   561,   567,    -1,   568,   565,   574,   567,    -1,   569,   573,
   570,    -1,   573,   575,   575,   572,   577,    -1,   579,   580,
   581,   582,    -1,   584,   585,   586,   587,   588,    -1,    -1,
    -1,   576,   586,   594,   595,    -1,   583,   598,   587,   600,
   601,   585,   603,    -1,   605,    -1,   607,   608,   609,   610,
    75,    76,    75,    76,    75,    76,    75,    76,    -1,    84,
    77,    84,    83,    80,    83,    -1,    -1,    84,   629,    75,
    76,   632,    -1,   634,   635,   542,    -1,    83,   639,    -1,
   641,   642,   643,    75,    76,    -1,    75,    76,    -1,    75,
    76,    83,    -1,   593,    83,    -1,   563,    83,    -1,   660,
    -1,   662,    75,    76,   665,    75,    76,    -1,    -1,    -1,
    83,   578,   673,    83,   675,   676,   583,    75,    76,    75,
    76,    -1,   683,    -1,   685,    83,    -1,    83,    -1,   596,
   691,    -1,   693,    75,    76,    75,    76,    -1,   699,   606,
   701,    83,    -1,    83,   418,   419,   707,    -1,   422,   423,
   711,    75,    76,    -1,   715,   429,   430,   431,   719,    83,
   434,   435,   723,    -1,   438,   439,   727,    75,    76,    -1,
   731,    -1,    -1,   640,    -1,    83,    -1,    -1,   645,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    75,    76,    75,    76,    75,    76,    75,    76,
    83,    -1,    83,    -1,    83,    -1,    83,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   543,
    -1,   545,    -1,    -1,    -1,    -1,   550,   551,    -1,   553,
    -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   564,    -1,   566,    -1,    -1,    -1,    -1,   571,   572,    -1,
   574,    -1,   576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   597,    -1,   599,    -1,    -1,   602,    -1,
   604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   631,    -1,   633,
    -1,    -1,    -1,    -1,   638,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   659,    -1,   661,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   672,    -1,
   674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,
   684,    -1,    -1,    -1,    -1,    -1,   690,    -1,   692,    -1,
    -1,    -1,    -1,    -1,   698,    -1,   700,    -1,    -1,    -1,
    -1,    -1,   706,    -1,    -1,    -1,   710,    -1,    -1,    -1,
   714,    -1,    -1,    -1,   718,    -1,    -1,    -1,   722,    -1,
    -1,    -1,   726,    -1,    -1,    -1,   730,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/local/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/local/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 202 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->verifyHeader(yyvsp[0].stringVal); ;
    break;}
case 4:
#line 206 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->profileElement(yyvsp[0].stringVal); ;
    break;}
case 9:
#line 220 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->componentElement(yyvsp[0].stringVal); ;
    break;}
case 14:
#line 237 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 15:
#line 239 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->metaElement(SKEL->_tmpString1.c_str(), yyvsp[0].stringVal); ;
    break;}
case 25:
#line 259 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, 0); ;
    break;}
case 27:
#line 262 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 28:
#line 263 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginNode(yyvsp[0].stringVal, SKEL->_tmpString1.c_str()); ;
    break;}
case 30:
#line 266 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->use(yyvsp[0].stringVal); ;
    break;}
case 35:
#line 277 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginProto(yyvsp[0].stringVal); ;
    break;}
case 36:
#line 279 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endProto(); ;
    break;}
case 39:
#line 287 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 40:
#line 288 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->endEventDecl(); ;
    break;}
case 41:
#line 290 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 42:
#line 291 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->endEventDecl(); ;
    break;}
case 43:
#line 293 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 44:
#line 294 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 45:
#line 295 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endFieldDecl(); ;
    break;}
case 46:
#line 297 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 47:
#line 298 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginExposedFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 48:
#line 299 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExposedFieldDecl(); ;
    break;}
case 49:
#line 302 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginExternProto(yyvsp[0].stringVal); ;
    break;}
case 50:
#line 303 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExternProtoInterface(); ;
    break;}
case 51:
#line 304 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExternProto(); ;
    break;}
case 54:
#line 312 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 55:
#line 313 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 56:
#line 315 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 57:
#line 316 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 58:
#line 318 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 59:
#line 319 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 60:
#line 321 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 61:
#line 322 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addExternExposedFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 62:
#line 326 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 63:
#line 328 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString2 = yyvsp[0].stringVal; ;
    break;}
case 64:
#line 330 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString3 = yyvsp[0].stringVal; ;
    break;}
case 65:
#line 333 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addRoute(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), SKEL->_tmpString3.c_str(), yyvsp[0].stringVal); ;
    break;}
case 66:
#line 337 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 67:
#line 339 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString2 = yyvsp[0].stringVal; ;
    break;}
case 68:
#line 341 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        if (yyvsp[0].stringVal != 0)
            SKEL->importElement(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), yyvsp[0].stringVal);
        else
            SKEL->importElement(SKEL->_tmpString1.c_str(), SKEL->_tmpString2.c_str(), 0);
    ;
    break;}
case 69:
#line 350 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = yyvsp[0].stringVal; ;
    break;}
case 70:
#line 352 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        if (yyvsp[0].stringVal != 0)
            SKEL->exportElement(SKEL->_tmpString1.c_str(), yyvsp[0].stringVal);
        else
            SKEL->exportElement(SKEL->_tmpString1.c_str(), 0);
    ;
    break;}
case 71:
#line 361 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.stringVal = yyvsp[0].stringVal; ;
    break;}
case 72:
#line 362 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.stringVal = 0; ;
    break;}
case 74:
#line 368 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endNode(); ;
    break;}
case 83:
#line 384 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 84:
#line 385 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventInDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 85:
#line 386 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endEventDecl(); ;
    break;}
case 86:
#line 390 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 87:
#line 391 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginEventOutDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); ;
    break;}
case 88:
#line 392 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endEventDecl(); ;
    break;}
case 90:
#line 396 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 91:
#line 400 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 92:
#line 401 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 93:
#line 402 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endFieldDecl(); ;
    break;}
case 94:
#line 406 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->_tmpString1 = SKEL->getLexer()->YYText(); ;
    break;}
case 95:
#line 407 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginExposedFieldDecl(SKEL->_tmpString1.c_str(), yyvsp[-2].intVal, yyvsp[0].stringVal); SKEL->getLexer()->expectType(yyvsp[-2].intVal); ;
    break;}
case 96:
#line 408 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endExposedFieldDecl(); ;
    break;}
case 98:
#line 412 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 99:
#line 416 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        Int32 iFieldTypeId = SKEL->getFieldType(yyvsp[0].stringVal);
        if (SKEL->getMapFieldTypes() == true)
            iFieldTypeId = SKEL->mapExtIntFieldType(yyvsp[0].stringVal, iFieldTypeId);
        SKEL->getLexer()->expectType(iFieldTypeId);
        SKEL->beginField(yyvsp[0].stringVal, iFieldTypeId);
    ;
    break;}
case 100:
#line 423 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->endField(); ;
    break;}
case 106:
#line 431 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->is(yyvsp[0].stringVal); ;
    break;}
case 218:
#line 561 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.intVal = yyvsp[0].intVal; ;
    break;}
case 219:
#line 562 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.intVal = yyvsp[0].intVal; ;
    break;}
case 220:
#line 565 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.doubleVal = yyvsp[0].intVal; ;
    break;}
case 221:
#line 566 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.doubleVal = yyvsp[0].doubleVal; ;
    break;}
case 222:
#line 569 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.floatVal = static_cast<float>(yyvsp[0].intVal); ;
    break;}
case 223:
#line 570 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ yyval.floatVal = static_cast<float>(yyvsp[0].doubleVal); ;
    break;}
case 224:
#line 574 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addBoolValue(yyvsp[0].boolVal);
    ;
    break;}
case 225:
#line 577 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->addFieldValue(yyvsp[0].stringVal); ;
    break;}
case 226:
#line 580 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 227:
#line 581 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 228:
#line 583 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColorValue(Color3f(yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 229:
#line 589 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 230:
#line 590 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 231:
#line 591 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 232:
#line 593 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColorRGBAValue(Color4f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 233:
#line 600 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addDoubleValue(yyvsp[0].doubleVal);
    ;
    break;}
case 234:
#line 606 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addFloatValue(yyvsp[0].floatVal);
    ;
    break;}
case 235:
#line 611 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 236:
#line 612 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 237:
#line 614 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->beginImage(yyvsp[-4].intVal, yyvsp[-2].intVal, yyvsp[0].intVal);
    ;
    break;}
case 238:
#line 619 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->endImage();
    ;
    break;}
case 239:
#line 625 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addImagePixel(yyvsp[0].intVal);
    ;
    break;}
case 241:
#line 632 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addInt32Value(yyvsp[0].intVal);
    ;
    break;}
case 242:
#line 637 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 243:
#line 638 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 244:
#line 639 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 245:
#line 640 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 246:
#line 641 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 247:
#line 642 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 248:
#line 643 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 249:
#line 644 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 250:
#line 646 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix3dValue(
            yyvsp[-16].doubleVal,  yyvsp[-10].doubleVal, yyvsp[-4].doubleVal,
            yyvsp[-14].doubleVal,  yyvsp[-8].doubleVal, yyvsp[-2].doubleVal,
            yyvsp[-12].doubleVal, yyvsp[-6].doubleVal, yyvsp[0].doubleVal);
    ;
    break;}
case 251:
#line 655 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 252:
#line 656 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 253:
#line 657 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 254:
#line 658 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 255:
#line 659 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 256:
#line 660 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 257:
#line 661 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 258:
#line 662 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 259:
#line 664 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix3fValue(
            yyvsp[-16].floatVal,  yyvsp[-10].floatVal, yyvsp[-4].floatVal,
            yyvsp[-14].floatVal,  yyvsp[-8].floatVal, yyvsp[-2].floatVal,
            yyvsp[-12].floatVal, yyvsp[-6].floatVal, yyvsp[0].floatVal);
    ;
    break;}
case 260:
#line 673 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 261:
#line 674 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 262:
#line 675 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 263:
#line 676 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 264:
#line 677 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 265:
#line 678 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 266:
#line 679 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 267:
#line 680 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 268:
#line 681 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 269:
#line 682 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 270:
#line 683 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 271:
#line 684 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 272:
#line 685 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 273:
#line 686 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 274:
#line 687 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 275:
#line 689 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix4dValue(Matrix4d(
            yyvsp[-30].doubleVal,  yyvsp[-22].doubleVal, yyvsp[-14].doubleVal, yyvsp[-6].doubleVal,
            yyvsp[-28].doubleVal, yyvsp[-20].doubleVal, yyvsp[-12].doubleVal, yyvsp[-4].doubleVal,
            yyvsp[-26].doubleVal, yyvsp[-18].doubleVal, yyvsp[-10].doubleVal, yyvsp[-2].doubleVal,
            yyvsp[-24].doubleVal, yyvsp[-16].doubleVal, yyvsp[-8].doubleVal, yyvsp[0].doubleVal));
    ;
    break;}
case 276:
#line 699 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 277:
#line 700 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 278:
#line 701 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 279:
#line 702 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 280:
#line 703 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 281:
#line 704 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 282:
#line 705 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 283:
#line 706 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 284:
#line 707 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 285:
#line 708 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 286:
#line 709 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 287:
#line 710 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 288:
#line 711 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 289:
#line 712 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 290:
#line 713 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 291:
#line 715 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addMatrix4fValue(Matrix4f(
            yyvsp[-30].floatVal,  yyvsp[-22].floatVal, yyvsp[-14].floatVal, yyvsp[-6].floatVal,
            yyvsp[-28].floatVal, yyvsp[-20].floatVal, yyvsp[-12].floatVal, yyvsp[-4].floatVal,
            yyvsp[-26].floatVal, yyvsp[-18].floatVal, yyvsp[-10].floatVal, yyvsp[-2].floatVal,
            yyvsp[-24].floatVal, yyvsp[-16].floatVal, yyvsp[-8].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 294:
#line 729 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 295:
#line 730 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 296:
#line 731 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 297:
#line 733 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addRotationValue(Vec3f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal), yyvsp[0].floatVal);
    ;
    break;}
case 298:
#line 740 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addStringValue(yyvsp[0].stringVal);
    ;
    break;}
case 299:
#line 744 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ /* Not VRML conformant */
        SKEL->addStringValue(yyvsp[0].stringVal);
    ;
    break;}
case 300:
#line 750 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->addTimeValue(yyvsp[0].doubleVal);
    ;
    break;}
case 301:
#line 755 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 302:
#line 757 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec2dValue(Vec2d(yyvsp[-2].doubleVal, yyvsp[0].doubleVal));
    ;
    break;}
case 303:
#line 763 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 304:
#line 765 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec2fValue(Vec2f(yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 305:
#line 771 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 306:
#line 772 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 307:
#line 773 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 308:
#line 774 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec3dValue(Vec3d(yyvsp[-5].doubleVal, yyvsp[-3].doubleVal, yyvsp[-1].doubleVal));
    ;
    break;}
case 309:
#line 780 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 310:
#line 781 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 311:
#line 782 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 312:
#line 783 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec3fValue(Vec3f(yyvsp[-5].floatVal, yyvsp[-3].floatVal, yyvsp[-1].floatVal));
    ;
    break;}
case 313:
#line 789 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 314:
#line 790 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 315:
#line 791 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 316:
#line 792 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 317:
#line 793 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec4dValue(Vec4d(yyvsp[-7].doubleVal, yyvsp[-5].doubleVal, yyvsp[-3].doubleVal, yyvsp[-1].doubleVal));
    ;
    break;}
case 318:
#line 799 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 319:
#line 800 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 320:
#line 801 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 321:
#line 802 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 322:
#line 803 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addVec4fValue(Vec4f(yyvsp[-7].floatVal, yyvsp[-5].floatVal, yyvsp[-3].floatVal, yyvsp[-1].floatVal));
    ;
    break;}
case 407:
#line 979 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 408:
#line 980 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 409:
#line 981 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 410:
#line 983 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addColor4iValue(Color4ub(static_cast<UInt8>(yyvsp[-6].intVal), static_cast<UInt8>(yyvsp[-4].intVal),
                                       static_cast<UInt8>(yyvsp[-2].intVal), static_cast<UInt8>(yyvsp[0].intVal)));
    ;
    break;}
case 411:
#line 990 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 412:
#line 992 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt2fValue(Pnt2f(yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 413:
#line 998 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 414:
#line 999 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 415:
#line 1001 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt3fValue(Pnt3f(yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 416:
#line 1007 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 417:
#line 1008 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 418:
#line 1009 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 419:
#line 1011 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPnt4fValue(Pnt4f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal, yyvsp[0].floatVal));
    ;
    break;}
case 420:
#line 1017 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 421:
#line 1018 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 422:
#line 1019 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 423:
#line 1021 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->addPlaneValue(Plane(Vec3f(yyvsp[-6].floatVal, yyvsp[-4].floatVal, yyvsp[-2].floatVal), yyvsp[0].floatVal));
    ;
    break;}
case 424:
#line 1027 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->beginValue(); ;
    break;}
case 425:
#line 1028 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 426:
#line 1029 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 427:
#line 1031 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        SKEL->_tmpFloat1 = yyvsp[-6].floatVal; SKEL->_tmpFloat2 = yyvsp[-4].floatVal;
        SKEL->_tmpFloat3 = yyvsp[-2].floatVal; SKEL->_tmpFloat4 = yyvsp[0].floatVal;
    ;
    break;}
case 429:
#line 1039 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{ SKEL->appendValue(); ;
    break;}
case 430:
#line 1041 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        SKEL->appendValue();
        DynamicVolume dv(DynamicVolume::BOX_VOLUME);
        BoxVolume &bv = dynamic_cast<BoxVolume&>(dv.getInstance());
        bv.setBounds(SKEL->_tmpFloat1, SKEL->_tmpFloat2, SKEL->_tmpFloat3, SKEL->_tmpFloat4, yyvsp[-2].floatVal, yyvsp[0].floatVal);
        SKEL->addVolumeValue(dv);
    ;
    break;}
case 431:
#line 1049 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"
{
        DynamicVolume dv(DynamicVolume::SPHERE_VOLUME);
        SphereVolume &sv = dynamic_cast<SphereVolume&>(dv.getInstance());
        sv.setValue(Pnt3f(SKEL->_tmpFloat1, SKEL->_tmpFloat2, SKEL->_tmpFloat3), SKEL->_tmpFloat4);
        SKEL->addVolumeValue(dv);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/local/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1096 "../../../source/system/fileio/scanparseskel/osgscanparseskel.y"


int OSGScanParseSkel_lex(YYSTYPE *lvalp, void *pSkel)
{
    return SKEL->lex(lvalp);
}
