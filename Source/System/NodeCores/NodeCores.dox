#include <OSGConfig.h>

using namespace OSG;

/*! \defgroup GrpSystemNodeCores NodeCores
    \ingroup GrpSystem
   
See \ref PageSystemNodesNCores for details.

*/

/*! \page PageSystemNodesNCores Nodes & NodeCores

\latexonly Starter:NewChapter \endlatexonly

Of course the most important structures in a scene-graph are the actual nodes
that make up the graph.

OpenSG uses a somewhat different approach than many other systems. A node is
split into two parts: the Node and a NodeCore (s. fig [singleParentFig]), both
of which are FieldContainers, so all that has been said before applies to
them.

A Node keeps the general information: a children list, a parent pointer, a
bounding volume and a core pointer. Note that the node itself contains no
information about its type (e.g. transform, group, etc.). A Node cannot be
shared, every node can only be at one place in the graph, thus a single parent
pointer is enough. All nodes together define the topology of the graph,
without defining any content. Actions that depend on a position in the graph,
like accessing the accumulated matrix to the world coordinate system or the
world bounding volume, have to be done on the node, as it uniquely defines and
identifies the position in the graph.

A NodeCore carries the differentiating information for a node. There are
NodeCores for all the different functions needed in the tree: groups,
transformations, geometry and many more. NodeCores can be shared between
different nodes, thus they keep an array or actually a MultiField of Node
pointers.

\image html node_core_share.png "Node & Node Core Sharing"
\image latex node_core_share.eps "Node & Node Core Sharing" width=8cm

The types of NodeCores using in OpenSG are divided into two large groups:
Groups (\ref PageSystemNCGroups) and Drawables (\ref PageSystemNCDrawables). 

*/
