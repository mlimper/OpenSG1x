/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOMETRYINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGeometryBase.h"
#include "OSGGeometry.h"


OSG_USING_NAMESPACE

const OSG::BitVector  GeometryBase::TypesFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::TypesFieldId);

const OSG::BitVector  GeometryBase::LengthsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::LengthsFieldId);

const OSG::BitVector  GeometryBase::PositionsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::PositionsFieldId);

const OSG::BitVector  GeometryBase::NormalsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::NormalsFieldId);

const OSG::BitVector  GeometryBase::ColorsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::ColorsFieldId);

const OSG::BitVector  GeometryBase::SecondaryColorsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::SecondaryColorsFieldId);

const OSG::BitVector  GeometryBase::TexCoordsFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::TexCoordsFieldId);

const OSG::BitVector  GeometryBase::TexCoords1FieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::TexCoords1FieldId);

const OSG::BitVector  GeometryBase::TexCoords2FieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::TexCoords2FieldId);

const OSG::BitVector  GeometryBase::TexCoords3FieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::TexCoords3FieldId);

const OSG::BitVector  GeometryBase::IndicesFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::IndicesFieldId);

const OSG::BitVector  GeometryBase::IndexMappingFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::IndexMappingFieldId);

const OSG::BitVector  GeometryBase::DlistCacheFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::DlistCacheFieldId);

const OSG::BitVector  GeometryBase::GLIdFieldMask = 
    (TypeTraits<BitVector>::One << GeometryBase::GLIdFieldId);

const OSG::BitVector GeometryBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var GeoPTypesPtr    GeometryBase::_sfTypes
    The types property contains the primitive's types. Legal values are          everything that can be passed to glBegin(). There have to be as many          types as lengths.
*/
/*! \var GeoPLengthsPtr  GeometryBase::_sfLengths
    The lengths property contains the number of vertices to use for the          corresponding primitive. There have to be as many  lengths as types.
*/
/*! \var GeoPositionsPtr GeometryBase::_sfPositions
    The positions property contains the position data.
*/
/*! \var GeoNormalsPtr   GeometryBase::_sfNormals
    The normals property contains the normal data.
*/
/*! \var GeoColorsPtr    GeometryBase::_sfColors
    The colors property contains the color data. See \ref          PageSystemMaterialChunk for details on when these colors are used.
*/
/*! \var GeoColorsPtr    GeometryBase::_sfSecondaryColors
    The secondaryColors property contains the secondary colors data.         Secondary colors are used for some higher level shaders.
*/
/*! \var GeoTexCoordsPtr GeometryBase::_sfTexCoords
    The texCoords property contains the texture coordinate data.
*/
/*! \var GeoTexCoordsPtr GeometryBase::_sfTexCoords1
    The texCoords1 property contains the texture coordinate data for the         second texture. See \ref PageSystemTextureChunk for multi-texturing.
*/
/*! \var GeoTexCoordsPtr GeometryBase::_sfTexCoords2
    The texCoords2 property contains the texture coordinate data for the         third texture. See \ref PageSystemTextureChunk for multi-texturing.
*/
/*! \var GeoTexCoordsPtr GeometryBase::_sfTexCoords3
    The texCoords3 property contains the texture coordinate data for the         fourth texture. See \ref PageSystemTextureChunk for multi-texturing.
*/
/*! \var GeoIndicesPtr   GeometryBase::_sfIndices
    The indices property contains the index data. See \ref          PageSystemGeoIndexing for a description of the indexing options.
*/
/*! \var UInt16          GeometryBase::_mfIndexMapping
    The indexMapping property contains the definition which index element         is used for which attribute data. See \ref PageSystemGeoIndexing for         a description of the indexing options.
*/
/*! \var bool            GeometryBase::_sfDlistCache
    Flag to activate caching the geometry inside a display list.
*/
/*! \var Int32           GeometryBase::_sfGLId
    The dlist id, if used.
*/

//! Geometry description

FieldDescription *GeometryBase::_desc[] = 
{
    new FieldDescription(SFGeoPTypesPtr::getClassType(), 
                     "types", 
                     TypesFieldId, TypesFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTypes),
    new FieldDescription(SFGeoPLengthsPtr::getClassType(), 
                     "lengths", 
                     LengthsFieldId, LengthsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFLengths),
    new FieldDescription(SFGeoPositionsPtr::getClassType(), 
                     "positions", 
                     PositionsFieldId, PositionsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFPositions),
    new FieldDescription(SFGeoNormalsPtr::getClassType(), 
                     "normals", 
                     NormalsFieldId, NormalsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFNormals),
    new FieldDescription(SFGeoColorsPtr::getClassType(), 
                     "colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFColors),
    new FieldDescription(SFGeoColorsPtr::getClassType(), 
                     "secondaryColors", 
                     SecondaryColorsFieldId, SecondaryColorsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFSecondaryColors),
    new FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords", 
                     TexCoordsFieldId, TexCoordsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords),
    new FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords1", 
                     TexCoords1FieldId, TexCoords1FieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords1),
    new FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords2", 
                     TexCoords2FieldId, TexCoords2FieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords2),
    new FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords3", 
                     TexCoords3FieldId, TexCoords3FieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords3),
    new FieldDescription(SFGeoIndicesPtr::getClassType(), 
                     "indices", 
                     IndicesFieldId, IndicesFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFIndices),
    new FieldDescription(MFUInt16::getClassType(), 
                     "indexMapping", 
                     IndexMappingFieldId, IndexMappingFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getMFIndexMapping),
    new FieldDescription(SFBool::getClassType(), 
                     "dlistCache", 
                     DlistCacheFieldId, DlistCacheFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFDlistCache),
    new FieldDescription(SFInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &GeometryBase::getSFGLId)
};


FieldContainerType GeometryBase::_type(
    "Geometry",
    "MaterialDrawable",
    NULL,
    (PrototypeCreateF) &GeometryBase::createEmpty,
    Geometry::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GeometryBase, GeometryPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeometryBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeometryBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr GeometryBase::shallowCopy(void) const 
{ 
    GeometryPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Geometry *>(this)); 

    return returnValue; 
}

UInt32 GeometryBase::getContainerSize(void) const 
{ 
    return sizeof(Geometry); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void GeometryBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GeometryBase *) &other, whichField);
}
#else
void GeometryBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((GeometryBase *) &other, whichField, sInfo);
}
void GeometryBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

GeometryBase::GeometryBase(void) :
    _sfTypes                  (), 
    _sfLengths                (), 
    _sfPositions              (), 
    _sfNormals                (), 
    _sfColors                 (), 
    _sfSecondaryColors        (), 
    _sfTexCoords              (), 
    _sfTexCoords1             (), 
    _sfTexCoords2             (), 
    _sfTexCoords3             (), 
    _sfIndices                (), 
    _mfIndexMapping           (), 
    _sfDlistCache             (bool(true)), 
    _sfGLId                   (Int32(0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

GeometryBase::GeometryBase(const GeometryBase &source) :
    _sfTypes                  (source._sfTypes                  ), 
    _sfLengths                (source._sfLengths                ), 
    _sfPositions              (source._sfPositions              ), 
    _sfNormals                (source._sfNormals                ), 
    _sfColors                 (source._sfColors                 ), 
    _sfSecondaryColors        (source._sfSecondaryColors        ), 
    _sfTexCoords              (source._sfTexCoords              ), 
    _sfTexCoords1             (source._sfTexCoords1             ), 
    _sfTexCoords2             (source._sfTexCoords2             ), 
    _sfTexCoords3             (source._sfTexCoords3             ), 
    _sfIndices                (source._sfIndices                ), 
    _mfIndexMapping           (source._mfIndexMapping           ), 
    _sfDlistCache             (source._sfDlistCache             ), 
    _sfGLId                   (source._sfGLId                   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

GeometryBase::~GeometryBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GeometryBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        returnValue += _sfTypes.getBinSize();
    }

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
    {
        returnValue += _sfLengths.getBinSize();
    }

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _sfPositions.getBinSize();
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        returnValue += _sfNormals.getBinSize();
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _sfColors.getBinSize();
    }

    if(FieldBits::NoField != (SecondaryColorsFieldMask & whichField))
    {
        returnValue += _sfSecondaryColors.getBinSize();
    }

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        returnValue += _sfTexCoords.getBinSize();
    }

    if(FieldBits::NoField != (TexCoords1FieldMask & whichField))
    {
        returnValue += _sfTexCoords1.getBinSize();
    }

    if(FieldBits::NoField != (TexCoords2FieldMask & whichField))
    {
        returnValue += _sfTexCoords2.getBinSize();
    }

    if(FieldBits::NoField != (TexCoords3FieldMask & whichField))
    {
        returnValue += _sfTexCoords3.getBinSize();
    }

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
    {
        returnValue += _sfIndices.getBinSize();
    }

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
    {
        returnValue += _mfIndexMapping.getBinSize();
    }

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
    {
        returnValue += _sfDlistCache.getBinSize();
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }


    return returnValue;
}

void GeometryBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        _sfTypes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
    {
        _sfLengths.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SecondaryColorsFieldMask & whichField))
    {
        _sfSecondaryColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _sfTexCoords.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords1FieldMask & whichField))
    {
        _sfTexCoords1.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords2FieldMask & whichField))
    {
        _sfTexCoords2.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords3FieldMask & whichField))
    {
        _sfTexCoords3.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
    {
        _sfIndices.copyToBin(pMem);
    }

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
    {
        _mfIndexMapping.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
    {
        _sfDlistCache.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }


}

void GeometryBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        _sfTypes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
    {
        _sfLengths.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SecondaryColorsFieldMask & whichField))
    {
        _sfSecondaryColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _sfTexCoords.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords1FieldMask & whichField))
    {
        _sfTexCoords1.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords2FieldMask & whichField))
    {
        _sfTexCoords2.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TexCoords3FieldMask & whichField))
    {
        _sfTexCoords3.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
    {
        _sfIndices.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
    {
        _mfIndexMapping.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
    {
        _sfDlistCache.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void GeometryBase::executeSyncImpl(      GeometryBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        _sfTypes.syncWith(pOther->_sfTypes);

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
        _sfLengths.syncWith(pOther->_sfLengths);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (SecondaryColorsFieldMask & whichField))
        _sfSecondaryColors.syncWith(pOther->_sfSecondaryColors);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        _sfTexCoords.syncWith(pOther->_sfTexCoords);

    if(FieldBits::NoField != (TexCoords1FieldMask & whichField))
        _sfTexCoords1.syncWith(pOther->_sfTexCoords1);

    if(FieldBits::NoField != (TexCoords2FieldMask & whichField))
        _sfTexCoords2.syncWith(pOther->_sfTexCoords2);

    if(FieldBits::NoField != (TexCoords3FieldMask & whichField))
        _sfTexCoords3.syncWith(pOther->_sfTexCoords3);

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
        _sfIndices.syncWith(pOther->_sfIndices);

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        _mfIndexMapping.syncWith(pOther->_mfIndexMapping);

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
        _sfDlistCache.syncWith(pOther->_sfDlistCache);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);


}
#else
void GeometryBase::executeSyncImpl(      GeometryBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        _sfTypes.syncWith(pOther->_sfTypes);

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
        _sfLengths.syncWith(pOther->_sfLengths);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (SecondaryColorsFieldMask & whichField))
        _sfSecondaryColors.syncWith(pOther->_sfSecondaryColors);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        _sfTexCoords.syncWith(pOther->_sfTexCoords);

    if(FieldBits::NoField != (TexCoords1FieldMask & whichField))
        _sfTexCoords1.syncWith(pOther->_sfTexCoords1);

    if(FieldBits::NoField != (TexCoords2FieldMask & whichField))
        _sfTexCoords2.syncWith(pOther->_sfTexCoords2);

    if(FieldBits::NoField != (TexCoords3FieldMask & whichField))
        _sfTexCoords3.syncWith(pOther->_sfTexCoords3);

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
        _sfIndices.syncWith(pOther->_sfIndices);

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
        _sfDlistCache.syncWith(pOther->_sfDlistCache);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);


    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        _mfIndexMapping.syncWith(pOther->_mfIndexMapping, sInfo);


}

void GeometryBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        _mfIndexMapping.beginEdit(uiAspect, uiContainerSize);

}
#endif



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<GeometryPtr>::_type("GeometryPtr", "MaterialDrawablePtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(GeometryPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(GeometryPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.42 2004/08/03 05:53:03 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGGEOMETRYBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGEOMETRYBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGEOMETRYFIELDS_HEADER_CVSID;
}

