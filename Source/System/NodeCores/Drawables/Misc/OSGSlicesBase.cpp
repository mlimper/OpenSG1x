/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Slices!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESLICESINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSlicesBase.h"
#include "OSGSlices.h"


OSG_USING_NAMESPACE

const OSG::BitVector  SlicesBase::SizeFieldMask = 
    (1 << SlicesBase::SizeFieldId);

const OSG::BitVector  SlicesBase::NumberOfSlicesFieldMask = 
    (1 << SlicesBase::NumberOfSlicesFieldId);



// Field descriptions

/*! \var Vec3f           SlicesBase::_sfSize
    terrain size in local coords
*/
/*! \var Int32           SlicesBase::_sfNumberOfSlices
    
*/

//! Slices description

FieldDescription *SlicesBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "size", 
                     SizeFieldId, SizeFieldMask,
                     false,
                     (FieldAccessMethod) &SlicesBase::getSFSize),
    new FieldDescription(SFInt32::getClassType(), 
                     "numberOfSlices", 
                     NumberOfSlicesFieldId, NumberOfSlicesFieldMask,
                     false,
                     (FieldAccessMethod) &SlicesBase::getSFNumberOfSlices)
};

//! Slices type

FieldContainerType SlicesBase::_type(
    "Slices",
    "MaterialDrawable",
    NULL,
    (PrototypeCreateF) &SlicesBase::createEmpty,
    Slices::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SlicesBase, SlicesPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SlicesBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SlicesBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SlicesBase::shallowCopy(void) const 
{ 
    SlicesPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Slices *>(this)); 

    return returnValue; 
}

UInt32 SlicesBase::getContainerSize(void) const 
{ 
    return sizeof(Slices); 
}


void SlicesBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SlicesBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SlicesBase::SlicesBase(void) :
    _sfSize                   (Vec3f(1, 1, 1)), 
    _sfNumberOfSlices         (Int32(100)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

SlicesBase::SlicesBase(const SlicesBase &source) :
    _sfSize                   (source._sfSize                   ), 
    _sfNumberOfSlices         (source._sfNumberOfSlices         ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

SlicesBase::~SlicesBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SlicesBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    if(FieldBits::NoField != (NumberOfSlicesFieldMask & whichField))
    {
        returnValue += _sfNumberOfSlices.getBinSize();
    }


    return returnValue;
}

void SlicesBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NumberOfSlicesFieldMask & whichField))
    {
        _sfNumberOfSlices.copyToBin(pMem);
    }


}

void SlicesBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NumberOfSlicesFieldMask & whichField))
    {
        _sfNumberOfSlices.copyFromBin(pMem);
    }


}

void SlicesBase::executeSyncImpl(      SlicesBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (NumberOfSlicesFieldMask & whichField))
        _sfNumberOfSlices.syncWith(pOther->_sfNumberOfSlices);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<SlicesPtr>::_type("SlicesPtr", "MaterialDrawablePtr");

OSG_DLLEXPORT_SFIELD_DEF1(SlicesPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SlicesPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.35 2002/09/16 18:39:11 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGSLICESBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSLICESBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSLICESFIELDS_HEADER_CVSID;
}

