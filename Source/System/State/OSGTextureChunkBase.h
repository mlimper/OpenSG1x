/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTURECHUNKBASE_H_
#define _OSGTEXTURECHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>

#include <OSGStateChunk.h> // Parent

#include <OSGImagePFields.h> // Image type
#include <OSGUInt32Fields.h> // InternalFormat type
#include <OSGUInt32Fields.h> // ExternalFormat type
#include <OSGBoolFields.h> // Scale type
#include <OSGUInt32Fields.h> // Frame type
#include <OSGUInt32Fields.h> // MinFilter type
#include <OSGUInt32Fields.h> // MagFilter type
#include <OSGUInt32Fields.h> // WrapS type
#include <OSGUInt32Fields.h> // WrapT type
#include <OSGUInt32Fields.h> // WrapR type
#include <OSGUInt32Fields.h> // EnvMode type
#include <OSGColor4fFields.h> // EnvColor type
#include <OSGUInt32Fields.h> // GLId type

#include <OSGTextureChunkFields.h>

OSG_BEGIN_NAMESPACE

class TextureChunk;
class BinaryDataHandler;

//! \brief TextureChunk Base Class.

class OSG_SYSTEMLIB_DLLMAPPING TextureChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        ImageFieldId          = Inherited::NextFieldId,
        InternalFormatFieldId = ImageFieldId          + 1,
        ExternalFormatFieldId = InternalFormatFieldId + 1,
        ScaleFieldId          = ExternalFormatFieldId + 1,
        FrameFieldId          = ScaleFieldId          + 1,
        MinFilterFieldId      = FrameFieldId          + 1,
        MagFilterFieldId      = MinFilterFieldId      + 1,
        WrapSFieldId          = MagFilterFieldId      + 1,
        WrapTFieldId          = WrapSFieldId          + 1,
        WrapRFieldId          = WrapTFieldId          + 1,
        EnvModeFieldId        = WrapRFieldId          + 1,
        EnvColorFieldId       = EnvModeFieldId        + 1,
        GLIdFieldId           = EnvColorFieldId       + 1,
        NextFieldId           = GLIdFieldId           + 1
    };

    static const osg::BitVector ImageFieldMask;
    static const osg::BitVector InternalFormatFieldMask;
    static const osg::BitVector ExternalFormatFieldMask;
    static const osg::BitVector ScaleFieldMask;
    static const osg::BitVector FrameFieldMask;
    static const osg::BitVector MinFilterFieldMask;
    static const osg::BitVector MagFilterFieldMask;
    static const osg::BitVector WrapSFieldMask;
    static const osg::BitVector WrapTFieldMask;
    static const osg::BitVector WrapRFieldMask;
    static const osg::BitVector EnvModeFieldMask;
    static const osg::BitVector EnvColorFieldMask;
    static const osg::BitVector GLIdFieldMask;


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFImageP            *getSFImage          (void);
           SFUInt32            *getSFInternalFormat (void);
           SFUInt32            *getSFExternalFormat (void);
           SFBool              *getSFScale          (void);
           SFUInt32            *getSFFrame          (void);
           SFUInt32            *getSFMinFilter      (void);
           SFUInt32            *getSFMagFilter      (void);
           SFUInt32            *getSFWrapS          (void);
           SFUInt32            *getSFWrapT          (void);
           SFUInt32            *getSFWrapR          (void);
           SFUInt32            *getSFEnvMode        (void);
           SFColor4f           *getSFEnvColor       (void);
           SFUInt32            *getSFGLId           (void);

           ImageP              &getImage          (void);
     const ImageP              &getImage          (void) const;
           UInt32              &getInternalFormat (void);
     const UInt32              &getInternalFormat (void) const;
           UInt32              &getExternalFormat (void);
     const UInt32              &getExternalFormat (void) const;
           bool                &getScale          (void);
     const bool                &getScale          (void) const;
           UInt32              &getFrame          (void);
     const UInt32              &getFrame          (void) const;
           UInt32              &getMinFilter      (void);
     const UInt32              &getMinFilter      (void) const;
           UInt32              &getMagFilter      (void);
     const UInt32              &getMagFilter      (void) const;
           UInt32              &getWrapS          (void);
     const UInt32              &getWrapS          (void) const;
           UInt32              &getWrapT          (void);
     const UInt32              &getWrapT          (void) const;
           UInt32              &getWrapR          (void);
     const UInt32              &getWrapR          (void) const;
           UInt32              &getEnvMode        (void);
     const UInt32              &getEnvMode        (void) const;
           Color4f             &getEnvColor       (void);
     const Color4f             &getEnvColor       (void) const;
           UInt32              &getGLId           (void);
     const UInt32              &getGLId           (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setImage          ( const ImageP &value );
     void setInternalFormat ( const UInt32 &value );
     void setExternalFormat ( const UInt32 &value );
     void setScale          ( const bool &value );
     void setFrame          ( const UInt32 &value );
     void setMinFilter      ( const UInt32 &value );
     void setMagFilter      ( const UInt32 &value );
     void setWrapS          ( const UInt32 &value );
     void setWrapT          ( const UInt32 &value );
     void setWrapR          ( const UInt32 &value );
     void setEnvMode        ( const UInt32 &value );
     void setEnvColor       ( const Color4f &value );
     void setGLId           ( const UInt32 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TextureChunkPtr      create          (void); 
    static  TextureChunkPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFImageP            _sfImage;
    SFUInt32            _sfInternalFormat;
    SFUInt32            _sfExternalFormat;
    SFBool              _sfScale;
    SFUInt32            _sfFrame;
    SFUInt32            _sfMinFilter;
    SFUInt32            _sfMagFilter;
    SFUInt32            _sfWrapS;
    SFUInt32            _sfWrapT;
    SFUInt32            _sfWrapR;
    SFUInt32            _sfEnvMode;
    SFColor4f           _sfEnvColor;
    SFUInt32            _sfGLId;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextureChunkBase(void);
    TextureChunkBase(const TextureChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextureChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      TextureChunkBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextureChunkBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef TextureChunkBase *TextureChunkBaseP;

OSG_END_NAMESPACE

#define OSGTEXTURECHUNKBASE_HEADER_CVSID "@(#)$Id: $"

#endif /* _OSGTEXTURECHUNKBASE_H_ */
