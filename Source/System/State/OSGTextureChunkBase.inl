/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureChunkBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 TextureChunkBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
TextureChunkPtr TextureChunkBase::create(void) 
{
    TextureChunkPtr fc; 

    if(getClassType().getPrototype() != OSG::NullFC) 
    {
        fc = TextureChunkPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
TextureChunkPtr TextureChunkBase::createEmpty(void) 
{ 
    TextureChunkPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

//! Get the TextureChunk::_sfImage field.
inline
SFImageP *TextureChunkBase::getSFImage(void)
{
    return &_sfImage;
}

//! Get the TextureChunk::_sfInternalFormat field.
inline
SFUInt32 *TextureChunkBase::getSFInternalFormat(void)
{
    return &_sfInternalFormat;
}

//! Get the TextureChunk::_sfExternalFormat field.
inline
SFUInt32 *TextureChunkBase::getSFExternalFormat(void)
{
    return &_sfExternalFormat;
}

//! Get the TextureChunk::_sfScale field.
inline
SFBool *TextureChunkBase::getSFScale(void)
{
    return &_sfScale;
}

//! Get the TextureChunk::_sfFrame field.
inline
SFUInt32 *TextureChunkBase::getSFFrame(void)
{
    return &_sfFrame;
}

//! Get the TextureChunk::_sfMinFilter field.
inline
SFUInt32 *TextureChunkBase::getSFMinFilter(void)
{
    return &_sfMinFilter;
}

//! Get the TextureChunk::_sfMagFilter field.
inline
SFUInt32 *TextureChunkBase::getSFMagFilter(void)
{
    return &_sfMagFilter;
}

//! Get the TextureChunk::_sfWrapS field.
inline
SFUInt32 *TextureChunkBase::getSFWrapS(void)
{
    return &_sfWrapS;
}

//! Get the TextureChunk::_sfWrapT field.
inline
SFUInt32 *TextureChunkBase::getSFWrapT(void)
{
    return &_sfWrapT;
}

//! Get the TextureChunk::_sfWrapR field.
inline
SFUInt32 *TextureChunkBase::getSFWrapR(void)
{
    return &_sfWrapR;
}

//! Get the TextureChunk::_sfEnvMode field.
inline
SFUInt32 *TextureChunkBase::getSFEnvMode(void)
{
    return &_sfEnvMode;
}

//! Get the TextureChunk::_sfEnvColor field.
inline
SFColor4f *TextureChunkBase::getSFEnvColor(void)
{
    return &_sfEnvColor;
}

//! Get the TextureChunk::_sfGLId field.
inline
SFUInt32 *TextureChunkBase::getSFGLId(void)
{
    return &_sfGLId;
}


//! Get the value of the TextureChunk::_sfImage field.
inline
ImageP &TextureChunkBase::getImage(void)
{
    return _sfImage.getValue();
}

//! Get the value of the TextureChunk::_sfImage field.
inline
const ImageP &TextureChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

//! Set the value of the TextureChunk::_sfImage field.
inline
void TextureChunkBase::setImage(const ImageP &value)
{
    _sfImage.setValue(value);
}

//! Get the value of the TextureChunk::_sfInternalFormat field.
inline
UInt32 &TextureChunkBase::getInternalFormat(void)
{
    return _sfInternalFormat.getValue();
}

//! Get the value of the TextureChunk::_sfInternalFormat field.
inline
const UInt32 &TextureChunkBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

//! Set the value of the TextureChunk::_sfInternalFormat field.
inline
void TextureChunkBase::setInternalFormat(const UInt32 &value)
{
    _sfInternalFormat.setValue(value);
}

//! Get the value of the TextureChunk::_sfExternalFormat field.
inline
UInt32 &TextureChunkBase::getExternalFormat(void)
{
    return _sfExternalFormat.getValue();
}

//! Get the value of the TextureChunk::_sfExternalFormat field.
inline
const UInt32 &TextureChunkBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

//! Set the value of the TextureChunk::_sfExternalFormat field.
inline
void TextureChunkBase::setExternalFormat(const UInt32 &value)
{
    _sfExternalFormat.setValue(value);
}

//! Get the value of the TextureChunk::_sfScale field.
inline
bool &TextureChunkBase::getScale(void)
{
    return _sfScale.getValue();
}

//! Get the value of the TextureChunk::_sfScale field.
inline
const bool &TextureChunkBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the TextureChunk::_sfScale field.
inline
void TextureChunkBase::setScale(const bool &value)
{
    _sfScale.setValue(value);
}

//! Get the value of the TextureChunk::_sfFrame field.
inline
UInt32 &TextureChunkBase::getFrame(void)
{
    return _sfFrame.getValue();
}

//! Get the value of the TextureChunk::_sfFrame field.
inline
const UInt32 &TextureChunkBase::getFrame(void) const
{
    return _sfFrame.getValue();
}

//! Set the value of the TextureChunk::_sfFrame field.
inline
void TextureChunkBase::setFrame(const UInt32 &value)
{
    _sfFrame.setValue(value);
}

//! Get the value of the TextureChunk::_sfMinFilter field.
inline
UInt32 &TextureChunkBase::getMinFilter(void)
{
    return _sfMinFilter.getValue();
}

//! Get the value of the TextureChunk::_sfMinFilter field.
inline
const UInt32 &TextureChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

//! Set the value of the TextureChunk::_sfMinFilter field.
inline
void TextureChunkBase::setMinFilter(const UInt32 &value)
{
    _sfMinFilter.setValue(value);
}

//! Get the value of the TextureChunk::_sfMagFilter field.
inline
UInt32 &TextureChunkBase::getMagFilter(void)
{
    return _sfMagFilter.getValue();
}

//! Get the value of the TextureChunk::_sfMagFilter field.
inline
const UInt32 &TextureChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

//! Set the value of the TextureChunk::_sfMagFilter field.
inline
void TextureChunkBase::setMagFilter(const UInt32 &value)
{
    _sfMagFilter.setValue(value);
}

//! Get the value of the TextureChunk::_sfWrapS field.
inline
UInt32 &TextureChunkBase::getWrapS(void)
{
    return _sfWrapS.getValue();
}

//! Get the value of the TextureChunk::_sfWrapS field.
inline
const UInt32 &TextureChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

//! Set the value of the TextureChunk::_sfWrapS field.
inline
void TextureChunkBase::setWrapS(const UInt32 &value)
{
    _sfWrapS.setValue(value);
}

//! Get the value of the TextureChunk::_sfWrapT field.
inline
UInt32 &TextureChunkBase::getWrapT(void)
{
    return _sfWrapT.getValue();
}

//! Get the value of the TextureChunk::_sfWrapT field.
inline
const UInt32 &TextureChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

//! Set the value of the TextureChunk::_sfWrapT field.
inline
void TextureChunkBase::setWrapT(const UInt32 &value)
{
    _sfWrapT.setValue(value);
}

//! Get the value of the TextureChunk::_sfWrapR field.
inline
UInt32 &TextureChunkBase::getWrapR(void)
{
    return _sfWrapR.getValue();
}

//! Get the value of the TextureChunk::_sfWrapR field.
inline
const UInt32 &TextureChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

//! Set the value of the TextureChunk::_sfWrapR field.
inline
void TextureChunkBase::setWrapR(const UInt32 &value)
{
    _sfWrapR.setValue(value);
}

//! Get the value of the TextureChunk::_sfEnvMode field.
inline
UInt32 &TextureChunkBase::getEnvMode(void)
{
    return _sfEnvMode.getValue();
}

//! Get the value of the TextureChunk::_sfEnvMode field.
inline
const UInt32 &TextureChunkBase::getEnvMode(void) const
{
    return _sfEnvMode.getValue();
}

//! Set the value of the TextureChunk::_sfEnvMode field.
inline
void TextureChunkBase::setEnvMode(const UInt32 &value)
{
    _sfEnvMode.setValue(value);
}

//! Get the value of the TextureChunk::_sfEnvColor field.
inline
Color4f &TextureChunkBase::getEnvColor(void)
{
    return _sfEnvColor.getValue();
}

//! Get the value of the TextureChunk::_sfEnvColor field.
inline
const Color4f &TextureChunkBase::getEnvColor(void) const
{
    return _sfEnvColor.getValue();
}

//! Set the value of the TextureChunk::_sfEnvColor field.
inline
void TextureChunkBase::setEnvColor(const Color4f &value)
{
    _sfEnvColor.setValue(value);
}

//! Get the value of the TextureChunk::_sfGLId field.
inline
UInt32 &TextureChunkBase::getGLId(void)
{
    return _sfGLId.getValue();
}

//! Get the value of the TextureChunk::_sfGLId field.
inline
const UInt32 &TextureChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

//! Set the value of the TextureChunk::_sfGLId field.
inline
void TextureChunkBase::setGLId(const UInt32 &value)
{
    _sfGLId.setValue(value);
}


OSG_END_NAMESPACE

#define OSGTEXTURECHUNKBASE_INLINE_CVSID "@(#)$Id: $"

