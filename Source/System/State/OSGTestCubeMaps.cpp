/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000-2002 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/


#include <OSGConfig.h>

#include <OSGImage.h>
#include <OSGTestCubeMaps.h>


/*! 

The textures for CubeMap reflection testing plus a function to set the images.

*/


OSG_USING_NAMESPACE

static unsigned char TestCubeFrontData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
};

static unsigned char TestCubeBackData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 0, 0, 0, 
0, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
};

static unsigned char TestCubeLeftData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
0, 0, 255, 0, 0, 255, 0, 0, 
255, 0, 0, 255, 0, 0, 255, 0, 
0, 255, 0, 0, 255, 0, 0, 255, 
};

static unsigned char TestCubeRightData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 255, 255, 0, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 0, 255, 255, 0, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 0, 0, 0, 0, 0, 
0, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 0, 0, 0, 0, 0, 
0, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
0, 0, 0, 0, 0, 0, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 0, 0, 
0, 0, 0, 0, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 0, 0, 
0, 0, 0, 0, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 0, 0, 0, 0, 
0, 0, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 0, 0, 
0, 0, 0, 0, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
};

static unsigned char TestCubeUpData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
};

static unsigned char TestCubeDownData[800] = {
77, 84, 68, 0, 40, 53, 246, 64, 
25, 7, 0, 16, 0, 16, 0, 1, 
0, 1, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 0, 0, 0, 0, 0, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 0, 0, 0, 
0, 0, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
0, 255, 255, 0, 255, 255, 0, 255, 
255, 0, 255, 255, 0, 255, 255, 0, 
255, 255, 0, 255, 255, 0, 255, 255, 
};

void OSG::setTestCubeImages( CubeTextureChunkPtr chunk )
{
    ImagePtr img;
    
    beginEditCP(chunk);
    
    img = Image::create();
    img->restore(TestCubeFrontData, sizeof(TestCubeFrontData));
    chunk->setImage(img);
    
    img = Image::create();
    img->restore(TestCubeBackData, sizeof(TestCubeBackData));
    chunk->setPosZImage(img);
       
    img = Image::create();
    img->restore(TestCubeLeftData, sizeof(TestCubeLeftData));
    chunk->setNegXImage(img);
    
    img = Image::create();
    img->restore(TestCubeRightData, sizeof(TestCubeRightData));
    chunk->setPosXImage(img);
       
    img = Image::create();
    img->restore(TestCubeDownData, sizeof(TestCubeDownData));
    chunk->setNegYImage(img);
    
    img = Image::create();
    img->restore(TestCubeUpData, sizeof(TestCubeUpData));
    chunk->setPosYImage(img);
    
    endEditCP(chunk);
}
