/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGREGISTERCOMBINERSCHUNKBASE_H_
#define _OSGREGISTERCOMBINERSCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>

#include <OSGStateChunk.h> // Parent

#include <OSGColor4fFields.h> // Color0 type
#include <OSGColor4fFields.h> // Color1 type
#include <OSGBoolFields.h> // ColorSumClamp type
#include <OSGUInt32Fields.h> // VariableArgb type
#include <OSGUInt32Fields.h> // VariableBrgb type
#include <OSGUInt32Fields.h> // VariableCrgb type
#include <OSGUInt32Fields.h> // VariableDrgb type
#include <OSGUInt32Fields.h> // VariableAalpha type
#include <OSGUInt32Fields.h> // VariableBalpha type
#include <OSGUInt32Fields.h> // VariableCalpha type
#include <OSGUInt32Fields.h> // VariableDalpha type
#include <OSGUInt32Fields.h> // OutputABrgb type
#include <OSGUInt32Fields.h> // OutputCDrgb type
#include <OSGUInt32Fields.h> // OutputSumrgb type
#include <OSGUInt32Fields.h> // Scalergb type
#include <OSGUInt32Fields.h> // Biasrgb type
#include <OSGUInt32Fields.h> // OutputABalpha type
#include <OSGUInt32Fields.h> // OutputCDalpha type
#include <OSGUInt32Fields.h> // OutputSumalpha type
#include <OSGUInt8Fields.h> // DotABrgb type
#include <OSGUInt8Fields.h> // DotCDrgb type
#include <OSGUInt8Fields.h> // MuxSumrgb type
#include <OSGUInt32Fields.h> // Scalealpha type
#include <OSGUInt32Fields.h> // Biasalpha type
#include <OSGUInt8Fields.h> // MuxSumalpha type
#include <OSGUInt32Fields.h> // VariableE type
#include <OSGUInt32Fields.h> // VariableF type
#include <OSGUInt32Fields.h> // VariableG type
#include <OSGColor4fFields.h> // CombinerColor0 type
#include <OSGColor4fFields.h> // CombinerColor1 type
#include <OSGUInt8Fields.h> // PerStageConstants type

#include <OSGRegisterCombinersChunkFields.h>

OSG_BEGIN_NAMESPACE

class RegisterCombinersChunk;
class BinaryDataHandler;

//! \brief RegisterCombinersChunk Base Class.

class OSG_SYSTEMLIB_DLLMAPPING RegisterCombinersChunkBase : public StateChunk
{
  private:

    typedef StateChunk Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        Color0FieldId            = Inherited::NextFieldId,
        Color1FieldId            = Color0FieldId            + 1,
        ColorSumClampFieldId     = Color1FieldId            + 1,
        VariableArgbFieldId      = ColorSumClampFieldId     + 1,
        VariableBrgbFieldId      = VariableArgbFieldId      + 1,
        VariableCrgbFieldId      = VariableBrgbFieldId      + 1,
        VariableDrgbFieldId      = VariableCrgbFieldId      + 1,
        VariableAalphaFieldId    = VariableDrgbFieldId      + 1,
        VariableBalphaFieldId    = VariableAalphaFieldId    + 1,
        VariableCalphaFieldId    = VariableBalphaFieldId    + 1,
        VariableDalphaFieldId    = VariableCalphaFieldId    + 1,
        OutputABrgbFieldId       = VariableDalphaFieldId    + 1,
        OutputCDrgbFieldId       = OutputABrgbFieldId       + 1,
        OutputSumrgbFieldId      = OutputCDrgbFieldId       + 1,
        ScalergbFieldId          = OutputSumrgbFieldId      + 1,
        BiasrgbFieldId           = ScalergbFieldId          + 1,
        OutputABalphaFieldId     = BiasrgbFieldId           + 1,
        OutputCDalphaFieldId     = OutputABalphaFieldId     + 1,
        OutputSumalphaFieldId    = OutputCDalphaFieldId     + 1,
        DotABrgbFieldId          = OutputSumalphaFieldId    + 1,
        DotCDrgbFieldId          = DotABrgbFieldId          + 1,
        MuxSumrgbFieldId         = DotCDrgbFieldId          + 1,
        ScalealphaFieldId        = MuxSumrgbFieldId         + 1,
        BiasalphaFieldId         = ScalealphaFieldId        + 1,
        MuxSumalphaFieldId       = BiasalphaFieldId         + 1,
        VariableEFieldId         = MuxSumalphaFieldId       + 1,
        VariableFFieldId         = VariableEFieldId         + 1,
        VariableGFieldId         = VariableFFieldId         + 1,
        CombinerColor0FieldId    = VariableGFieldId         + 1,
        CombinerColor1FieldId    = CombinerColor0FieldId    + 1,
        PerStageConstantsFieldId = CombinerColor1FieldId    + 1,
        NextFieldId              = PerStageConstantsFieldId + 1
    };

    static const OSG::BitVector Color0FieldMask;
    static const OSG::BitVector Color1FieldMask;
    static const OSG::BitVector ColorSumClampFieldMask;
    static const OSG::BitVector VariableArgbFieldMask;
    static const OSG::BitVector VariableBrgbFieldMask;
    static const OSG::BitVector VariableCrgbFieldMask;
    static const OSG::BitVector VariableDrgbFieldMask;
    static const OSG::BitVector VariableAalphaFieldMask;
    static const OSG::BitVector VariableBalphaFieldMask;
    static const OSG::BitVector VariableCalphaFieldMask;
    static const OSG::BitVector VariableDalphaFieldMask;
    static const OSG::BitVector OutputABrgbFieldMask;
    static const OSG::BitVector OutputCDrgbFieldMask;
    static const OSG::BitVector OutputSumrgbFieldMask;
    static const OSG::BitVector ScalergbFieldMask;
    static const OSG::BitVector BiasrgbFieldMask;
    static const OSG::BitVector OutputABalphaFieldMask;
    static const OSG::BitVector OutputCDalphaFieldMask;
    static const OSG::BitVector OutputSumalphaFieldMask;
    static const OSG::BitVector DotABrgbFieldMask;
    static const OSG::BitVector DotCDrgbFieldMask;
    static const OSG::BitVector MuxSumrgbFieldMask;
    static const OSG::BitVector ScalealphaFieldMask;
    static const OSG::BitVector BiasalphaFieldMask;
    static const OSG::BitVector MuxSumalphaFieldMask;
    static const OSG::BitVector VariableEFieldMask;
    static const OSG::BitVector VariableFFieldMask;
    static const OSG::BitVector VariableGFieldMask;
    static const OSG::BitVector CombinerColor0FieldMask;
    static const OSG::BitVector CombinerColor1FieldMask;
    static const OSG::BitVector PerStageConstantsFieldMask;


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFColor4f           *getSFColor0         (void);
           SFColor4f           *getSFColor1         (void);
           SFBool              *getSFColorSumClamp  (void);
           MFUInt32            *getMFVariableArgb   (void);
           MFUInt32            *getMFVariableBrgb   (void);
           MFUInt32            *getMFVariableCrgb   (void);
           MFUInt32            *getMFVariableDrgb   (void);
           MFUInt32            *getMFVariableAalpha (void);
           MFUInt32            *getMFVariableBalpha (void);
           MFUInt32            *getMFVariableCalpha (void);
           MFUInt32            *getMFVariableDalpha (void);
           MFUInt32            *getMFOutputABrgb    (void);
           MFUInt32            *getMFOutputCDrgb    (void);
           MFUInt32            *getMFOutputSumrgb   (void);
           MFUInt32            *getMFScalergb       (void);
           MFUInt32            *getMFBiasrgb        (void);
           MFUInt32            *getMFOutputABalpha  (void);
           MFUInt32            *getMFOutputCDalpha  (void);
           MFUInt32            *getMFOutputSumalpha (void);
           MFUInt8             *getMFDotABrgb       (void);
           MFUInt8             *getMFDotCDrgb       (void);
           MFUInt8             *getMFMuxSumrgb      (void);
           MFUInt32            *getMFScalealpha     (void);
           MFUInt32            *getMFBiasalpha      (void);
           MFUInt8             *getMFMuxSumalpha    (void);
           MFUInt32            *getMFVariableE      (void);
           MFUInt32            *getMFVariableF      (void);
           MFUInt32            *getMFVariableG      (void);
           MFColor4f           *getMFCombinerColor0 (void);
           MFColor4f           *getMFCombinerColor1 (void);
           SFUInt8             *getSFPerStageConstants(void);

           Color4f             &getColor0         (void);
     const Color4f             &getColor0         (void) const;
           Color4f             &getColor1         (void);
     const Color4f             &getColor1         (void) const;
           bool                &getColorSumClamp  (void);
     const bool                &getColorSumClamp  (void) const;
           UInt8               &getPerStageConstants(void);
     const UInt8               &getPerStageConstants(void) const;
           UInt32              &getVariableArgb   (const UInt32 index);
           MFUInt32            &getVariableArgb   (void);
     const MFUInt32            &getVariableArgb   (void) const;
           UInt32              &getVariableBrgb   (const UInt32 index);
           MFUInt32            &getVariableBrgb   (void);
     const MFUInt32            &getVariableBrgb   (void) const;
           UInt32              &getVariableCrgb   (const UInt32 index);
           MFUInt32            &getVariableCrgb   (void);
     const MFUInt32            &getVariableCrgb   (void) const;
           UInt32              &getVariableDrgb   (const UInt32 index);
           MFUInt32            &getVariableDrgb   (void);
     const MFUInt32            &getVariableDrgb   (void) const;
           UInt32              &getVariableAalpha (const UInt32 index);
           MFUInt32            &getVariableAalpha (void);
     const MFUInt32            &getVariableAalpha (void) const;
           UInt32              &getVariableBalpha (const UInt32 index);
           MFUInt32            &getVariableBalpha (void);
     const MFUInt32            &getVariableBalpha (void) const;
           UInt32              &getVariableCalpha (const UInt32 index);
           MFUInt32            &getVariableCalpha (void);
     const MFUInt32            &getVariableCalpha (void) const;
           UInt32              &getVariableDalpha (const UInt32 index);
           MFUInt32            &getVariableDalpha (void);
     const MFUInt32            &getVariableDalpha (void) const;
           UInt32              &getOutputABrgb    (const UInt32 index);
           MFUInt32            &getOutputABrgb    (void);
     const MFUInt32            &getOutputABrgb    (void) const;
           UInt32              &getOutputCDrgb    (const UInt32 index);
           MFUInt32            &getOutputCDrgb    (void);
     const MFUInt32            &getOutputCDrgb    (void) const;
           UInt32              &getOutputSumrgb   (const UInt32 index);
           MFUInt32            &getOutputSumrgb   (void);
     const MFUInt32            &getOutputSumrgb   (void) const;
           UInt32              &getScalergb       (const UInt32 index);
           MFUInt32            &getScalergb       (void);
     const MFUInt32            &getScalergb       (void) const;
           UInt32              &getBiasrgb        (const UInt32 index);
           MFUInt32            &getBiasrgb        (void);
     const MFUInt32            &getBiasrgb        (void) const;
           UInt32              &getOutputABalpha  (const UInt32 index);
           MFUInt32            &getOutputABalpha  (void);
     const MFUInt32            &getOutputABalpha  (void) const;
           UInt32              &getOutputCDalpha  (const UInt32 index);
           MFUInt32            &getOutputCDalpha  (void);
     const MFUInt32            &getOutputCDalpha  (void) const;
           UInt32              &getOutputSumalpha (const UInt32 index);
           MFUInt32            &getOutputSumalpha (void);
     const MFUInt32            &getOutputSumalpha (void) const;
           UInt8               &getDotABrgb       (const UInt32 index);
           MFUInt8             &getDotABrgb       (void);
     const MFUInt8             &getDotABrgb       (void) const;
           UInt8               &getDotCDrgb       (const UInt32 index);
           MFUInt8             &getDotCDrgb       (void);
     const MFUInt8             &getDotCDrgb       (void) const;
           UInt8               &getMuxSumrgb      (const UInt32 index);
           MFUInt8             &getMuxSumrgb      (void);
     const MFUInt8             &getMuxSumrgb      (void) const;
           UInt32              &getScalealpha     (const UInt32 index);
           MFUInt32            &getScalealpha     (void);
     const MFUInt32            &getScalealpha     (void) const;
           UInt32              &getBiasalpha      (const UInt32 index);
           MFUInt32            &getBiasalpha      (void);
     const MFUInt32            &getBiasalpha      (void) const;
           UInt8               &getMuxSumalpha    (const UInt32 index);
           MFUInt8             &getMuxSumalpha    (void);
     const MFUInt8             &getMuxSumalpha    (void) const;
           UInt32              &getVariableE      (const UInt32 index);
           MFUInt32            &getVariableE      (void);
     const MFUInt32            &getVariableE      (void) const;
           UInt32              &getVariableF      (const UInt32 index);
           MFUInt32            &getVariableF      (void);
     const MFUInt32            &getVariableF      (void) const;
           UInt32              &getVariableG      (const UInt32 index);
           MFUInt32            &getVariableG      (void);
     const MFUInt32            &getVariableG      (void) const;
           Color4f             &getCombinerColor0 (const UInt32 index);
           MFColor4f           &getCombinerColor0 (void);
     const MFColor4f           &getCombinerColor0 (void) const;
           Color4f             &getCombinerColor1 (const UInt32 index);
           MFColor4f           &getCombinerColor1 (void);
     const MFColor4f           &getCombinerColor1 (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setColor0         ( const Color4f &value );
     void setColor1         ( const Color4f &value );
     void setColorSumClamp  ( const bool &value );
     void setPerStageConstants( const UInt8 &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  RegisterCombinersChunkPtr      create          (void); 
    static  RegisterCombinersChunkPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor4f           _sfColor0;
    SFColor4f           _sfColor1;
    SFBool              _sfColorSumClamp;
    MFUInt32            _mfVariableArgb;
    MFUInt32            _mfVariableBrgb;
    MFUInt32            _mfVariableCrgb;
    MFUInt32            _mfVariableDrgb;
    MFUInt32            _mfVariableAalpha;
    MFUInt32            _mfVariableBalpha;
    MFUInt32            _mfVariableCalpha;
    MFUInt32            _mfVariableDalpha;
    MFUInt32            _mfOutputABrgb;
    MFUInt32            _mfOutputCDrgb;
    MFUInt32            _mfOutputSumrgb;
    MFUInt32            _mfScalergb;
    MFUInt32            _mfBiasrgb;
    MFUInt32            _mfOutputABalpha;
    MFUInt32            _mfOutputCDalpha;
    MFUInt32            _mfOutputSumalpha;
    MFUInt8             _mfDotABrgb;
    MFUInt8             _mfDotCDrgb;
    MFUInt8             _mfMuxSumrgb;
    MFUInt32            _mfScalealpha;
    MFUInt32            _mfBiasalpha;
    MFUInt8             _mfMuxSumalpha;
    MFUInt32            _mfVariableE;
    MFUInt32            _mfVariableF;
    MFUInt32            _mfVariableG;
    MFColor4f           _mfCombinerColor0;
    MFColor4f           _mfCombinerColor1;
    SFUInt8             _sfPerStageConstants;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    RegisterCombinersChunkBase(void);
    RegisterCombinersChunkBase(const RegisterCombinersChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~RegisterCombinersChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      RegisterCombinersChunkBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const RegisterCombinersChunkBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef RegisterCombinersChunkBase *RegisterCombinersChunkBaseP;

OSG_END_NAMESPACE

#define OSGREGISTERCOMBINERSCHUNKBASE_HEADER_CVSID "@(#)$Id: $"

#endif /* _OSGREGISTERCOMBINERSCHUNKBASE_H_ */
