/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESIMPLESTATISTICSFOREGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSimpleStatisticsForegroundBase.h"
#include "OSGSimpleStatisticsForeground.h"


OSG_USING_NAMESPACE

const OSG::BitVector  SimpleStatisticsForegroundBase::FormatsFieldMask = 
    (1 << SimpleStatisticsForegroundBase::FormatsFieldId);

const OSG::BitVector  SimpleStatisticsForegroundBase::SizeFieldMask = 
    (1 << SimpleStatisticsForegroundBase::SizeFieldId);

const OSG::BitVector  SimpleStatisticsForegroundBase::ColorFieldMask = 
    (1 << SimpleStatisticsForegroundBase::ColorFieldId);



// Field descriptions

/*! \var std::string     SimpleStatisticsForegroundBase::_mfFormats
    The format strings for the given StatElemDesc IDs. If not set, name and value are used.
*/
/*! \var Real32          SimpleStatisticsForegroundBase::_sfSize
    Height of a single line, in  pixel.
*/
/*! \var Color4f         SimpleStatisticsForegroundBase::_sfColor
    Color of the text.
*/

//! SimpleStatisticsForeground description

FieldDescription *SimpleStatisticsForegroundBase::_desc[] = 
{
    new FieldDescription(MFString::getClassType(), 
                     "formats", 
                     FormatsFieldId, FormatsFieldMask,
                     false,
                     (FieldAccessMethod) &SimpleStatisticsForegroundBase::getMFFormats),
    new FieldDescription(SFReal32::getClassType(), 
                     "size", 
                     SizeFieldId, SizeFieldMask,
                     false,
                     (FieldAccessMethod) &SimpleStatisticsForegroundBase::getSFSize),
    new FieldDescription(SFColor4f::getClassType(), 
                     "color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &SimpleStatisticsForegroundBase::getSFColor)
};


FieldContainerType SimpleStatisticsForegroundBase::_type(
    "SimpleStatisticsForeground",
    "StatisticsForeground",
    NULL,
    (PrototypeCreateF) &SimpleStatisticsForegroundBase::createEmpty,
    SimpleStatisticsForeground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SimpleStatisticsForegroundBase, SimpleStatisticsForegroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleStatisticsForegroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SimpleStatisticsForegroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SimpleStatisticsForegroundBase::shallowCopy(void) const 
{ 
    SimpleStatisticsForegroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SimpleStatisticsForeground *>(this)); 

    return returnValue; 
}

UInt32 SimpleStatisticsForegroundBase::getContainerSize(void) const 
{ 
    return sizeof(SimpleStatisticsForeground); 
}


void SimpleStatisticsForegroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SimpleStatisticsForegroundBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(void) :
    _mfFormats                (), 
    _sfSize                   (Real32(25)), 
    _sfColor                  (Color4f(1,1,1,1)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(const SimpleStatisticsForegroundBase &source) :
    _mfFormats                (source._mfFormats                ), 
    _sfSize                   (source._sfSize                   ), 
    _sfColor                  (source._sfColor                  ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SimpleStatisticsForegroundBase::~SimpleStatisticsForegroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SimpleStatisticsForegroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        returnValue += _mfFormats.getBinSize();
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }


    return returnValue;
}

void SimpleStatisticsForegroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }


}

void SimpleStatisticsForegroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }


}

void SimpleStatisticsForegroundBase::executeSyncImpl(      SimpleStatisticsForegroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
        _mfFormats.syncWith(pOther->_mfFormats);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
        _sfSize.syncWith(pOther->_sfSize);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pOther->_sfColor);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SimpleStatisticsForegroundPtr>::_type("SimpleStatisticsForegroundPtr", "StatisticsForegroundPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(SimpleStatisticsForegroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(SimpleStatisticsForegroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGSIMPLESTATISTICSFOREGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSIMPLESTATISTICSFOREGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSIMPLESTATISTICSFOREGROUNDFIELDS_HEADER_CVSID;
}

