/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Image
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGIMAGEBASE_H_
#define _OSGIMAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>

#include <OSGAttachmentContainer.h> // Parent

#include <OSGFieldContainerFields.h> // Parents type
#include <OSGInt32Fields.h> // Dimension type
#include <OSGInt32Fields.h> // Width type
#include <OSGInt32Fields.h> // Height type
#include <OSGInt32Fields.h> // Depth type
#include <OSGInt32Fields.h> // Bpp type
#include <OSGInt32Fields.h> // MipMapCount type
#include <OSGInt32Fields.h> // FrameCount type
#include <OSGTimeFields.h> // FrameDelay type
#include <OSGUInt32Fields.h> // PixelFormat type
#include <OSGUInt8Fields.h> // Pixel type
#include <OSGInt32Fields.h> // FrameSize type
#include <OSGStringFields.h> // Name type

#include <OSGImageFields.h>

OSG_BEGIN_NAMESPACE

class Image;
class BinaryDataHandler;

//! \brief Image Base Class.

class OSG_SYSTEMLIB_DLLMAPPING ImageBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer    Inherited;
    typedef ImagePtr  Ptr;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        ParentsFieldId     = Inherited::NextFieldId,
        DimensionFieldId   = ParentsFieldId     + 1,
        WidthFieldId       = DimensionFieldId   + 1,
        HeightFieldId      = WidthFieldId       + 1,
        DepthFieldId       = HeightFieldId      + 1,
        BppFieldId         = DepthFieldId       + 1,
        MipMapCountFieldId = BppFieldId         + 1,
        FrameCountFieldId  = MipMapCountFieldId + 1,
        FrameDelayFieldId  = FrameCountFieldId  + 1,
        PixelFormatFieldId = FrameDelayFieldId  + 1,
        PixelFieldId       = PixelFormatFieldId + 1,
        FrameSizeFieldId   = PixelFieldId       + 1,
        NameFieldId        = FrameSizeFieldId   + 1,
        NextFieldId        = NameFieldId        + 1
    };

    static const OSG::BitVector ParentsFieldMask;
    static const OSG::BitVector DimensionFieldMask;
    static const OSG::BitVector WidthFieldMask;
    static const OSG::BitVector HeightFieldMask;
    static const OSG::BitVector DepthFieldMask;
    static const OSG::BitVector BppFieldMask;
    static const OSG::BitVector MipMapCountFieldMask;
    static const OSG::BitVector FrameCountFieldMask;
    static const OSG::BitVector FrameDelayFieldMask;
    static const OSG::BitVector PixelFormatFieldMask;
    static const OSG::BitVector PixelFieldMask;
    static const OSG::BitVector FrameSizeFieldMask;
    static const OSG::BitVector NameFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           MFFieldContainerPtr *getMFParents        (void);
           SFInt32             *getSFDimension      (void);
           SFInt32             *getSFWidth          (void);
           SFInt32             *getSFHeight         (void);
           SFInt32             *getSFDepth          (void);
           SFInt32             *getSFBpp            (void);
           SFInt32             *getSFMipMapCount    (void);
           SFInt32             *getSFFrameCount     (void);
           SFTime              *getSFFrameDelay     (void);
           SFUInt32            *getSFPixelFormat    (void);
           MFUInt8             *getMFPixel          (void);
           SFInt32             *getSFFrameSize      (void);
           SFString            *getSFName           (void);

           Int32               &getDimension      (void);
     const Int32               &getDimension      (void) const;
           Int32               &getWidth          (void);
     const Int32               &getWidth          (void) const;
           Int32               &getHeight         (void);
     const Int32               &getHeight         (void) const;
           Int32               &getDepth          (void);
     const Int32               &getDepth          (void) const;
           Int32               &getBpp            (void);
     const Int32               &getBpp            (void) const;
           Int32               &getMipMapCount    (void);
     const Int32               &getMipMapCount    (void) const;
           Int32               &getFrameCount     (void);
     const Int32               &getFrameCount     (void) const;
           Time                &getFrameDelay     (void);
     const Time                &getFrameDelay     (void) const;
           UInt32              &getPixelFormat    (void);
     const UInt32              &getPixelFormat    (void) const;
           Int32               &getFrameSize      (void);
     const Int32               &getFrameSize      (void) const;
           std::string         &getName           (void);
     const std::string         &getName           (void) const;
           FieldContainerPtr   &getParents        (const UInt32 index);
           MFFieldContainerPtr &getParents        (void);
     const MFFieldContainerPtr &getParents        (void) const;
           UInt8               &getPixel          (const UInt32 index);
           MFUInt8             &getPixel          (void);
     const MFUInt8             &getPixel          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setDimension      ( const Int32 &value );
     void setWidth          ( const Int32 &value );
     void setHeight         ( const Int32 &value );
     void setDepth          ( const Int32 &value );
     void setBpp            ( const Int32 &value );
     void setMipMapCount    ( const Int32 &value );
     void setFrameCount     ( const Int32 &value );
     void setFrameDelay     ( const Time &value );
     void setPixelFormat    ( const UInt32 &value );
     void setFrameSize      ( const Int32 &value );
     void setName           ( const std::string &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ImagePtr      create          (void); 
    static  ImagePtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFFieldContainerPtr   _mfParents;
    SFInt32             _sfDimension;
    SFInt32             _sfWidth;
    SFInt32             _sfHeight;
    SFInt32             _sfDepth;
    SFInt32             _sfBpp;
    SFInt32             _sfMipMapCount;
    SFInt32             _sfFrameCount;
    SFTime              _sfFrameDelay;
    SFUInt32            _sfPixelFormat;
    MFUInt8             _mfPixel;
    SFInt32             _sfFrameSize;
    SFString            _sfName;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ImageBase(void);
    ImageBase(const ImageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ImageBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      ImageBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ImageBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ImageBase *ImageBaseP;

OSG_END_NAMESPACE

#define OSGIMAGEBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.32 2003/07/11 18:39:08 dirk Exp $"

#endif /* _OSGIMAGEBASE_H_ */
