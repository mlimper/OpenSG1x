/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Image!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEIMAGEINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGImageBase.h"
#include "OSGImage.h"


OSG_USING_NAMESPACE

const OSG::BitVector  ImageBase::ParentsFieldMask = 
    (1 << ImageBase::ParentsFieldId);

const OSG::BitVector  ImageBase::DimensionFieldMask = 
    (1 << ImageBase::DimensionFieldId);

const OSG::BitVector  ImageBase::WidthFieldMask = 
    (1 << ImageBase::WidthFieldId);

const OSG::BitVector  ImageBase::HeightFieldMask = 
    (1 << ImageBase::HeightFieldId);

const OSG::BitVector  ImageBase::DepthFieldMask = 
    (1 << ImageBase::DepthFieldId);

const OSG::BitVector  ImageBase::BppFieldMask = 
    (1 << ImageBase::BppFieldId);

const OSG::BitVector  ImageBase::MipMapCountFieldMask = 
    (1 << ImageBase::MipMapCountFieldId);

const OSG::BitVector  ImageBase::FrameCountFieldMask = 
    (1 << ImageBase::FrameCountFieldId);

const OSG::BitVector  ImageBase::FrameDelayFieldMask = 
    (1 << ImageBase::FrameDelayFieldId);

const OSG::BitVector  ImageBase::PixelFormatFieldMask = 
    (1 << ImageBase::PixelFormatFieldId);

const OSG::BitVector  ImageBase::PixelFieldMask = 
    (1 << ImageBase::PixelFieldId);

const OSG::BitVector  ImageBase::FrameSizeFieldMask = 
    (1 << ImageBase::FrameSizeFieldId);



// Field descriptions

/*! \var FieldContainerPtr ImageBase::_mfParents
    
*/
/*! \var Int32           ImageBase::_sfDimension
    image dimension, 0 for invalid, 1 for 1D, 2 for 2D and     3 for 3D data.
*/
/*! \var Int32           ImageBase::_sfWidth
    
*/
/*! \var Int32           ImageBase::_sfHeight
    
*/
/*! \var Int32           ImageBase::_sfDepth
    
*/
/*! \var Int32           ImageBase::_sfBpp
    
*/
/*! \var Int32           ImageBase::_sfMipMapCount
    
*/
/*! \var Int32           ImageBase::_sfFrameCount
    
*/
/*! \var Time            ImageBase::_sfFrameDelay
    
*/
/*! \var UInt32          ImageBase::_sfPixelFormat
    
*/
/*! \var UInt8           ImageBase::_mfPixel
    
*/
/*! \var Int32           ImageBase::_sfFrameSize
    
*/

//! Image description

FieldDescription *ImageBase::_desc[] = 
{
    new FieldDescription(MFFieldContainerPtr::getClassType(), 
                     "parents", 
                     ParentsFieldId, ParentsFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getMFParents),
    new FieldDescription(SFInt32::getClassType(), 
                     "dimension", 
                     DimensionFieldId, DimensionFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFDimension),
    new FieldDescription(SFInt32::getClassType(), 
                     "width", 
                     WidthFieldId, WidthFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFWidth),
    new FieldDescription(SFInt32::getClassType(), 
                     "height", 
                     HeightFieldId, HeightFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFHeight),
    new FieldDescription(SFInt32::getClassType(), 
                     "depth", 
                     DepthFieldId, DepthFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFDepth),
    new FieldDescription(SFInt32::getClassType(), 
                     "bpp", 
                     BppFieldId, BppFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFBpp),
    new FieldDescription(SFInt32::getClassType(), 
                     "mipMapCount", 
                     MipMapCountFieldId, MipMapCountFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFMipMapCount),
    new FieldDescription(SFInt32::getClassType(), 
                     "frameCount", 
                     FrameCountFieldId, FrameCountFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFFrameCount),
    new FieldDescription(SFTime::getClassType(), 
                     "frameDelay", 
                     FrameDelayFieldId, FrameDelayFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFFrameDelay),
    new FieldDescription(SFUInt32::getClassType(), 
                     "pixelFormat", 
                     PixelFormatFieldId, PixelFormatFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFPixelFormat),
    new FieldDescription(MFUInt8::getClassType(), 
                     "pixel", 
                     PixelFieldId, PixelFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getMFPixel),
    new FieldDescription(SFInt32::getClassType(), 
                     "frameSize", 
                     FrameSizeFieldId, FrameSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ImageBase::getSFFrameSize)
};


FieldContainerType ImageBase::_type(
    "Image",
    "AttachmentContainer",
    NULL,
    (PrototypeCreateF) &ImageBase::createEmpty,
    Image::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ImageBase, ImagePtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ImageBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ImageBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ImageBase::shallowCopy(void) const 
{ 
    ImagePtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Image *>(this)); 

    return returnValue; 
}

UInt32 ImageBase::getContainerSize(void) const 
{ 
    return sizeof(Image); 
}


void ImageBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ImageBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ImageBase::ImageBase(void) :
    _mfParents                (), 
    _sfDimension              (), 
    _sfWidth                  (), 
    _sfHeight                 (), 
    _sfDepth                  (), 
    _sfBpp                    (), 
    _sfMipMapCount            (), 
    _sfFrameCount             (), 
    _sfFrameDelay             (), 
    _sfPixelFormat            (), 
    _mfPixel                  (), 
    _sfFrameSize              (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ImageBase::ImageBase(const ImageBase &source) :
    _mfParents                (source._mfParents                ), 
    _sfDimension              (source._sfDimension              ), 
    _sfWidth                  (source._sfWidth                  ), 
    _sfHeight                 (source._sfHeight                 ), 
    _sfDepth                  (source._sfDepth                  ), 
    _sfBpp                    (source._sfBpp                    ), 
    _sfMipMapCount            (source._sfMipMapCount            ), 
    _sfFrameCount             (source._sfFrameCount             ), 
    _sfFrameDelay             (source._sfFrameDelay             ), 
    _sfPixelFormat            (source._sfPixelFormat            ), 
    _mfPixel                  (source._mfPixel                  ), 
    _sfFrameSize              (source._sfFrameSize              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ImageBase::~ImageBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ImageBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        returnValue += _mfParents.getBinSize();
    }

    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        returnValue += _sfDimension.getBinSize();
    }

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }

    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        returnValue += _sfDepth.getBinSize();
    }

    if(FieldBits::NoField != (BppFieldMask & whichField))
    {
        returnValue += _sfBpp.getBinSize();
    }

    if(FieldBits::NoField != (MipMapCountFieldMask & whichField))
    {
        returnValue += _sfMipMapCount.getBinSize();
    }

    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        returnValue += _sfFrameCount.getBinSize();
    }

    if(FieldBits::NoField != (FrameDelayFieldMask & whichField))
    {
        returnValue += _sfFrameDelay.getBinSize();
    }

    if(FieldBits::NoField != (PixelFormatFieldMask & whichField))
    {
        returnValue += _sfPixelFormat.getBinSize();
    }

    if(FieldBits::NoField != (PixelFieldMask & whichField))
    {
        returnValue += _mfPixel.getBinSize();
    }

    if(FieldBits::NoField != (FrameSizeFieldMask & whichField))
    {
        returnValue += _sfFrameSize.getBinSize();
    }


    return returnValue;
}

void ImageBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        _mfParents.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        _sfDimension.copyToBin(pMem);
    }

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        _sfDepth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BppFieldMask & whichField))
    {
        _sfBpp.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MipMapCountFieldMask & whichField))
    {
        _sfMipMapCount.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        _sfFrameCount.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrameDelayFieldMask & whichField))
    {
        _sfFrameDelay.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PixelFormatFieldMask & whichField))
    {
        _sfPixelFormat.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PixelFieldMask & whichField))
    {
        _mfPixel.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrameSizeFieldMask & whichField))
    {
        _sfFrameSize.copyToBin(pMem);
    }


}

void ImageBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        _mfParents.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        _sfDimension.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        _sfDepth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BppFieldMask & whichField))
    {
        _sfBpp.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MipMapCountFieldMask & whichField))
    {
        _sfMipMapCount.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        _sfFrameCount.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrameDelayFieldMask & whichField))
    {
        _sfFrameDelay.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PixelFormatFieldMask & whichField))
    {
        _sfPixelFormat.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PixelFieldMask & whichField))
    {
        _mfPixel.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrameSizeFieldMask & whichField))
    {
        _sfFrameSize.copyFromBin(pMem);
    }


}

void ImageBase::executeSyncImpl(      ImageBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
        _mfParents.syncWith(pOther->_mfParents);

    if(FieldBits::NoField != (DimensionFieldMask & whichField))
        _sfDimension.syncWith(pOther->_sfDimension);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pOther->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pOther->_sfHeight);

    if(FieldBits::NoField != (DepthFieldMask & whichField))
        _sfDepth.syncWith(pOther->_sfDepth);

    if(FieldBits::NoField != (BppFieldMask & whichField))
        _sfBpp.syncWith(pOther->_sfBpp);

    if(FieldBits::NoField != (MipMapCountFieldMask & whichField))
        _sfMipMapCount.syncWith(pOther->_sfMipMapCount);

    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
        _sfFrameCount.syncWith(pOther->_sfFrameCount);

    if(FieldBits::NoField != (FrameDelayFieldMask & whichField))
        _sfFrameDelay.syncWith(pOther->_sfFrameDelay);

    if(FieldBits::NoField != (PixelFormatFieldMask & whichField))
        _sfPixelFormat.syncWith(pOther->_sfPixelFormat);

    if(FieldBits::NoField != (PixelFieldMask & whichField))
        _mfPixel.syncWith(pOther->_mfPixel);

    if(FieldBits::NoField != (FrameSizeFieldMask & whichField))
        _sfFrameSize.syncWith(pOther->_sfFrameSize);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ImagePtr>::_type("ImagePtr", "AttachmentContainerPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ImagePtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ImagePtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGIMAGEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGIMAGEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGIMAGEFIELDS_HEADER_CVSID;
}

