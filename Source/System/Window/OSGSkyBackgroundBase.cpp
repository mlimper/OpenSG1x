/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESKYBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSkyBackgroundBase.h"
#include "OSGSkyBackground.h"


OSG_USING_NAMESPACE

const OSG::BitVector  SkyBackgroundBase::SkyColorFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::SkyColorFieldId);

const OSG::BitVector  SkyBackgroundBase::SkyAngleFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::SkyAngleFieldId);

const OSG::BitVector  SkyBackgroundBase::GroundColorFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::GroundColorFieldId);

const OSG::BitVector  SkyBackgroundBase::GroundAngleFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::GroundAngleFieldId);

const OSG::BitVector  SkyBackgroundBase::SphereResFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::SphereResFieldId);

const OSG::BitVector  SkyBackgroundBase::BackTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::BackTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::BottomTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::BottomTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::FrontTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::FrontTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::LeftTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::LeftTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::RightTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::RightTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::TopTextureFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::TopTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::BoxInsideFieldMask = 
    (TypeTraits<BitVector>::One << SkyBackgroundBase::BoxInsideFieldId);

const OSG::BitVector SkyBackgroundBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Color4f         SkyBackgroundBase::_mfSkyColor
    The colors for the sky gradient bands. Corresponds to the skyAngle         angles.  The first value is for the apex (i.e. straight up), which         doesn't need an angle, thus there  should be one more color than         angles. If no angles are given color[0] is used, or black if none are         given.
*/
/*! \var Real32          SkyBackgroundBase::_mfSkyAngle
    The angles for the sky gradient bands. Corresponds to the skyColor colors,          with the exception of the apex. Values should be between 0 and PI.
*/
/*! \var Color4f         SkyBackgroundBase::_mfGroundColor
    The colors of the ground sphere-part. Interpretation is similar to the sky.
*/
/*! \var Real32          SkyBackgroundBase::_mfGroundAngle
    The angles of the ground sphere-part. Interpretation is similar to the sky, with          0 being straight down.
*/
/*! \var UInt32          SkyBackgroundBase::_sfSphereRes
    The polygonal resolution of the sky/ground sphere.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfBackTexture
    Texture for the back (+Z) side of the sky cube.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfBottomTexture
    Texture for the bottom (-Y) side of the sky cube.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfFrontTexture
    Texture for the front (-Z) side of the sky cube.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfLeftTexture
    Texture for the left (-X) side of the sky cube.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfRightTexture
    Texture for the right (+X) side of the sky cube.
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfTopTexture
    Texture for the top (+Y) side of the sky cube.
*/
/*! \var bool            SkyBackgroundBase::_sfBoxInside
    flag to draw the box inside or outside of the sphere
*/

//! SkyBackground description

FieldDescription *SkyBackgroundBase::_desc[] = 
{
    new FieldDescription(MFColor4f::getClassType(), 
                     "skyColor", 
                     SkyColorFieldId, SkyColorFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFSkyColor),
    new FieldDescription(MFReal32::getClassType(), 
                     "skyAngle", 
                     SkyAngleFieldId, SkyAngleFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFSkyAngle),
    new FieldDescription(MFColor4f::getClassType(), 
                     "groundColor", 
                     GroundColorFieldId, GroundColorFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFGroundColor),
    new FieldDescription(MFReal32::getClassType(), 
                     "groundAngle", 
                     GroundAngleFieldId, GroundAngleFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFGroundAngle),
    new FieldDescription(SFUInt32::getClassType(), 
                     "sphereRes", 
                     SphereResFieldId, SphereResFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFSphereRes),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "backTexture", 
                     BackTextureFieldId, BackTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFBackTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "bottomTexture", 
                     BottomTextureFieldId, BottomTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFBottomTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "frontTexture", 
                     FrontTextureFieldId, FrontTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFFrontTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "leftTexture", 
                     LeftTextureFieldId, LeftTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFLeftTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "rightTexture", 
                     RightTextureFieldId, RightTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFRightTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "topTexture", 
                     TopTextureFieldId, TopTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFTopTexture),
    new FieldDescription(SFBool::getClassType(), 
                     "boxInside", 
                     BoxInsideFieldId, BoxInsideFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFBoxInside)
};


FieldContainerType SkyBackgroundBase::_type(
    "SkyBackground",
    "Background",
    NULL,
    (PrototypeCreateF) &SkyBackgroundBase::createEmpty,
    SkyBackground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SkyBackgroundBase, SkyBackgroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkyBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SkyBackgroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SkyBackgroundBase::shallowCopy(void) const 
{ 
    SkyBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SkyBackground *>(this)); 

    return returnValue; 
}

UInt32 SkyBackgroundBase::getContainerSize(void) const 
{ 
    return sizeof(SkyBackground); 
}


void SkyBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SkyBackgroundBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SkyBackgroundBase::SkyBackgroundBase(void) :
    _mfSkyColor               (), 
    _mfSkyAngle               (), 
    _mfGroundColor            (), 
    _mfGroundAngle            (), 
    _sfSphereRes              (UInt32(8)), 
    _sfBackTexture            (TextureChunkPtr(NullFC)), 
    _sfBottomTexture          (TextureChunkPtr(NullFC)), 
    _sfFrontTexture           (TextureChunkPtr(NullFC)), 
    _sfLeftTexture            (TextureChunkPtr(NullFC)), 
    _sfRightTexture           (TextureChunkPtr(NullFC)), 
    _sfTopTexture             (TextureChunkPtr(NullFC)), 
    _sfBoxInside              (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

SkyBackgroundBase::SkyBackgroundBase(const SkyBackgroundBase &source) :
    _mfSkyColor               (source._mfSkyColor               ), 
    _mfSkyAngle               (source._mfSkyAngle               ), 
    _mfGroundColor            (source._mfGroundColor            ), 
    _mfGroundAngle            (source._mfGroundAngle            ), 
    _sfSphereRes              (source._sfSphereRes              ), 
    _sfBackTexture            (source._sfBackTexture            ), 
    _sfBottomTexture          (source._sfBottomTexture          ), 
    _sfFrontTexture           (source._sfFrontTexture           ), 
    _sfLeftTexture            (source._sfLeftTexture            ), 
    _sfRightTexture           (source._sfRightTexture           ), 
    _sfTopTexture             (source._sfTopTexture             ), 
    _sfBoxInside              (source._sfBoxInside              ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

SkyBackgroundBase::~SkyBackgroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SkyBackgroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        returnValue += _mfSkyColor.getBinSize();
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        returnValue += _mfSkyAngle.getBinSize();
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        returnValue += _mfGroundColor.getBinSize();
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        returnValue += _mfGroundAngle.getBinSize();
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        returnValue += _sfSphereRes.getBinSize();
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        returnValue += _sfBackTexture.getBinSize();
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        returnValue += _sfBottomTexture.getBinSize();
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        returnValue += _sfFrontTexture.getBinSize();
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        returnValue += _sfLeftTexture.getBinSize();
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        returnValue += _sfRightTexture.getBinSize();
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        returnValue += _sfTopTexture.getBinSize();
    }

    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        returnValue += _sfBoxInside.getBinSize();
    }


    return returnValue;
}

void SkyBackgroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        _sfBoxInside.copyToBin(pMem);
    }


}

void SkyBackgroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        _sfBoxInside.copyFromBin(pMem);
    }


}

void SkyBackgroundBase::executeSyncImpl(      SkyBackgroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
        _mfSkyColor.syncWith(pOther->_mfSkyColor);

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
        _mfSkyAngle.syncWith(pOther->_mfSkyAngle);

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
        _mfGroundColor.syncWith(pOther->_mfGroundColor);

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
        _mfGroundAngle.syncWith(pOther->_mfGroundAngle);

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
        _sfSphereRes.syncWith(pOther->_sfSphereRes);

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
        _sfBackTexture.syncWith(pOther->_sfBackTexture);

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
        _sfBottomTexture.syncWith(pOther->_sfBottomTexture);

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
        _sfFrontTexture.syncWith(pOther->_sfFrontTexture);

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
        _sfLeftTexture.syncWith(pOther->_sfLeftTexture);

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
        _sfRightTexture.syncWith(pOther->_sfRightTexture);

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
        _sfTopTexture.syncWith(pOther->_sfTopTexture);

    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
        _sfBoxInside.syncWith(pOther->_sfBoxInside);


}



#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<SkyBackgroundPtr>::_type("SkyBackgroundPtr", "BackgroundPtr");
#endif

OSG_DLLEXPORT_MFIELD_DEF1(SkyBackgroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.40 2003/03/15 06:15:25 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGSKYBACKGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSKYBACKGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSKYBACKGROUNDFIELDS_HEADER_CVSID;
}

