/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGVIEWPORTBASE_H_
#define _OSGVIEWPORTBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>

#include <OSGAttachmentContainer.h> // Parent

#include <OSGReal32Fields.h> // Left type
#include <OSGReal32Fields.h> // Right type
#include <OSGReal32Fields.h> // Bottom type
#include <OSGReal32Fields.h> // Top type
#include <OSGWindowFields.h> // Parent type
#include <OSGCameraFields.h> // Camera type
#include <OSGNodeFields.h> // Root type
#include <OSGBackgroundFields.h> // Background type
#include <OSGForegroundFields.h> // Foregrounds type

#include <OSGViewportFields.h>

OSG_BEGIN_NAMESPACE

class Viewport;
class BinaryDataHandler;

//! \brief Viewport Base Class.

class OSG_SYSTEMLIB_DLLMAPPING ViewportBase : public AttachmentContainer
{
  private:

    typedef AttachmentContainer Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        LeftFieldId        = Inherited::NextFieldId,
        RightFieldId       = LeftFieldId        + 1,
        BottomFieldId      = RightFieldId       + 1,
        TopFieldId         = BottomFieldId      + 1,
        ParentFieldId      = TopFieldId         + 1,
        CameraFieldId      = ParentFieldId      + 1,
        RootFieldId        = CameraFieldId      + 1,
        BackgroundFieldId  = RootFieldId        + 1,
        ForegroundsFieldId = BackgroundFieldId  + 1,
        NextFieldId        = ForegroundsFieldId + 1
    };

    static const osg::BitVector LeftFieldMask;
    static const osg::BitVector RightFieldMask;
    static const osg::BitVector BottomFieldMask;
    static const osg::BitVector TopFieldMask;
    static const osg::BitVector ParentFieldMask;
    static const osg::BitVector CameraFieldMask;
    static const osg::BitVector RootFieldMask;
    static const osg::BitVector BackgroundFieldMask;
    static const osg::BitVector ForegroundsFieldMask;


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           SFReal32            *getSFLeft           (void);
           SFReal32            *getSFRight          (void);
           SFReal32            *getSFBottom         (void);
           SFReal32            *getSFTop            (void);
           SFWindowPtr         *getSFParent         (void);
           SFCameraPtr         *getSFCamera         (void);
           SFNodePtr           *getSFRoot           (void);
           SFBackgroundPtr     *getSFBackground     (void);
           MFForegroundPtr     *getMFForegrounds    (void);

           Real32              &getLeft           (void);
     const Real32              &getLeft           (void) const;
           Real32              &getRight          (void);
     const Real32              &getRight          (void) const;
           Real32              &getBottom         (void);
     const Real32              &getBottom         (void) const;
           Real32              &getTop            (void);
     const Real32              &getTop            (void) const;
           WindowPtr           &getParent         (void);
     const WindowPtr           &getParent         (void) const;
           CameraPtr           &getCamera         (void);
     const CameraPtr           &getCamera         (void) const;
           NodePtr             &getRoot           (void);
     const NodePtr             &getRoot           (void) const;
           BackgroundPtr       &getBackground     (void);
     const BackgroundPtr       &getBackground     (void) const;
           ForegroundPtr       &getForegrounds    (const UInt32 index);
           MFForegroundPtr     &getForegrounds    (void);
     const MFForegroundPtr     &getForegrounds    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setLeft           ( const Real32 &value );
     void setRight          ( const Real32 &value );
     void setBottom         ( const Real32 &value );
     void setTop            ( const Real32 &value );
     void setParent         ( const WindowPtr &value );
     void setCamera         ( const CameraPtr &value );
     void setRoot           ( const NodePtr &value );
     void setBackground     ( const BackgroundPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ViewportPtr      create          (void); 
    static  ViewportPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32            _sfLeft;
    SFReal32            _sfRight;
    SFReal32            _sfBottom;
    SFReal32            _sfTop;
    SFWindowPtr         _sfParent;
    SFCameraPtr         _sfCamera;
    SFNodePtr           _sfRoot;
    SFBackgroundPtr     _sfBackground;
    MFForegroundPtr     _mfForegrounds;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ViewportBase(void);
    ViewportBase(const ViewportBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ViewportBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      ViewportBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ViewportBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef ViewportBase *ViewportBaseP;

OSG_END_NAMESPACE

#define OSGVIEWPORTBASE_HEADER_CVSID "@(#)$Id: $"

#endif /* _OSGVIEWPORTBASE_H_ */
