/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParallelStereoCameraDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARALLELSTEREOCAMERADECORATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGParallelStereoCameraDecoratorBase.h"
#include "OSGParallelStereoCameraDecorator.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ParallelStereoCameraDecoratorBase::UserFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::UserFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::EyeToScreenDistanceFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::EyeToScreenDistanceFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::LensSeparationDistanceFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::LensSeparationDistanceFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::VScreenSizeFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::VScreenSizeFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::HScreenSizeFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::HScreenSizeFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::DistortionKFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::DistortionKFieldId);

const OSG::BitVector  ParallelStereoCameraDecoratorBase::FoVScaleFieldMask = 
    (TypeTraits<BitVector>::One << ParallelStereoCameraDecoratorBase::FoVScaleFieldId);

const OSG::BitVector ParallelStereoCameraDecoratorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var NodePtr         ParallelStereoCameraDecoratorBase::_sfUser
    The coordinate system relative to the camera (only rotation!).
*/
/*! \var Real32          ParallelStereoCameraDecoratorBase::_sfEyeToScreenDistance
    The distance from the eye to the screen.
*/
/*! \var Real32          ParallelStereoCameraDecoratorBase::_sfLensSeparationDistance
    Physical distance between the lens centers, in meters.
*/
/*! \var Real32          ParallelStereoCameraDecoratorBase::_sfVScreenSize
    The vertical size of the screen.
*/
/*! \var Real32          ParallelStereoCameraDecoratorBase::_sfHScreenSize
    The horizontal size of the screen.
*/
/*! \var Vec4f           ParallelStereoCameraDecoratorBase::_sfDistortionK
    The radial distortion correction coefficients coming from oculus.
*/
/*! \var Real32          ParallelStereoCameraDecoratorBase::_sfFoVScale
    The scale of fov, as described in the oculus doc.
*/

//! ParallelStereoCameraDecorator description

FieldDescription *ParallelStereoCameraDecoratorBase::_desc[] = 
{
    new FieldDescription(SFNodePtr::getClassType(), 
                     "user", 
                     UserFieldId, UserFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFUser)),
    new FieldDescription(SFReal32::getClassType(), 
                     "eyeToScreenDistance", 
                     EyeToScreenDistanceFieldId, EyeToScreenDistanceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFEyeToScreenDistance)),
    new FieldDescription(SFReal32::getClassType(), 
                     "lensSeparationDistance", 
                     LensSeparationDistanceFieldId, LensSeparationDistanceFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFLensSeparationDistance)),
    new FieldDescription(SFReal32::getClassType(), 
                     "vScreenSize", 
                     VScreenSizeFieldId, VScreenSizeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFVScreenSize)),
    new FieldDescription(SFReal32::getClassType(), 
                     "hScreenSize", 
                     HScreenSizeFieldId, HScreenSizeFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFHScreenSize)),
    new FieldDescription(SFVec4f::getClassType(), 
                     "distortionK", 
                     DistortionKFieldId, DistortionKFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFDistortionK)),
    new FieldDescription(SFReal32::getClassType(), 
                     "foVScale", 
                     FoVScaleFieldId, FoVScaleFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&ParallelStereoCameraDecoratorBase::editSFFoVScale))
};


FieldContainerType ParallelStereoCameraDecoratorBase::_type(
    "ParallelStereoCameraDecorator",
    "StereoCameraDecorator",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&ParallelStereoCameraDecoratorBase::createEmpty),
    ParallelStereoCameraDecorator::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ParallelStereoCameraDecoratorBase, ParallelStereoCameraDecoratorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParallelStereoCameraDecoratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ParallelStereoCameraDecoratorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ParallelStereoCameraDecoratorBase::shallowCopy(void) const 
{ 
    ParallelStereoCameraDecoratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ParallelStereoCameraDecorator *>(this)); 

    return returnValue; 
}

UInt32 ParallelStereoCameraDecoratorBase::getContainerSize(void) const 
{ 
    return sizeof(ParallelStereoCameraDecorator); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ParallelStereoCameraDecoratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<ParallelStereoCameraDecoratorBase *>(&other),
                          whichField);
}
#else
void ParallelStereoCameraDecoratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ParallelStereoCameraDecoratorBase *) &other, whichField, sInfo);
}
void ParallelStereoCameraDecoratorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ParallelStereoCameraDecoratorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ParallelStereoCameraDecoratorBase::ParallelStereoCameraDecoratorBase(void) :
    _sfUser                   (), 
    _sfEyeToScreenDistance    (Real32(0.041)), 
    _sfLensSeparationDistance (Real32(0.0635)), 
    _sfVScreenSize            (Real32(0.0935)), 
    _sfHScreenSize            (Real32(0.14976)), 
    _sfDistortionK            (Vec4f(1.0)), 
    _sfFoVScale               (Real32(1.0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ParallelStereoCameraDecoratorBase::ParallelStereoCameraDecoratorBase(const ParallelStereoCameraDecoratorBase &source) :
    _sfUser                   (source._sfUser                   ), 
    _sfEyeToScreenDistance    (source._sfEyeToScreenDistance    ), 
    _sfLensSeparationDistance (source._sfLensSeparationDistance ), 
    _sfVScreenSize            (source._sfVScreenSize            ), 
    _sfHScreenSize            (source._sfHScreenSize            ), 
    _sfDistortionK            (source._sfDistortionK            ), 
    _sfFoVScale               (source._sfFoVScale               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ParallelStereoCameraDecoratorBase::~ParallelStereoCameraDecoratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ParallelStereoCameraDecoratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (UserFieldMask & whichField))
    {
        returnValue += _sfUser.getBinSize();
    }

    if(FieldBits::NoField != (EyeToScreenDistanceFieldMask & whichField))
    {
        returnValue += _sfEyeToScreenDistance.getBinSize();
    }

    if(FieldBits::NoField != (LensSeparationDistanceFieldMask & whichField))
    {
        returnValue += _sfLensSeparationDistance.getBinSize();
    }

    if(FieldBits::NoField != (VScreenSizeFieldMask & whichField))
    {
        returnValue += _sfVScreenSize.getBinSize();
    }

    if(FieldBits::NoField != (HScreenSizeFieldMask & whichField))
    {
        returnValue += _sfHScreenSize.getBinSize();
    }

    if(FieldBits::NoField != (DistortionKFieldMask & whichField))
    {
        returnValue += _sfDistortionK.getBinSize();
    }

    if(FieldBits::NoField != (FoVScaleFieldMask & whichField))
    {
        returnValue += _sfFoVScale.getBinSize();
    }


    return returnValue;
}

void ParallelStereoCameraDecoratorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (UserFieldMask & whichField))
    {
        _sfUser.copyToBin(pMem);
    }

    if(FieldBits::NoField != (EyeToScreenDistanceFieldMask & whichField))
    {
        _sfEyeToScreenDistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LensSeparationDistanceFieldMask & whichField))
    {
        _sfLensSeparationDistance.copyToBin(pMem);
    }

    if(FieldBits::NoField != (VScreenSizeFieldMask & whichField))
    {
        _sfVScreenSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HScreenSizeFieldMask & whichField))
    {
        _sfHScreenSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DistortionKFieldMask & whichField))
    {
        _sfDistortionK.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FoVScaleFieldMask & whichField))
    {
        _sfFoVScale.copyToBin(pMem);
    }


}

void ParallelStereoCameraDecoratorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (UserFieldMask & whichField))
    {
        _sfUser.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (EyeToScreenDistanceFieldMask & whichField))
    {
        _sfEyeToScreenDistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LensSeparationDistanceFieldMask & whichField))
    {
        _sfLensSeparationDistance.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (VScreenSizeFieldMask & whichField))
    {
        _sfVScreenSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HScreenSizeFieldMask & whichField))
    {
        _sfHScreenSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DistortionKFieldMask & whichField))
    {
        _sfDistortionK.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FoVScaleFieldMask & whichField))
    {
        _sfFoVScale.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ParallelStereoCameraDecoratorBase::executeSyncImpl(      ParallelStereoCameraDecoratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (UserFieldMask & whichField))
        _sfUser.syncWith(pOther->_sfUser);

    if(FieldBits::NoField != (EyeToScreenDistanceFieldMask & whichField))
        _sfEyeToScreenDistance.syncWith(pOther->_sfEyeToScreenDistance);

    if(FieldBits::NoField != (LensSeparationDistanceFieldMask & whichField))
        _sfLensSeparationDistance.syncWith(pOther->_sfLensSeparationDistance);

    if(FieldBits::NoField != (VScreenSizeFieldMask & whichField))
        _sfVScreenSize.syncWith(pOther->_sfVScreenSize);

    if(FieldBits::NoField != (HScreenSizeFieldMask & whichField))
        _sfHScreenSize.syncWith(pOther->_sfHScreenSize);

    if(FieldBits::NoField != (DistortionKFieldMask & whichField))
        _sfDistortionK.syncWith(pOther->_sfDistortionK);

    if(FieldBits::NoField != (FoVScaleFieldMask & whichField))
        _sfFoVScale.syncWith(pOther->_sfFoVScale);


}
#else
void ParallelStereoCameraDecoratorBase::executeSyncImpl(      ParallelStereoCameraDecoratorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (UserFieldMask & whichField))
        _sfUser.syncWith(pOther->_sfUser);

    if(FieldBits::NoField != (EyeToScreenDistanceFieldMask & whichField))
        _sfEyeToScreenDistance.syncWith(pOther->_sfEyeToScreenDistance);

    if(FieldBits::NoField != (LensSeparationDistanceFieldMask & whichField))
        _sfLensSeparationDistance.syncWith(pOther->_sfLensSeparationDistance);

    if(FieldBits::NoField != (VScreenSizeFieldMask & whichField))
        _sfVScreenSize.syncWith(pOther->_sfVScreenSize);

    if(FieldBits::NoField != (HScreenSizeFieldMask & whichField))
        _sfHScreenSize.syncWith(pOther->_sfHScreenSize);

    if(FieldBits::NoField != (DistortionKFieldMask & whichField))
        _sfDistortionK.syncWith(pOther->_sfDistortionK);

    if(FieldBits::NoField != (FoVScaleFieldMask & whichField))
        _sfFoVScale.syncWith(pOther->_sfFoVScale);



}

void ParallelStereoCameraDecoratorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ParallelStereoCameraDecoratorPtr>::_type("ParallelStereoCameraDecoratorPtr", "StereoCameraDecoratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ParallelStereoCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ParallelStereoCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGParallelStereoCameraDecoratorBase.cpp,v 1.1 2014/06/30 07:37:39 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGPARALLELSTEREOCAMERADECORATORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPARALLELSTEREOCAMERADECORATORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPARALLELSTEREOCAMERADECORATORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

