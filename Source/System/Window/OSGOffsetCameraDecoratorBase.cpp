/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class OffsetCameraDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEOFFSETCAMERADECORATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGOffsetCameraDecoratorBase.h"
#include "OSGOffsetCameraDecorator.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  OffsetCameraDecoratorBase::OffsetXFieldMask = 
    (TypeTraits<BitVector>::One << OffsetCameraDecoratorBase::OffsetXFieldId);

const OSG::BitVector  OffsetCameraDecoratorBase::OffsetYFieldMask = 
    (TypeTraits<BitVector>::One << OffsetCameraDecoratorBase::OffsetYFieldId);

const OSG::BitVector  OffsetCameraDecoratorBase::FullWidthFieldMask = 
    (TypeTraits<BitVector>::One << OffsetCameraDecoratorBase::FullWidthFieldId);

const OSG::BitVector  OffsetCameraDecoratorBase::FullHeightFieldMask = 
    (TypeTraits<BitVector>::One << OffsetCameraDecoratorBase::FullHeightFieldId);

const OSG::BitVector OffsetCameraDecoratorBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          OffsetCameraDecoratorBase::_sfOffsetX
    
*/
/*! \var Real32          OffsetCameraDecoratorBase::_sfOffsetY
    
*/
/*! \var UInt32          OffsetCameraDecoratorBase::_sfFullWidth
    The width of the full image this is a tile of.
*/
/*! \var UInt32          OffsetCameraDecoratorBase::_sfFullHeight
    The height of the full image this is a tile of.
*/

//! OffsetCameraDecorator description

FieldDescription *OffsetCameraDecoratorBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "offsetX", 
                     OffsetXFieldId, OffsetXFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&OffsetCameraDecoratorBase::getSFOffsetX)),
    new FieldDescription(SFReal32::getClassType(), 
                     "offsetY", 
                     OffsetYFieldId, OffsetYFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&OffsetCameraDecoratorBase::getSFOffsetY)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "fullWidth", 
                     FullWidthFieldId, FullWidthFieldMask,
                     false,
                     reinterpret_cast<FieldAccessMethod>(&OffsetCameraDecoratorBase::getSFFullWidth)),
    new FieldDescription(SFUInt32::getClassType(), 
                     "fullHeight", 
                     FullHeightFieldId, FullHeightFieldMask,
                     true,
                     reinterpret_cast<FieldAccessMethod>(&OffsetCameraDecoratorBase::getSFFullHeight))
};


FieldContainerType OffsetCameraDecoratorBase::_type(
    "OffsetCameraDecorator",
    "CameraDecorator",
    NULL,
    reinterpret_cast<PrototypeCreateF>(&OffsetCameraDecoratorBase::createEmpty),
    OffsetCameraDecorator::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(OffsetCameraDecoratorBase, OffsetCameraDecoratorPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &OffsetCameraDecoratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &OffsetCameraDecoratorBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr OffsetCameraDecoratorBase::shallowCopy(void) const 
{ 
    OffsetCameraDecoratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const OffsetCameraDecorator *>(this)); 

    return returnValue; 
}

UInt32 OffsetCameraDecoratorBase::getContainerSize(void) const 
{ 
    return sizeof(OffsetCameraDecorator); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void OffsetCameraDecoratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl(static_cast<OffsetCameraDecoratorBase *>(&other),
                          whichField);
}
#else
void OffsetCameraDecoratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((OffsetCameraDecoratorBase *) &other, whichField, sInfo);
}
void OffsetCameraDecoratorBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void OffsetCameraDecoratorBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

OffsetCameraDecoratorBase::OffsetCameraDecoratorBase(void) :
    _sfOffsetX                (Real32(0)), 
    _sfOffsetY                (Real32(0)), 
    _sfFullWidth              (UInt32(0)), 
    _sfFullHeight             (UInt32(0)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

OffsetCameraDecoratorBase::OffsetCameraDecoratorBase(const OffsetCameraDecoratorBase &source) :
    _sfOffsetX                (source._sfOffsetX                ), 
    _sfOffsetY                (source._sfOffsetY                ), 
    _sfFullWidth              (source._sfFullWidth              ), 
    _sfFullHeight             (source._sfFullHeight             ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

OffsetCameraDecoratorBase::~OffsetCameraDecoratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 OffsetCameraDecoratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OffsetXFieldMask & whichField))
    {
        returnValue += _sfOffsetX.getBinSize();
    }

    if(FieldBits::NoField != (OffsetYFieldMask & whichField))
    {
        returnValue += _sfOffsetY.getBinSize();
    }

    if(FieldBits::NoField != (FullWidthFieldMask & whichField))
    {
        returnValue += _sfFullWidth.getBinSize();
    }

    if(FieldBits::NoField != (FullHeightFieldMask & whichField))
    {
        returnValue += _sfFullHeight.getBinSize();
    }


    return returnValue;
}

void OffsetCameraDecoratorBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OffsetXFieldMask & whichField))
    {
        _sfOffsetX.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffsetYFieldMask & whichField))
    {
        _sfOffsetY.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FullWidthFieldMask & whichField))
    {
        _sfFullWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FullHeightFieldMask & whichField))
    {
        _sfFullHeight.copyToBin(pMem);
    }


}

void OffsetCameraDecoratorBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OffsetXFieldMask & whichField))
    {
        _sfOffsetX.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffsetYFieldMask & whichField))
    {
        _sfOffsetY.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FullWidthFieldMask & whichField))
    {
        _sfFullWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FullHeightFieldMask & whichField))
    {
        _sfFullHeight.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void OffsetCameraDecoratorBase::executeSyncImpl(      OffsetCameraDecoratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (OffsetXFieldMask & whichField))
        _sfOffsetX.syncWith(pOther->_sfOffsetX);

    if(FieldBits::NoField != (OffsetYFieldMask & whichField))
        _sfOffsetY.syncWith(pOther->_sfOffsetY);

    if(FieldBits::NoField != (FullWidthFieldMask & whichField))
        _sfFullWidth.syncWith(pOther->_sfFullWidth);

    if(FieldBits::NoField != (FullHeightFieldMask & whichField))
        _sfFullHeight.syncWith(pOther->_sfFullHeight);


}
#else
void OffsetCameraDecoratorBase::executeSyncImpl(      OffsetCameraDecoratorBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (OffsetXFieldMask & whichField))
        _sfOffsetX.syncWith(pOther->_sfOffsetX);

    if(FieldBits::NoField != (OffsetYFieldMask & whichField))
        _sfOffsetY.syncWith(pOther->_sfOffsetY);

    if(FieldBits::NoField != (FullWidthFieldMask & whichField))
        _sfFullWidth.syncWith(pOther->_sfFullWidth);

    if(FieldBits::NoField != (FullHeightFieldMask & whichField))
        _sfFullHeight.syncWith(pOther->_sfFullHeight);



}

void OffsetCameraDecoratorBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<OffsetCameraDecoratorPtr>::_type("OffsetCameraDecoratorPtr", "CameraDecoratorPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(OffsetCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(OffsetCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGOffsetCameraDecoratorBase.cpp,v 1.2 2008/06/05 05:02:30 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGOFFSETCAMERADECORATORBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGOFFSETCAMERADECORATORBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGOFFSETCAMERADECORATORFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

