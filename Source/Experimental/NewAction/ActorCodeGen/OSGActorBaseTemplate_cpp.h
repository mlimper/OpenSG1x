/* This is a template file for actorEdit.
 * To create it from sample source,  cut'n'paste the source and apply the following
 * substitutions:
 * s|\|\\|g 
 * s|"|\"|g 
 * s|^|"| 
 * s|$|",|
 */

char *ActorBaseTemplate_cpp[] =
{
"/*---------------------------------------------------------------------------*\\",
" *                                OpenSG                                     *",
" *                                                                           *",
" *                                                                           *",
" *           Copyright (C) 2000,2001,2002 by the OpenSG Forum                *",
" *                                                                           *",
" *                            www.opensg.org                                 *",
" *                                                                           *",
" *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                License                                    *",
" *                                                                           *",
" * This library is free software; you can redistribute it and/or modify it   *",
" * under the terms of the GNU Library General Public License as published    *",
" * by the Free Software Foundation, version 2.                               *",
" *                                                                           *",
" * This library is distributed in the hope that it will be useful, but       *",
" * WITHOUT ANY WARRANTY; without even the implied warranty of                *",
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *",
" * Library General Public License for more details.                          *",
" *                                                                           *",
" * You should have received a copy of the GNU Library General Public         *",
" * License along with this library; if not, write to the Free Software       *",
" * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                Changes                                    *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"",
"#include \"OSG@!Classname!@Base.h\"",
"@@if UseLocalIncludes",
"#include \"@!HeaderPrefix!@OSGNodeCore.h\"",
"#include \"@!HeaderPrefix!@OSGStateAwareIterator.h\"",
"#include \"@!HeaderPrefix!@OSGStateUnawareIterator.h\"",
"@@else",
"#include <@!HeaderPrefix!@OSGNodeCore.h>",
"#include <@!HeaderPrefix!@OSGStateAwareIterator.h>",
"#include <@!HeaderPrefix!@OSGStateUnawareIterator.h>",
"@@endif",
"",
"OSG_USING_NAMESPACE",
"",
"/*--------------------------- static member init ----------------------------*/",
"",
"@!Classname!@Base::EnterStoreType *@!Classname!@Base::_pClassEnterStore = NULL;",
"@!Classname!@Base::LeaveStoreType *@!Classname!@Base::_pClassLeaveStore = NULL;",
"",
"/*=============================== PUBLIC ====================================*/",
"",
"/*------------------------------ destructor ---------------------------------*/",
"",
"@!Classname!@Base::~@!Classname!@Base(void)",
"{",
"}",
"",
"/*--------------------------- enter registration ---------------------------*/",
"",
"@@if EnterStore_EQ_Simple",
"void",
"@!Classname!@Base::regClassEnter(const Functor &refFunc)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->regFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regEnter(const Functor &refFunc)",
"{",
"    EnterStoreType::regFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassEnter(void)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->unregFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregEnter(void)",
"{",
"    EnterStoreType::unregFunctor();",
"}",
"@@endif",
"@@if EnterStore_EQ_Single",
"void",
"@!Classname!@Base::regClassEnter(const Functor            &refFunc, ",
"                                 const FieldContainerType &refType )",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regEnter(const Functor            &refFunc,",
"                            const FieldContainerType &refType )",
"{",
"    EnterStoreType::regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultClassEnter(const Functor &refFunc)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultEnter(const Functor &refFunc)",
"{",
"    EnterStoreType::regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassEnter(const FieldContainerType &refType)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregEnter(const FieldContainerType &refType)",
"{",
"    EnterStoreType::unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultClassEnter(void)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->unregDefaultFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultEnter(void)",
"{",
"    EnterStoreType::unregDefaultFunctor();",
"}",
"@@endif",
"@@if EnterStore_EQ_Multi",
"",
"void",
"@!Classname!@Base::regClassEnter(const Functor            &refFunc, ",
"                                 const FieldContainerType &refType )",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regEnter(const Functor            &refFunc,",
"                            const FieldContainerType &refType )",
"{",
"    EnterStoreType::regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultClassEnter(const Functor &refFunc)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultEnter(const Functor &refFunc)",
"{",
"    EnterStoreType::regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassEnter(const FieldContainerType &refType)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregEnter(const FieldContainerType &refType)",
"{",
"    EnterStoreType::unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultClassEnter(void)",
"{",
"    if(_pClassEnterStore == NULL)",
"        _pClassEnterStore = new EnterStoreType;",
"",
"    _pClassEnterStore->unregDefaultFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultEnter(void)",
"{",
"    EnterStoreType::unregDefaultFunctor();",
"}",
"@@endif",
"",
"/*--------------------------- leave registration ---------------------------*/",
"",
"@@if LeaveStore_EQ_Simple",
"void",
"@!Classname!@Base::regClassLeave(const Functor &refFunc)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->regFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regLeave(const Functor &refFunc)",
"{",
"    LeaveStoreType::regFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassLeave(void)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->unregFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregLeave(void)",
"{",
"    LeaveStoreType::unregFunctor();",
"}",
"@@endif",
"@@if LeaveStore_EQ_Single",
"void",
"@!Classname!@Base::regClassLeave(const Functor            &refFunc, ",
"                                 const FieldContainerType &refType )",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regLeave(const Functor            &refFunc,",
"                            const FieldContainerType &refType )",
"{",
"    LeaveStoreType::regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultClassLeave(const Functor &refFunc)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultLeave(const Functor &refFunc)",
"{",
"    LeaveStoreType::regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassLeave(const FieldContainerType &refType)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregLeave(const FieldContainerType &refType)",
"{",
"    LeaveStoreType::unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultClassLeave(void)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->unregDefaultFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultLeave(void)",
"{",
"    LeaveStoreType::unregDefaultFunctor();",
"}",
"@@endif",
"@@if LeaveStore_EQ_Multi",
"void",
"@!Classname!@Base::regClassLeave(const Functor            &refFunc, ",
"                                 const FieldContainerType &refType )",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regLeave(const Functor            &refFunc,",
"                            const FieldContainerType &refType )",
"{",
"    LeaveStoreType::regFunctor(refFunc, refType);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultClassLeave(const Functor &refFunc)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::regDefaultLeave(const Functor &refFunc)",
"{",
"    LeaveStoreType::regDefaultFunctor(refFunc);",
"}",
"",
"void",
"@!Classname!@Base::unregClassLeave(const FieldContainerType &refType)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregLeave(const FieldContainerType &refType)",
"{",
"    LeaveStoreType::unregFunctor(refType);",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultClassLeave(void)",
"{",
"    if(_pClassLeaveStore == NULL)",
"        _pClassLeaveStore = new LeaveStoreType;",
"",
"    _pClassLeaveStore->unregDefaultFunctor();",
"}",
"",
"void",
"@!Classname!@Base::unregDefaultLeave(void)",
"{",
"    LeaveStoreType::unregDefaultFunctor();",
"}",
"@@endif",
"",
"",
"/*---------------------------------- apply enter ----------------------------*/",
"",
"@@if !EnterStore_EQ_Empty",
"@!Classname!@Base::ResultE",
"@!Classname!@Base::applyEnter(NodeCorePtr pNodeCore)",
"{",
"@@if EnterStore_EQ_Simple",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = EnterStoreType::getFunctor()) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"    ",
"    if((pFunc = _pClassEnterStore->getFunctor()) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyEnter(pNodeCore);",
"@@endif",
"@@if EnterStore_EQ_Single",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = EnterStoreType::getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"       ",
"    if((pFunc = _pClassEnterStore->getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyEnter(pNodeCore);",
"@@endif",
"@@if EnterStore_EQ_Multi",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = EnterStoreType::getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"       ",
"    if((pFunc = _pClassEnterStore->getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyEnter(pNodeCore);",
"@@endif",
"}",
"@@endif",
"",
"/*---------------------------------- apply leave ----------------------------*/",
"",
"@@if !LeaveStore_EQ_Empty",
"@!Classname!@Base::ResultE",
"@!Classname!@Base::applyLeave(NodeCorePtr pNodeCore)",
"{",
"@@if LeaveStore_EQ_Simple",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = LeaveStoreType::getFunctor()) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"    ",
"    if((pFunc = _pClassLeaveStore->getFunctor()) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyLeave(pNodeCore);",
"@@endif",
"@@if LeaveStore_EQ_Single",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = LeaveStoreType::getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"       ",
"    if((pFunc = _pClassLeaveStore->getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyLeave(pNodeCore);",
"@@endif",
"@@if LeaveStore_EQ_Multi",
"    Functor *pFunc = NULL;",
"",
"    if((pFunc = LeaveStoreType::getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"       ",
"    if((pFunc = _pClassLeaveStore->getFunctor(pNodeCore->getType())) != NULL)",
"    {",
"        return pFunc->call(pNodeCore, this);",
"    }",
"",
"    return Inherited::applyLeave(pNodeCore);",
"@@endif",
"}",
"@@endif",
"",
"/*---------------------------- property queries  ---------------------------*/",
"",
"bool",
"@!Classname!@Base::hasEnterMethod(void) const",
"{",
"    return bHasEnterMethod;",
"}",
"",
"bool",
"@!Classname!@Base::hasLeaveMethod(void) const",
"{",
"    return bHasLeaveMethod;",
"}",
"",
"bool",
"@!Classname!@Base::hasOrderedState(void) const",
"{",
"    return bHasOrderedState;",
"}",
"",
"bool",
"@!Classname!@Base::acceptsIterator(IteratorBase *pIterator) const",
"{",
"    bool retVal = false;",
"",
"    if(pIterator == NULL)",
"    {",
"        retVal = true;",
"    }",
"    else if(dynamic_cast<StateAwareIterator *>(pIterator) != NULL)",
"    {",
"@@if AcceptsStateAwareIterator",
"        retVal = true;",
"@@else",
"        retVal = false;",
"@@endif",
"    }",
"    else if(dynamic_cast<StateUnawareIterator *>(pIterator) != NULL)",
"    {",
"@@if AcceptsStateUnawareIterator",
"        retVal = true;",
"@@else",
"        retVal = false;",
"@@endif",
"    }",
"",
"    return retVal;",
"}",
"",
"/*============================== PROTECTED ==================================*/",
"",
"/*--------------------------- BEGIN STATE CLASS -----------------------------*/",
"",
"/*----------------------------- constructors --------------------------------*/",
"",
"@!Classname!@Base::@!Classname!@StateBase::@!Classname!@StateBase(void) :",
"@@BeginStateLoop@@",
"@@if StateElemIsOrdered",
"    _as@!StateElemName!@(@!StateElemDefault!@),",
"@@endif",
"@@EndStateLoop@@",
"    Inherited::StateType()",
"{",
"}",
"",
"@!Classname!@Base::@!Classname!@StateBase::@!Classname!@StateBase(",
"    const @!Classname!@StateBase &source) :",
"@@BeginStateLoop@@",
"@@if StateElemIsOrdered",
"    _as@!StateElemName!@(source._as@!StateElemName!@),",
"@@endif",
"@@EndStateLoop@@",
"    Inherited::StateType(source)",
"{",
"}",
"",
"/*------------------------------- destructor --------------------------------*/",
"",
"@!Classname!@Base::@!Classname!@StateBase::~@!Classname!@StateBase(void)",
"{",
"}",
"",
"/*--------------------------------- clone -----------------------------------*/",
"",
"ActorBase::ActorStateBase *",
"@!Classname!@Base::@!Classname!@StateBase::clone(void)",
"{",
"    return new @!Classname!@StateBase(*this);",
"}",
"",
"/*----------------------------- END STATE CLASS -----------------------------*/",
"",
"/*------------------------------- constructors ------------------------------*/",
"",
"@!Classname!@Base::@!Classname!@Base(void) :",
"@@BeginStateLoop@@",
"@@if !StateElemIsOrdered",
"    _as@!StateElemName!@(@!StateElemDefault!@),",
"@@endif",
"@@EndStateLoop@@",
"    Inherited()",
"{",
"}",
"",
"/*------------------------------- create state ------------------------------*/",
"",
"void",
"@!Classname!@Base::createState(void)",
"{",
"    setState(new @!Classname!@StateBase());",
"}",
"",
"",
"/*--------------------------------- cvs is's --------------------------------*/",
"",
"#ifdef OSG_SGI_CC",
"#pragma set woff 1174",
"#endif",
"",
"#ifdef OSG_LINUX_ICC",
"#pragma warning( disable : 177 )",
"#endif",
"",
"namespace",
"{",
"    static Char8 cvsid_cpp   [] = \"@(#)$Id:\";",
"    static Char8 cvsid_hpp   [] = OSG@!CLASSNAME!@BASE_HEADER_CVSID;",
"    static Char8 cvsid_inl   [] = OSG@!CLASSNAME!@BASE_INLINE_CVSID;",
"}",
NULL
};
