/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowViewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESHADOWVIEWPORTINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGShadowViewportBase.h"
#include "OSGShadowViewport.h"


OSG_BEGIN_NAMESPACE

const OSG::BitVector  ShadowViewportBase::OffBiasFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::OffBiasFieldId);

const OSG::BitVector  ShadowViewportBase::OffFactorFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::OffFactorFieldId);

const OSG::BitVector  ShadowViewportBase::SceneRootFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::SceneRootFieldId);

const OSG::BitVector  ShadowViewportBase::ShadowIntensityFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::ShadowIntensityFieldId);

const OSG::BitVector  ShadowViewportBase::MapSizeFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::MapSizeFieldId);

const OSG::BitVector  ShadowViewportBase::LightNodesFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::LightNodesFieldId);

const OSG::BitVector  ShadowViewportBase::ExcludeNodesFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::ExcludeNodesFieldId);

const OSG::BitVector  ShadowViewportBase::MapAutoUpdateFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::MapAutoUpdateFieldId);

const OSG::BitVector  ShadowViewportBase::ShadowModeFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::ShadowModeFieldId);

const OSG::BitVector  ShadowViewportBase::RangeFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::RangeFieldId);

const OSG::BitVector  ShadowViewportBase::ShadowOnFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::ShadowOnFieldId);

const OSG::BitVector  ShadowViewportBase::QualityModeFieldMask = 
    (TypeTraits<BitVector>::One << ShadowViewportBase::QualityModeFieldId);

const OSG::BitVector ShadowViewportBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var Real32          ShadowViewportBase::_sfOffBias
    Offset-Bias for Polygon-Offset. Needs to be used with Polygon-Chunk
*/
/*! \var Real32          ShadowViewportBase::_sfOffFactor
    Offset-Factor for Polygon-Offset. Needs to be used with Polygon-Chunk
*/
/*! \var NodePtr         ShadowViewportBase::_sfSceneRoot
    Scene root node.
*/
/*! \var Real32          ShadowViewportBase::_mfShadowIntensity
    0.0 = Black Shadows ... 1.0 = No Shadows
*/
/*! \var UInt32          ShadowViewportBase::_sfMapSize
    
*/
/*! \var NodePtr         ShadowViewportBase::_mfLightNodes
    
*/
/*! \var NodePtr         ShadowViewportBase::_mfExcludeNodes
    
*/
/*! \var bool            ShadowViewportBase::_sfMapAutoUpdate
    
*/
/*! \var UInt32          ShadowViewportBase::_sfShadowMode
    
*/
/*! \var Real32          ShadowViewportBase::_sfRange
    
*/
/*! \var bool            ShadowViewportBase::_sfShadowOn
    
*/
/*! \var bool            ShadowViewportBase::_sfQualityMode
    
*/

//! ShadowViewport description

FieldDescription *ShadowViewportBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "offBias", 
                     OffBiasFieldId, OffBiasFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFOffBias),
    new FieldDescription(SFReal32::getClassType(), 
                     "offFactor", 
                     OffFactorFieldId, OffFactorFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFOffFactor),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "sceneRoot", 
                     SceneRootFieldId, SceneRootFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFSceneRoot),
    new FieldDescription(MFReal32::getClassType(), 
                     "shadowIntensity", 
                     ShadowIntensityFieldId, ShadowIntensityFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getMFShadowIntensity),
    new FieldDescription(SFUInt32::getClassType(), 
                     "mapSize", 
                     MapSizeFieldId, MapSizeFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFMapSize),
    new FieldDescription(MFNodePtr::getClassType(), 
                     "lightNodes", 
                     LightNodesFieldId, LightNodesFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getMFLightNodes),
    new FieldDescription(MFNodePtr::getClassType(), 
                     "excludeNodes", 
                     ExcludeNodesFieldId, ExcludeNodesFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getMFExcludeNodes),
    new FieldDescription(SFBool::getClassType(), 
                     "mapAutoUpdate", 
                     MapAutoUpdateFieldId, MapAutoUpdateFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFMapAutoUpdate),
    new FieldDescription(SFUInt32::getClassType(), 
                     "shadowMode", 
                     ShadowModeFieldId, ShadowModeFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFShadowMode),
    new FieldDescription(SFReal32::getClassType(), 
                     "range", 
                     RangeFieldId, RangeFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFRange),
    new FieldDescription(SFBool::getClassType(), 
                     "shadowOn", 
                     ShadowOnFieldId, ShadowOnFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFShadowOn),
    new FieldDescription(SFBool::getClassType(), 
                     "qualityMode", 
                     QualityModeFieldId, QualityModeFieldMask,
                     false,
                     (FieldAccessMethod) &ShadowViewportBase::getSFQualityMode)
};


FieldContainerType ShadowViewportBase::_type(
    "ShadowViewport",
    "Viewport",
    NULL,
    (PrototypeCreateF) &ShadowViewportBase::createEmpty,
    ShadowViewport::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ShadowViewportBase, ShadowViewportPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShadowViewportBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ShadowViewportBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ShadowViewportBase::shallowCopy(void) const 
{ 
    ShadowViewportPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const ShadowViewport *>(this)); 

    return returnValue; 
}

UInt32 ShadowViewportBase::getContainerSize(void) const 
{ 
    return sizeof(ShadowViewport); 
}


#if !defined(OSG_FIXED_MFIELDSYNC)
void ShadowViewportBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ShadowViewportBase *) &other, whichField);
}
#else
void ShadowViewportBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField,                                    const SyncInfo       &sInfo     )
{
    this->executeSyncImpl((ShadowViewportBase *) &other, whichField, sInfo);
}
void ShadowViewportBase::execBeginEdit(const BitVector &whichField, 
                                            UInt32     uiAspect,
                                            UInt32     uiContainerSize) 
{
    this->execBeginEditImpl(whichField, uiAspect, uiContainerSize);
}

void ShadowViewportBase::onDestroyAspect(UInt32 uiId, UInt32 uiAspect)
{
    Inherited::onDestroyAspect(uiId, uiAspect);

    _mfShadowIntensity.terminateShare(uiAspect, this->getContainerSize());
    _mfLightNodes.terminateShare(uiAspect, this->getContainerSize());
    _mfExcludeNodes.terminateShare(uiAspect, this->getContainerSize());
}
#endif

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ShadowViewportBase::ShadowViewportBase(void) :
    _sfOffBias                (Real32(4)), 
    _sfOffFactor              (Real32(10)), 
    _sfSceneRoot              (), 
    _mfShadowIntensity        (), 
    _sfMapSize                (UInt32(512)), 
    _mfLightNodes             (), 
    _mfExcludeNodes           (), 
    _sfMapAutoUpdate          (bool(true)), 
    _sfShadowMode             (UInt32(0)), 
    _sfRange                  (Real32(0.25)), 
    _sfShadowOn               (bool(true)), 
    _sfQualityMode            (bool(true)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

ShadowViewportBase::ShadowViewportBase(const ShadowViewportBase &source) :
    _sfOffBias                (source._sfOffBias                ), 
    _sfOffFactor              (source._sfOffFactor              ), 
    _sfSceneRoot              (source._sfSceneRoot              ), 
    _mfShadowIntensity        (source._mfShadowIntensity        ), 
    _sfMapSize                (source._sfMapSize                ), 
    _mfLightNodes             (source._mfLightNodes             ), 
    _mfExcludeNodes           (source._mfExcludeNodes           ), 
    _sfMapAutoUpdate          (source._sfMapAutoUpdate          ), 
    _sfShadowMode             (source._sfShadowMode             ), 
    _sfRange                  (source._sfRange                  ), 
    _sfShadowOn               (source._sfShadowOn               ), 
    _sfQualityMode            (source._sfQualityMode            ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

ShadowViewportBase::~ShadowViewportBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ShadowViewportBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        returnValue += _sfOffBias.getBinSize();
    }

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        returnValue += _sfOffFactor.getBinSize();
    }

    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        returnValue += _sfSceneRoot.getBinSize();
    }

    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
    {
        returnValue += _mfShadowIntensity.getBinSize();
    }

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        returnValue += _sfMapSize.getBinSize();
    }

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        returnValue += _mfLightNodes.getBinSize();
    }

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        returnValue += _mfExcludeNodes.getBinSize();
    }

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        returnValue += _sfMapAutoUpdate.getBinSize();
    }

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        returnValue += _sfShadowMode.getBinSize();
    }

    if(FieldBits::NoField != (RangeFieldMask & whichField))
    {
        returnValue += _sfRange.getBinSize();
    }

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        returnValue += _sfShadowOn.getBinSize();
    }

    if(FieldBits::NoField != (QualityModeFieldMask & whichField))
    {
        returnValue += _sfQualityMode.getBinSize();
    }


    return returnValue;
}

void ShadowViewportBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        _sfOffBias.copyToBin(pMem);
    }

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        _sfOffFactor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        _sfSceneRoot.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
    {
        _mfShadowIntensity.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        _sfMapSize.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        _mfLightNodes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        _mfExcludeNodes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        _sfMapAutoUpdate.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        _sfShadowMode.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RangeFieldMask & whichField))
    {
        _sfRange.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        _sfShadowOn.copyToBin(pMem);
    }

    if(FieldBits::NoField != (QualityModeFieldMask & whichField))
    {
        _sfQualityMode.copyToBin(pMem);
    }


}

void ShadowViewportBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        _sfOffBias.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        _sfOffFactor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        _sfSceneRoot.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
    {
        _mfShadowIntensity.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        _sfMapSize.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        _mfLightNodes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        _mfExcludeNodes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        _sfMapAutoUpdate.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        _sfShadowMode.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RangeFieldMask & whichField))
    {
        _sfRange.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        _sfShadowOn.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (QualityModeFieldMask & whichField))
    {
        _sfQualityMode.copyFromBin(pMem);
    }


}

#if !defined(OSG_FIXED_MFIELDSYNC)
void ShadowViewportBase::executeSyncImpl(      ShadowViewportBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
        _sfOffBias.syncWith(pOther->_sfOffBias);

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
        _sfOffFactor.syncWith(pOther->_sfOffFactor);

    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
        _sfSceneRoot.syncWith(pOther->_sfSceneRoot);

    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
        _mfShadowIntensity.syncWith(pOther->_mfShadowIntensity);

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
        _sfMapSize.syncWith(pOther->_sfMapSize);

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
        _mfLightNodes.syncWith(pOther->_mfLightNodes);

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
        _mfExcludeNodes.syncWith(pOther->_mfExcludeNodes);

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
        _sfMapAutoUpdate.syncWith(pOther->_sfMapAutoUpdate);

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
        _sfShadowMode.syncWith(pOther->_sfShadowMode);

    if(FieldBits::NoField != (RangeFieldMask & whichField))
        _sfRange.syncWith(pOther->_sfRange);

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
        _sfShadowOn.syncWith(pOther->_sfShadowOn);

    if(FieldBits::NoField != (QualityModeFieldMask & whichField))
        _sfQualityMode.syncWith(pOther->_sfQualityMode);


}
#else
void ShadowViewportBase::executeSyncImpl(      ShadowViewportBase *pOther,
                                        const BitVector         &whichField,
                                        const SyncInfo          &sInfo      )
{

    Inherited::executeSyncImpl(pOther, whichField, sInfo);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
        _sfOffBias.syncWith(pOther->_sfOffBias);

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
        _sfOffFactor.syncWith(pOther->_sfOffFactor);

    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
        _sfSceneRoot.syncWith(pOther->_sfSceneRoot);

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
        _sfMapSize.syncWith(pOther->_sfMapSize);

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
        _sfMapAutoUpdate.syncWith(pOther->_sfMapAutoUpdate);

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
        _sfShadowMode.syncWith(pOther->_sfShadowMode);

    if(FieldBits::NoField != (RangeFieldMask & whichField))
        _sfRange.syncWith(pOther->_sfRange);

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
        _sfShadowOn.syncWith(pOther->_sfShadowOn);

    if(FieldBits::NoField != (QualityModeFieldMask & whichField))
        _sfQualityMode.syncWith(pOther->_sfQualityMode);


    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
        _mfShadowIntensity.syncWith(pOther->_mfShadowIntensity, sInfo);

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
        _mfLightNodes.syncWith(pOther->_mfLightNodes, sInfo);

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
        _mfExcludeNodes.syncWith(pOther->_mfExcludeNodes, sInfo);


}

void ShadowViewportBase::execBeginEditImpl (const BitVector &whichField, 
                                                 UInt32     uiAspect,
                                                 UInt32     uiContainerSize)
{
    Inherited::execBeginEditImpl(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ShadowIntensityFieldMask & whichField))
        _mfShadowIntensity.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
        _mfLightNodes.beginEdit(uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
        _mfExcludeNodes.beginEdit(uiAspect, uiContainerSize);

}
#endif



OSG_END_NAMESPACE

#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<ShadowViewportPtr>::_type("ShadowViewportPtr", "ViewportPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(ShadowViewportPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(ShadowViewportPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGShadowViewportBase.cpp,v 1.3 2006/04/21 08:16:10 yjung Exp $";
    static Char8 cvsid_hpp       [] = OSGSHADOWVIEWPORTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSHADOWVIEWPORTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSHADOWVIEWPORTFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE

