// Copyright NVIDIA Corporation 2002-2005
// TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
// *AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
// OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
// BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
// WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
// BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
// ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
// BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES 

float4x4 mvp  : WorldViewProjection;
float4x4 mv   : WorldView;
float4x4 mvit : WorldViewIT;

float3 Color = {1.0f, .0f, .0f};

float4 vertex(uniform float4x4 modelViewProj,
              uniform float4x4 modelView,
              uniform float4x4 modelViewIT,
              float4 P : POSITION,
              float4 N : NORMAL,
              out float4 CC : COLOR0,
              out float3 Pcam : TEXCOORD0,
              out float3 Ncam : TEXCOORD1) : POSITION
{
  CC.xyz = .5 * Color.xyz + .5 * normalize(N.xyz);
  Pcam   = mul(modelView, P).xyz;
  Ncam   = mul(modelViewIT, N).xyz;
  
  return mul(modelViewProj, P);
}

float4 fragment(uniform float3 C,
                float3 Pcam : TEXCOORD0, 
                float3 Ncam : TEXCOORD1) : COLOR 
{
  float3 Plight = float3(-10,10,10);
  float3 wi     = normalize(Plight - Pcam);
  float3 wo     = normalize(-Pcam);
  float3 H      = normalize(wi+wo);
  Ncam          = normalize(Ncam);
  
  float3 Ci = float3(.1, .1, .1);
  Ci += max(0., dot(wi, Ncam)) * (.5 * C + pow(max(0., dot(Ncam, H)), 20.f));
  
  return float4(Ci, 1);
}

technique FragmentBlinnLighting 
{
  pass p0 
  {
    VertexProgram   = compile arbvp1 vertex(mvp, mv, mvit);
    FragmentProgram = compile arbfp1 fragment(Color/*.gbr*/);
  }
}

technique FixedFunctionLighting 
{
  pass p0 
  {
    LightingEnable    = true;
    LightEnable[0]    = true;
    LightPosition[0]  = float4(-10, 10, 10, 1);
    LightAmbient[0]   = float4(.1,.1,.1,.1);
    LightDiffuse[0]   = float4(1,1,1,1);
    LightSpecular[0]  = float4(1,1,1,1);

    MaterialShininess = 10.f;
    MaterialAmbient   = float4(1,1,1,1);
    MaterialDiffuse   = float4(.5, .5, .5, 1);
    MaterialSpecular  = float4(.5, .5, .5, 1);
  }
}

technique FixedFunctionFog 
{
  pass p0 
  {
    FogEnable   = true;
    FogMode     = Linear;
    FogDensity  = 5.;
    FogStart    = 0.;
    FogEnd      = 5;
    FogColor    = float4(.5, .5, .5, .5);
  }
}

technique VertexProgram 
{
  pass p0
  {
      VertexProgram = compile arbvp1 vertex(mvp, mv, mvit);
      DepthFunc     = LEqual;
  }
}
