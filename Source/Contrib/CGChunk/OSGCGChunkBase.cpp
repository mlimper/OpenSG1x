/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CGChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECGCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGCGChunkBase.h"
#include "OSGCGChunk.h"


OSG_USING_NAMESPACE

const OSG::BitVector  CGChunkBase::VertexProgramFieldMask = 
    (TypeTraits<BitVector>::One << CGChunkBase::VertexProgramFieldId);

const OSG::BitVector  CGChunkBase::FragmentProgramFieldMask = 
    (TypeTraits<BitVector>::One << CGChunkBase::FragmentProgramFieldId);

const OSG::BitVector  CGChunkBase::ParamNamesFieldMask = 
    (TypeTraits<BitVector>::One << CGChunkBase::ParamNamesFieldId);

const OSG::BitVector  CGChunkBase::ParamValuesFieldMask = 
    (TypeTraits<BitVector>::One << CGChunkBase::ParamValuesFieldId);

const OSG::BitVector  CGChunkBase::GLIdFieldMask = 
    (TypeTraits<BitVector>::One << CGChunkBase::GLIdFieldId);

const OSG::BitVector CGChunkBase::MTInfluenceMask = 
    (Inherited::MTInfluenceMask) | 
    (static_cast<BitVector>(0x0) << Inherited::NextFieldId); 


// Field descriptions

/*! \var std::string     CGChunkBase::_sfVertexProgram
    vertex program source
*/
/*! \var std::string     CGChunkBase::_sfFragmentProgram
    fragment program source
*/
/*! \var std::string     CGChunkBase::_mfParamNames
    program parameter names
*/
/*! \var Vec4f           CGChunkBase::_mfParamValues
    program parameter
*/
/*! \var UInt32          CGChunkBase::_sfGLId
    
*/

//! CGChunk description

FieldDescription *CGChunkBase::_desc[] = 
{
    new FieldDescription(SFString::getClassType(), 
                     "vertexProgram", 
                     VertexProgramFieldId, VertexProgramFieldMask,
                     false,
                     (FieldAccessMethod) &CGChunkBase::getSFVertexProgram),
    new FieldDescription(SFString::getClassType(), 
                     "fragmentProgram", 
                     FragmentProgramFieldId, FragmentProgramFieldMask,
                     false,
                     (FieldAccessMethod) &CGChunkBase::getSFFragmentProgram),
    new FieldDescription(MFString::getClassType(), 
                     "paramNames", 
                     ParamNamesFieldId, ParamNamesFieldMask,
                     false,
                     (FieldAccessMethod) &CGChunkBase::getMFParamNames),
    new FieldDescription(MFVec4f::getClassType(), 
                     "paramValues", 
                     ParamValuesFieldId, ParamValuesFieldMask,
                     false,
                     (FieldAccessMethod) &CGChunkBase::getMFParamValues),
    new FieldDescription(SFUInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &CGChunkBase::getSFGLId)
};


FieldContainerType CGChunkBase::_type(
    "CGChunk",
    "StateChunk",
    NULL,
    (PrototypeCreateF) &CGChunkBase::createEmpty,
    CGChunk::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(CGChunkBase, CGChunkPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &CGChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CGChunkBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr CGChunkBase::shallowCopy(void) const 
{ 
    CGChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const CGChunk *>(this)); 

    return returnValue; 
}

UInt32 CGChunkBase::getContainerSize(void) const 
{ 
    return sizeof(CGChunk); 
}


void CGChunkBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((CGChunkBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

CGChunkBase::CGChunkBase(void) :
    _sfVertexProgram          (), 
    _sfFragmentProgram        (), 
    _mfParamNames             (), 
    _mfParamValues            (), 
    _sfGLId                   (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

CGChunkBase::CGChunkBase(const CGChunkBase &source) :
    _sfVertexProgram          (source._sfVertexProgram          ), 
    _sfFragmentProgram        (source._sfFragmentProgram        ), 
    _mfParamNames             (source._mfParamNames             ), 
    _mfParamValues            (source._mfParamValues            ), 
    _sfGLId                   (source._sfGLId                   ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

CGChunkBase::~CGChunkBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 CGChunkBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        returnValue += _sfVertexProgram.getBinSize();
    }

    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        returnValue += _sfFragmentProgram.getBinSize();
    }

    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        returnValue += _mfParamNames.getBinSize();
    }

    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        returnValue += _mfParamValues.getBinSize();
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }


    return returnValue;
}

void CGChunkBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        _sfVertexProgram.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        _sfFragmentProgram.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        _mfParamNames.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        _mfParamValues.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }


}

void CGChunkBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        _sfVertexProgram.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        _sfFragmentProgram.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        _mfParamNames.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        _mfParamValues.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }


}

void CGChunkBase::executeSyncImpl(      CGChunkBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
        _sfVertexProgram.syncWith(pOther->_sfVertexProgram);

    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
        _sfFragmentProgram.syncWith(pOther->_sfFragmentProgram);

    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
        _mfParamNames.syncWith(pOther->_mfParamNames);

    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
        _mfParamValues.syncWith(pOther->_mfParamValues);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);


}



#include <OSGSFieldTypeDef.inl>
#include <OSGMFieldTypeDef.inl>

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldDataTraits<CGChunkPtr>::_type("CGChunkPtr", "StateChunkPtr");
#endif

OSG_DLLEXPORT_SFIELD_DEF1(CGChunkPtr, OSG_CONTRIBLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(CGChunkPtr, OSG_CONTRIBLIB_DLLTMPLMAPPING);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h,v 1.41 2003/10/24 15:39:26 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGCGCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGCGCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGCGCHUNKFIELDS_HEADER_CVSID;
}

