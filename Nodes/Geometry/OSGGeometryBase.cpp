/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILEGEOMETRY
#define OSG_COMPILEGEOMETRYINST

#include "OSGGeometryBase.h"
#include "OSGGeometry.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/


/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		GeometryBase::TypesFieldId;
const OSG::BitVector	GeometryBase::TypesFieldMask;

const OSG::UInt32		GeometryBase::LengthsFieldId;
const OSG::BitVector	GeometryBase::LengthsFieldMask;

const OSG::UInt32		GeometryBase::PositionsFieldId;
const OSG::BitVector	GeometryBase::PositionsFieldMask;

const OSG::UInt32		GeometryBase::NormalsFieldId;
const OSG::BitVector	GeometryBase::NormalsFieldMask;

const OSG::UInt32		GeometryBase::NormalPerVertexFieldId;
const OSG::BitVector	GeometryBase::NormalPerVertexFieldMask;

const OSG::UInt32		GeometryBase::ColorsFieldId;
const OSG::BitVector	GeometryBase::ColorsFieldMask;

const OSG::UInt32		GeometryBase::ColorPerVertexFieldId;
const OSG::BitVector	GeometryBase::ColorPerVertexFieldMask;

const OSG::UInt32		GeometryBase::TexCoordsFieldId;
const OSG::BitVector	GeometryBase::TexCoordsFieldMask;

const OSG::UInt32		GeometryBase::IndexFieldId;
const OSG::BitVector	GeometryBase::IndexFieldMask;

const OSG::UInt32		GeometryBase::MaterialFieldId;
const OSG::BitVector	GeometryBase::MaterialFieldMask;


const OSG::UInt32    	GeometryBase::NextFieldId; 
const OSG::BitVector 	GeometryBase::NextFieldMask;


char GeometryBase::cvsid[] = "@(#)$Id: OSGGeometryBase.cpp,v 1.2 2001/05/23 23:05:56 dirk Exp $";

/** \brief Group field description
 */

FieldDescription GeometryBase::_desc[] = 
{
    FieldDescription(SFGeoPTypePtr::getClassType(), 
                     "types", 
                     TypesFieldId, TypesFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTypes),
    FieldDescription(SFGeoPLengthPtr::getClassType(), 
                     "lengths", 
                     LengthsFieldId, LengthsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFLengths),
    FieldDescription(SFGeoPositionPtr::getClassType(), 
                     "positions", 
                     PositionsFieldId, PositionsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFPositions),
    FieldDescription(SFGeoNormalPtr::getClassType(), 
                     "normals", 
                     NormalsFieldId, NormalsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFNormals),
    FieldDescription(SFBool::getClassType(), 
                     "normalPerVertex", 
                     NormalPerVertexFieldId, NormalPerVertexFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFNormalPerVertex),
    FieldDescription(SFGeoColorPtr::getClassType(), 
                     "colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFColors),
    FieldDescription(SFBool::getClassType(), 
                     "colorPerVertex", 
                     ColorPerVertexFieldId, ColorPerVertexFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFColorPerVertex),
    FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords", 
                     TexCoordsFieldId, TexCoordsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords),
    FieldDescription(SFGeoIndexPtr::getClassType(), 
                     "index", 
                     IndexFieldId, IndexFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFIndex),
    FieldDescription(SFMaterialPtr::getClassType(), 
                     "material", 
                     MaterialFieldId, MaterialFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFMaterial)
};

/** \brief Geometry type
 */

FieldContainerType GeometryBase::_type(
    "Geometry",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &GeometryBase::createEmpty,
    Geometry::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(GeometryBase, GeometryPtr)

FieldContainerType &GeometryBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeometryBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr GeometryBase::shallowCopy(void) const 
{ 
    GeometryPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Geometry *>(this)); 

    return returnValue; 
}

UInt32 GeometryBase::getSize(void) const 
{ 
    return sizeof(GeometryBase); 
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

GeometryBase::GeometryBase(void) :
	_types	(), 
	_lengths	(), 
	_positions	(), 
	_normals	(), 
	_normalPerVertex	(), 
	_colors	(), 
	_colorPerVertex	(), 
	_texCoords	(), 
	_index	(), 
	_material	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

GeometryBase::GeometryBase(const GeometryBase &source) :
	_types		(source._types), 
	_lengths		(source._lengths), 
	_positions		(source._positions), 
	_normals		(source._normals), 
	_normalPerVertex		(source._normalPerVertex), 
	_colors		(source._colors), 
	_colorPerVertex		(source._colorPerVertex), 
	_texCoords		(source._texCoords), 
	_index		(source._index), 
	_material		(source._material), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

GeometryBase::~GeometryBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

