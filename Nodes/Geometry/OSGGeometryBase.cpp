/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEGEOMETRYINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGeometryBase.h"
#include "OSGGeometry.h"



OSG_USING_NAMESPACE

const OSG::BitVector	GeometryBase::TypesFieldMask = 
    (1 << GeometryBase::TypesFieldId);

const OSG::BitVector	GeometryBase::LengthsFieldMask = 
    (1 << GeometryBase::LengthsFieldId);

const OSG::BitVector	GeometryBase::PositionsFieldMask = 
    (1 << GeometryBase::PositionsFieldId);

const OSG::BitVector	GeometryBase::NormalsFieldMask = 
    (1 << GeometryBase::NormalsFieldId);

const OSG::BitVector	GeometryBase::ColorsFieldMask = 
    (1 << GeometryBase::ColorsFieldId);

const OSG::BitVector	GeometryBase::TexCoordsFieldMask = 
    (1 << GeometryBase::TexCoordsFieldId);

const OSG::BitVector	GeometryBase::IndexFieldMask = 
    (1 << GeometryBase::IndexFieldId);

const OSG::BitVector	GeometryBase::IndexMappingFieldMask = 
    (1 << GeometryBase::IndexMappingFieldId);

const OSG::BitVector	GeometryBase::MaterialFieldMask = 
    (1 << GeometryBase::MaterialFieldId);

const OSG::BitVector	GeometryBase::DlistCacheFieldMask = 
    (1 << GeometryBase::DlistCacheFieldId);

const OSG::BitVector	GeometryBase::GLIdFieldMask = 
    (1 << GeometryBase::GLIdFieldId);



char GeometryBase::cvsid[] = "@(#)$Id: OSGGeometryBase.cpp,v 1.14 2001/09/13 16:21:01 dirk Exp $";

// Field descriptions

/*! \var GeoPTypePtr     GeometryBase::_sfTypes
    
*/
/*! \var GeoPLengthPtr   GeometryBase::_sfLengths
    
*/
/*! \var GeoPositionPtr  GeometryBase::_sfPositions
    
*/
/*! \var GeoNormalPtr    GeometryBase::_sfNormals
    
*/
/*! \var GeoColorPtr     GeometryBase::_sfColors
    
*/
/*! \var GeoTexCoordsPtr GeometryBase::_sfTexCoords
    
*/
/*! \var GeoIndexPtr     GeometryBase::_sfIndex
    
*/
/*! \var UInt16          GeometryBase::_mfIndexMapping
    
*/
/*! \var MaterialPtr     GeometryBase::_sfMaterial
    
*/
/*! \var Bool            GeometryBase::_sfDlistCache
    Flag to activate caching the geometry inside a display list.
*/
/*! \var Int32           GeometryBase::_sfGLId
    The dlist id, if used.
*/
//! Geometry description

FieldDescription *GeometryBase::_desc[] = 
{
    new FieldDescription(SFGeoPTypePtr::getClassType(), 
                     "types", 
                     TypesFieldId, TypesFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTypes),
    new FieldDescription(SFGeoPLengthPtr::getClassType(), 
                     "lengths", 
                     LengthsFieldId, LengthsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFLengths),
    new FieldDescription(SFGeoPositionPtr::getClassType(), 
                     "positions", 
                     PositionsFieldId, PositionsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFPositions),
    new FieldDescription(SFGeoNormalPtr::getClassType(), 
                     "normals", 
                     NormalsFieldId, NormalsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFNormals),
    new FieldDescription(SFGeoColorPtr::getClassType(), 
                     "colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFColors),
    new FieldDescription(SFGeoTexCoordsPtr::getClassType(), 
                     "texCoords", 
                     TexCoordsFieldId, TexCoordsFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFTexCoords),
    new FieldDescription(SFGeoIndexPtr::getClassType(), 
                     "index", 
                     IndexFieldId, IndexFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFIndex),
    new FieldDescription(MFUInt16::getClassType(), 
                     "indexMapping", 
                     IndexMappingFieldId, IndexMappingFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getMFIndexMapping),
    new FieldDescription(SFMaterialPtr::getClassType(), 
                     "material", 
                     MaterialFieldId, MaterialFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFMaterial),
    new FieldDescription(SFBool::getClassType(), 
                     "dlistCache", 
                     DlistCacheFieldId, DlistCacheFieldMask,
                     false,
                     (FieldAccessMethod) &GeometryBase::getSFDlistCache),
    new FieldDescription(SFInt32::getClassType(), 
                     "GLId", 
                     GLIdFieldId, GLIdFieldMask,
                     true,
                     (FieldAccessMethod) &GeometryBase::getSFGLId)
};

//! Geometry type

FieldContainerType GeometryBase::_type(
    "Geometry",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &GeometryBase::createEmpty,
    Geometry::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(GeometryBase, GeometryPtr)

/*------------------------------ get -----------------------------------*/

static const char *getClassname(void)
{
    return "Geometry"; 
}

FieldContainerType &GeometryBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeometryBase::getType(void) const 
{
    return _type;
} 
/*! \}                                                                 */

FieldContainerPtr GeometryBase::shallowCopy(void) const 
{ 
    GeometryPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Geometry *>(this)); 

    return returnValue; 
}

UInt32 GeometryBase::getContainerSize(void) const 
{ 
    return sizeof(GeometryBase); 
}


void GeometryBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GeometryBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

GeometryBase::GeometryBase(void) :
	_sfTypes                  (), 
	_sfLengths                (), 
	_sfPositions              (), 
	_sfNormals                (), 
	_sfColors                 (), 
	_sfTexCoords              (), 
	_sfIndex                  (), 
	_mfIndexMapping           (), 
	_sfMaterial               (), 
	_sfDlistCache             (Bool(true)), 
	_sfGLId                   (Int32(0)), 
	Inherited() 
{
}

//! Copy Constructor

GeometryBase::GeometryBase(const GeometryBase &source) :
	_sfTypes                  (source._sfTypes                  ), 
	_sfLengths                (source._sfLengths                ), 
	_sfPositions              (source._sfPositions              ), 
	_sfNormals                (source._sfNormals                ), 
	_sfColors                 (source._sfColors                 ), 
	_sfTexCoords              (source._sfTexCoords              ), 
	_sfIndex                  (source._sfIndex                  ), 
	_mfIndexMapping           (source._mfIndexMapping           ), 
	_sfMaterial               (source._sfMaterial               ), 
	_sfDlistCache             (source._sfDlistCache             ), 
	_sfGLId                   (source._sfGLId                   ), 
	Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

GeometryBase::~GeometryBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GeometryBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        returnValue += _sfTypes.getBinSize();
    }

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
    {
        returnValue += _sfLengths.getBinSize();
    }

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _sfPositions.getBinSize();
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        returnValue += _sfNormals.getBinSize();
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _sfColors.getBinSize();
    }

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        returnValue += _sfTexCoords.getBinSize();
    }

    if(FieldBits::NoField != (IndexFieldMask & whichField))
    {
        returnValue += _sfIndex.getBinSize();
    }

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
    {
        returnValue += _mfIndexMapping.getBinSize();
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
    {
        returnValue += _sfDlistCache.getBinSize();
    }

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }


    return returnValue;
}

MemoryHandle GeometryBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        pMem = _sfTypes.copyToBin(pMem);

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
        pMem = _sfLengths.copyToBin(pMem);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        pMem = _sfPositions.copyToBin(pMem);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        pMem = _sfNormals.copyToBin(pMem);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        pMem = _sfColors.copyToBin(pMem);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        pMem = _sfTexCoords.copyToBin(pMem);

    if(FieldBits::NoField != (IndexFieldMask & whichField))
        pMem = _sfIndex.copyToBin(pMem);

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        pMem = _mfIndexMapping.copyToBin(pMem);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        pMem = _sfMaterial.copyToBin(pMem);

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
        pMem = _sfDlistCache.copyToBin(pMem);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        pMem = _sfGLId.copyToBin(pMem);


    return pMem;
}

MemoryHandle GeometryBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        pMem = _sfTypes.copyFromBin(pMem);

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
        pMem = _sfLengths.copyFromBin(pMem);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        pMem = _sfPositions.copyFromBin(pMem);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        pMem = _sfNormals.copyFromBin(pMem);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        pMem = _sfColors.copyFromBin(pMem);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        pMem = _sfTexCoords.copyFromBin(pMem);

    if(FieldBits::NoField != (IndexFieldMask & whichField))
        pMem = _sfIndex.copyFromBin(pMem);

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        pMem = _mfIndexMapping.copyFromBin(pMem);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        pMem = _sfMaterial.copyFromBin(pMem);

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
        pMem = _sfDlistCache.copyFromBin(pMem);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        pMem = _sfGLId.copyFromBin(pMem);


    return pMem;
}

void GeometryBase::executeSyncImpl(      GeometryBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        _sfTypes.syncWith(pOther->_sfTypes);

    if(FieldBits::NoField != (LengthsFieldMask & whichField))
        _sfLengths.syncWith(pOther->_sfLengths);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        _sfTexCoords.syncWith(pOther->_sfTexCoords);

    if(FieldBits::NoField != (IndexFieldMask & whichField))
        _sfIndex.syncWith(pOther->_sfIndex);

    if(FieldBits::NoField != (IndexMappingFieldMask & whichField))
        _mfIndexMapping.syncWith(pOther->_mfIndexMapping);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);

    if(FieldBits::NoField != (DlistCacheFieldMask & whichField))
        _sfDlistCache.syncWith(pOther->_sfDlistCache);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);


}

