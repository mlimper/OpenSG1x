/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGEOMETRYBASE_H_
#define _OSGGEOMETRYBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>

#include <OSGNodeCore.h> // Parent

#include <OSGGeoPTypesFields.h> // Types type
#include <OSGGeoPLengthsFields.h> // Lengths type
#include <OSGGeoPositionsFields.h> // Positions type
#include <OSGGeoNormalsFields.h> // Normals type
#include <OSGGeoColorsFields.h> // Colors type
#include <OSGGeoTexCoordsFields.h> // TexCoords type
#include <OSGGeoIndicesFields.h> // Indices type
#include <OSGUInt16Fields.h> // IndexMapping type
#include <OSGMaterialFields.h> // Material type
#include <OSGBoolFields.h> // DlistCache type
#include <OSGInt32Fields.h> // GLId type

#include <OSGGeometryFields.h>

OSG_BEGIN_NAMESPACE

class Geometry;
class BinaryDataHandler;

//! \brief Geometry Base Class.

class OSG_SYSTEMLIB_DLLMAPPING GeometryBase : public NodeCore
{
  private:

    typedef NodeCore Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        TypesFieldId        = Inherited::NextFieldId,
        LengthsFieldId      = TypesFieldId        + 1,
        PositionsFieldId    = LengthsFieldId      + 1,
        NormalsFieldId      = PositionsFieldId    + 1,
        ColorsFieldId       = NormalsFieldId      + 1,
        TexCoordsFieldId    = ColorsFieldId       + 1,
        IndicesFieldId      = TexCoordsFieldId    + 1,
        IndexMappingFieldId = IndicesFieldId      + 1,
        MaterialFieldId     = IndexMappingFieldId + 1,
        DlistCacheFieldId   = MaterialFieldId     + 1,
        GLIdFieldId         = DlistCacheFieldId   + 1,
        NextFieldId         = GLIdFieldId         + 1
    };

    static const osg::BitVector TypesFieldMask;
    static const osg::BitVector LengthsFieldMask;
    static const osg::BitVector PositionsFieldMask;
    static const osg::BitVector NormalsFieldMask;
    static const osg::BitVector ColorsFieldMask;
    static const osg::BitVector TexCoordsFieldMask;
    static const osg::BitVector IndicesFieldMask;
    static const osg::BitVector IndexMappingFieldMask;
    static const osg::BitVector MaterialFieldMask;
    static const osg::BitVector DlistCacheFieldMask;
    static const osg::BitVector GLIdFieldMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

          SFGeoPTypesPtr      *getSFTypes          (void);
          SFGeoPLengthsPtr    *getSFLengths        (void);
          SFGeoPositionsPtr   *getSFPositions      (void);
          SFGeoNormalsPtr     *getSFNormals        (void);
          SFGeoColorsPtr      *getSFColors         (void);
          SFGeoTexCoordsPtr   *getSFTexCoords      (void);
          SFGeoIndicesPtr     *getSFIndices        (void);
          MFUInt16            *getMFIndexMapping   (void);
          SFMaterialPtr       *getSFMaterial       (void);
          SFBool              *getSFDlistCache     (void);

          GeoPTypesPtr        &getTypes          (void);
    const GeoPTypesPtr        &getTypes          (void) const;
          GeoPLengthsPtr      &getLengths        (void);
    const GeoPLengthsPtr      &getLengths        (void) const;
          GeoPositionsPtr     &getPositions      (void);
    const GeoPositionsPtr     &getPositions      (void) const;
          GeoNormalsPtr       &getNormals        (void);
    const GeoNormalsPtr       &getNormals        (void) const;
          GeoColorsPtr        &getColors         (void);
    const GeoColorsPtr        &getColors         (void) const;
          GeoTexCoordsPtr     &getTexCoords      (void);
    const GeoTexCoordsPtr     &getTexCoords      (void) const;
          GeoIndicesPtr       &getIndices        (void);
    const GeoIndicesPtr       &getIndices        (void) const;
          MaterialPtr         &getMaterial       (void);
    const MaterialPtr         &getMaterial       (void) const;
          bool                &getDlistCache     (void);
    const bool                &getDlistCache     (void) const;
          UInt16              &getIndexMapping   (UInt32 index);
          MFUInt16            &getIndexMapping   (void);
    const MFUInt16            &getIndexMapping   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    void setTypes          ( const GeoPTypesPtr &value );
    void setLengths        ( const GeoPLengthsPtr &value );
    void setPositions      ( const GeoPositionsPtr &value );
    void setNormals        ( const GeoNormalsPtr &value );
    void setColors         ( const GeoColorsPtr &value );
    void setTexCoords      ( const GeoTexCoordsPtr &value );
    void setIndices        ( const GeoIndicesPtr &value );
    void setMaterial       ( const MaterialPtr &value );
    void setDlistCache     ( const bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  GeometryPtr      create          (void); 
    static  GeometryPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFGeoPTypesPtr      _sfTypes;
    SFGeoPLengthsPtr    _sfLengths;
    SFGeoPositionsPtr   _sfPositions;
    SFGeoNormalsPtr     _sfNormals;
    SFGeoColorsPtr      _sfColors;
    SFGeoTexCoordsPtr   _sfTexCoords;
    SFGeoIndicesPtr     _sfIndices;
    MFUInt16            _mfIndexMapping;
    SFMaterialPtr       _sfMaterial;
    SFBool              _sfDlistCache;
    SFInt32             _sfGLId;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    GeometryBase(void);
    GeometryBase(const GeometryBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~GeometryBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

          SFInt32             *getSFGLId           (void);

          Int32               &getGLId           (void);
    const Int32               &getGLId           (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    void setGLId           (const Int32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      GeometryBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const GeometryBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef GeometryBase *GeometryBaseP;

OSG_END_NAMESPACE

#define OSGGEOMETRYBASE_HEADER_CVSID "@(#)$Id: $"

#endif /* _OSGGEOMETRYBASE_H_ */
