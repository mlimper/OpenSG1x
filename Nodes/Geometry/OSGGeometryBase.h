/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGEOMETRYBASE_H_
#define _OSGGEOMETRYBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGConfig.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>
#include <OSGGeometryDef.h>
#include <OSGNodeCore.h>
#include <OSGGeoPTypeFields.h>	// Types type
#include <OSGGeoPLengthFields.h>	// Lengths type
#include <OSGGeoPositionFields.h>	// Positions type
#include <OSGGeoNormalFields.h>	// Normals type
#include <OSGBoolFields.h>	// NormalPerVertex type
#include <OSGGeoColorFields.h>	// Colors type
#include <OSGBoolFields.h>	// ColorPerVertex type
#include <OSGGeoTexCoordsFields.h>	// TexCoords type
#include <OSGGeoIndexFields.h>	// Index type
#include <OSGMaterialFields.h>	// Material type

#include <OSGGeometryFields.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class Geometry;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! Geometry Base Class. */

class OSG_GEOMETRY_DLLMAPPING GeometryBase : public NodeCore
{
  private:

    typedef NodeCore Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
	static const osg::UInt32    TypesFieldId	= Inherited::NextFieldId;
	static const osg::BitVector TypesFieldMask	= Inherited::NextFieldMask;

	static const osg::UInt32    LengthsFieldId   = TypesFieldId + 1;
	static const osg::BitVector LengthsFieldMask = TypesFieldMask << 1;

	static const osg::UInt32    PositionsFieldId   = LengthsFieldId + 1;
	static const osg::BitVector PositionsFieldMask = LengthsFieldMask << 1;

	static const osg::UInt32    NormalsFieldId   = PositionsFieldId + 1;
	static const osg::BitVector NormalsFieldMask = PositionsFieldMask << 1;

	static const osg::UInt32    NormalPerVertexFieldId   = NormalsFieldId + 1;
	static const osg::BitVector NormalPerVertexFieldMask = NormalsFieldMask << 1;

	static const osg::UInt32    ColorsFieldId   = NormalPerVertexFieldId + 1;
	static const osg::BitVector ColorsFieldMask = NormalPerVertexFieldMask << 1;

	static const osg::UInt32    ColorPerVertexFieldId   = ColorsFieldId + 1;
	static const osg::BitVector ColorPerVertexFieldMask = ColorsFieldMask << 1;

	static const osg::UInt32    TexCoordsFieldId   = ColorPerVertexFieldId + 1;
	static const osg::BitVector TexCoordsFieldMask = ColorPerVertexFieldMask << 1;

	static const osg::UInt32    IndexFieldId   = TexCoordsFieldId + 1;
	static const osg::BitVector IndexFieldMask = TexCoordsFieldMask << 1;

	static const osg::UInt32    MaterialFieldId   = IndexFieldId + 1;
	static const osg::BitVector MaterialFieldMask = IndexFieldMask << 1;

	static const osg::UInt32	NextFieldId   = MaterialFieldId + 1;
	static const osg::BitVector	NextFieldMask = MaterialFieldMask << 1;


    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "GeometryBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType(void); 
    virtual const OSG::FieldContainerType &getType(void) const; 
    
    static OSG::FieldContainerType &getClassType  (void); 
    static OSG::UInt32              getClassTypeId(void); 
    static GeometryPtr         create        (void); 
    static GeometryPtr         createEmpty   (void); 

    virtual OSG::FieldContainerPtr shallowCopy(void) const; 
    virtual OSG::UInt32            getSize    (void) const;

    virtual void                   executeSync(FieldContainer &other,
                                               BitVector       whichField);
    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFGeoPTypePtr	*getSFTypes(void);
    inline SFGeoPLengthPtr	*getSFLengths(void);
    inline SFGeoPositionPtr	*getSFPositions(void);
    inline SFGeoNormalPtr	*getSFNormals(void);
    inline SFBool	*getSFNormalPerVertex(void);
    inline SFGeoColorPtr	*getSFColors(void);
    inline SFBool	*getSFColorPerVertex(void);
    inline SFGeoTexCoordsPtr	*getSFTexCoords(void);
    inline SFGeoIndexPtr	*getSFIndex(void);
    inline SFMaterialPtr	*getSFMaterial(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       GeoPTypePtr	&getTypes(void);
    inline const GeoPTypePtr	&getTypes(void) const;
    inline       void	             setTypes( GeoPTypePtr value );
    inline       GeoPLengthPtr	&getLengths(void);
    inline const GeoPLengthPtr	&getLengths(void) const;
    inline       void	             setLengths( GeoPLengthPtr value );
    inline       GeoPositionPtr	&getPositions(void);
    inline const GeoPositionPtr	&getPositions(void) const;
    inline       void	             setPositions( GeoPositionPtr value );
    inline       GeoNormalPtr	&getNormals(void);
    inline const GeoNormalPtr	&getNormals(void) const;
    inline       void	             setNormals( GeoNormalPtr value );
    inline       Bool	&getNormalPerVertex(void);
    inline const Bool	&getNormalPerVertex(void) const;
    inline       void	             setNormalPerVertex( Bool value );
    inline       GeoColorPtr	&getColors(void);
    inline const GeoColorPtr	&getColors(void) const;
    inline       void	             setColors( GeoColorPtr value );
    inline       Bool	&getColorPerVertex(void);
    inline const Bool	&getColorPerVertex(void) const;
    inline       void	             setColorPerVertex( Bool value );
    inline       GeoTexCoordsPtr	&getTexCoords(void);
    inline const GeoTexCoordsPtr	&getTexCoords(void) const;
    inline       void	             setTexCoords( GeoTexCoordsPtr value );
    inline       GeoIndexPtr	&getIndex(void);
    inline const GeoIndexPtr	&getIndex(void) const;
    inline       void	             setIndex( GeoIndexPtr value );
    inline       MaterialPtr	&getMaterial(void);
    inline const MaterialPtr	&getMaterial(void) const;
    inline       void	             setMaterial( MaterialPtr value );


    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! 
     */
    SFGeoPTypePtr	_types;
    /*! 
     */
    SFGeoPLengthPtr	_lengths;
    /*! 
     */
    SFGeoPositionPtr	_positions;
    /*! 
     */
    SFGeoNormalPtr	_normals;
    /*! 
     */
    SFBool	_normalPerVertex;
    /*! 
     */
    SFGeoColorPtr	_colors;
    /*! 
     */
    SFBool	_colorPerVertex;
    /*! 
     */
    SFGeoTexCoordsPtr	_texCoords;
    /*! 
     */
    SFGeoIndexPtr	_index;
    /*! 
     */
    SFMaterialPtr	_material;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    GeometryBase(void);
    GeometryBase(const GeometryBase &source);
    virtual ~GeometryBase(void); 
    

    void executeSyncImpl(GeometryBase *pOther,
                         BitVector          whichField);

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   _desc[];

    static FieldContainerType _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const Geometry &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef GeometryBase *GeometryBaseP;

OSG_END_NAMESPACE

#endif /* _OSGGEOMETRYBASE_H_ */
