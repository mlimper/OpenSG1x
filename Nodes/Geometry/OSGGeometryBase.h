/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Geometry
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGGEOMETRYBASE_H_
#define _OSGGEOMETRYBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGConfig.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>
#include <OSGSystemDef.h>
#include <OSGNodeCore.h>
#include <OSGGeoPTypeFields.h>	// Types type
#include <OSGGeoPLengthFields.h>	// Lengths type
#include <OSGGeoPositionFields.h>	// Positions type
#include <OSGGeoNormalFields.h>	// Normals type
#include <OSGGeoColorFields.h>	// Colors type
#include <OSGGeoTexCoordsFields.h>	// TexCoords type
#include <OSGGeoIndexFields.h>	// Index type
#include <OSGUInt16Fields.h>	// IndexMapping type
#include <OSGMaterialFields.h>	// Material type
#include <OSGBoolFields.h>	// DlistCache type
#include <OSGInt32Fields.h>	// GLId type

#include <OSGGeometryFields.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class Geometry;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! Geometry Base Class. */

class OSG_SYSTEMLIB_DLLMAPPING GeometryBase : public NodeCore
{
  private:

    typedef NodeCore Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
    enum
    {
        TypesFieldId = Inherited::NextFieldId,
        LengthsFieldId = TypesFieldId + 1,
        PositionsFieldId = LengthsFieldId + 1,
        NormalsFieldId = PositionsFieldId + 1,
        ColorsFieldId = NormalsFieldId + 1,
        TexCoordsFieldId = ColorsFieldId + 1,
        IndexFieldId = TexCoordsFieldId + 1,
        IndexMappingFieldId = IndexFieldId + 1,
        MaterialFieldId = IndexMappingFieldId + 1,
        DlistCacheFieldId = MaterialFieldId + 1,
        GLIdFieldId = DlistCacheFieldId + 1
    };

    static const osg::BitVector TypesFieldMask;
    static const osg::BitVector LengthsFieldMask;
    static const osg::BitVector PositionsFieldMask;
    static const osg::BitVector NormalsFieldMask;
    static const osg::BitVector ColorsFieldMask;
    static const osg::BitVector TexCoordsFieldMask;
    static const osg::BitVector IndexFieldMask;
    static const osg::BitVector IndexMappingFieldMask;
    static const osg::BitVector MaterialFieldMask;
    static const osg::BitVector DlistCacheFieldMask;
    static const osg::BitVector GLIdFieldMask;

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "GeometryBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType(void); 
    virtual const OSG::FieldContainerType &getType(void) const; 
    
    static OSG::FieldContainerType &getClassType  (void); 
    static OSG::UInt32              getClassTypeId(void); 
    static GeometryPtr         create        (void); 
    static GeometryPtr         createEmpty   (void); 

    virtual OSG::FieldContainerPtr shallowCopy(void) const; 
    virtual OSG::UInt32            getSize    (void) const;

    virtual void                   executeSync(      FieldContainer &other,
                                               const BitVector      &whichField);


    virtual UInt32       getBinSize (const BitVector    &whichField);
    virtual MemoryHandle copyToBin  (      MemoryHandle  pMem,
                                     const BitVector    &whichField);
    virtual MemoryHandle copyFromBin(      MemoryHandle  pMem,
                                     const BitVector    &whichField);

    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFGeoPTypePtr	*getSFTypes(void);
    inline SFGeoPLengthPtr	*getSFLengths(void);
    inline SFGeoPositionPtr	*getSFPositions(void);
    inline SFGeoNormalPtr	*getSFNormals(void);
    inline SFGeoColorPtr	*getSFColors(void);
    inline SFGeoTexCoordsPtr	*getSFTexCoords(void);
    inline SFGeoIndexPtr	*getSFIndex(void);
    inline MFUInt16	*getMFIndexMapping(void);
    inline SFMaterialPtr	*getSFMaterial(void);
    inline SFBool	*getSFDlistCache(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       GeoPTypePtr	&getTypes(void);
    inline const GeoPTypePtr	&getTypes(void) const;
    inline       void	             setTypes( GeoPTypePtr value );
    inline       GeoPLengthPtr	&getLengths(void);
    inline const GeoPLengthPtr	&getLengths(void) const;
    inline       void	             setLengths( GeoPLengthPtr value );
    inline       GeoPositionPtr	&getPositions(void);
    inline const GeoPositionPtr	&getPositions(void) const;
    inline       void	             setPositions( GeoPositionPtr value );
    inline       GeoNormalPtr	&getNormals(void);
    inline const GeoNormalPtr	&getNormals(void) const;
    inline       void	             setNormals( GeoNormalPtr value );
    inline       GeoColorPtr	&getColors(void);
    inline const GeoColorPtr	&getColors(void) const;
    inline       void	             setColors( GeoColorPtr value );
    inline       GeoTexCoordsPtr	&getTexCoords(void);
    inline const GeoTexCoordsPtr	&getTexCoords(void) const;
    inline       void	             setTexCoords( GeoTexCoordsPtr value );
    inline       GeoIndexPtr	&getIndex(void);
    inline const GeoIndexPtr	&getIndex(void) const;
    inline       void	             setIndex( GeoIndexPtr value );
    inline       MaterialPtr	&getMaterial(void);
    inline const MaterialPtr	&getMaterial(void) const;
    inline       void	             setMaterial( MaterialPtr value );
    inline       Bool	&getDlistCache(void);
    inline const Bool	&getDlistCache(void) const;
    inline       void	             setDlistCache( Bool value );

    inline       UInt16	               &getIndexMapping( UInt32 index );
    inline       MFUInt16 &getIndexMapping(void);
    inline const MFUInt16 &getIndexMapping(void) const;

    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! 
     */
    SFGeoPTypePtr	_sfTypes;
    /*! 
     */
    SFGeoPLengthPtr	_sfLengths;
    /*! 
     */
    SFGeoPositionPtr	_sfPositions;
    /*! 
     */
    SFGeoNormalPtr	_sfNormals;
    /*! 
     */
    SFGeoColorPtr	_sfColors;
    /*! 
     */
    SFGeoTexCoordsPtr	_sfTexCoords;
    /*! 
     */
    SFGeoIndexPtr	_sfIndex;
    /*! 
     */
    MFUInt16	_mfIndexMapping;
    /*! 
     */
    SFMaterialPtr	_sfMaterial;
    /*! Flag to activate caching the geometry inside a display list.
     */
    SFBool	_sfDlistCache;
    /*! The dlist id, if used.
     */
    SFInt32	_sfGLId;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    GeometryBase(void);
    GeometryBase(const GeometryBase &source);
    virtual ~GeometryBase(void); 
    
    //! Return the protected fields.

    inline SFInt32	*getSFGLId(void);

    //!@{ Return the fields' values.

    inline       Int32	&getGLId(void);
    inline const Int32	&getGLId(void) const;
    inline       void	             setGLId( Int32 value );


    //!@}

    void executeSyncImpl(      GeometryBase *pOther,
                         const BitVector         &whichField);

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   *_desc[];

    static FieldContainerType  _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const Geometry &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef GeometryBase *GeometryBaseP;

OSG_END_NAMESPACE

#endif /* _OSGGEOMETRYBASE_H_ */
