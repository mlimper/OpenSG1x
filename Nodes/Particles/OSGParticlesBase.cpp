/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Particles!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARTICLESINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGParticlesBase.h"
#include "OSGParticles.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<ParticlesPtr>::_type("ParticlesPtr", "NodeCorePtr", true);

#if defined(__sgi)

#pragma instantiate SField<ParticlesPtr>::_fieldType
#pragma instantiate MField<ParticlesPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, ParticlesPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, ParticlesPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGParticlesBase.cpp,v 1.1 2002/01/04 17:05:03 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGPARTICLESBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPARTICLESBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPARTICLESFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  ParticlesBase::PositionsFieldMask = 
    (1 << ParticlesBase::PositionsFieldId);

const OSG::BitVector  ParticlesBase::SecPositionsFieldMask = 
    (1 << ParticlesBase::SecPositionsFieldId);

const OSG::BitVector  ParticlesBase::ColorsFieldMask = 
    (1 << ParticlesBase::ColorsFieldId);

const OSG::BitVector  ParticlesBase::NormalsFieldMask = 
    (1 << ParticlesBase::NormalsFieldId);

const OSG::BitVector  ParticlesBase::SizesFieldMask = 
    (1 << ParticlesBase::SizesFieldId);

const OSG::BitVector  ParticlesBase::MaterialFieldMask = 
    (1 << ParticlesBase::MaterialFieldId);



// Field descriptions

/*! \var GeoPositionsPtr ParticlesBase::_sfPositions
    The positions of the particles. This is the primary defining information         for a particle.
*/
/*! \var GeoPositionsPtr ParticlesBase::_sfSecPositions
    The secondary position of the particle. This information is only used by         a few rendering modes, e.g. the streak mode. Usually it represents the          particle's last position.
*/
/*! \var GeoColorsPtr    ParticlesBase::_sfColors
    The particle colors (optional).
*/
/*! \var GeoNormalsPtr   ParticlesBase::_sfNormals
    Most particles will be automatically aligned to the view direction.         If normals are set they will be used to define the direction the          particles are facing.
*/
/*! \var Vec3f           ParticlesBase::_mfSizes
    The particle sizes. If not set (1,1,1) will be used, if only one entry is         set, it will be used for all particles. If the number of sizes if equal         to the number of positions every particle will get its own size.         Most modes only use the X coordinate of the vector.
*/
/*! \var MaterialPtr     ParticlesBase::_sfMaterial
    The material used to render the particles.
*/
//! Particles description

FieldDescription *ParticlesBase::_desc[] = 
{
    new FieldDescription(SFGeoPositionsPtr::getClassType(), 
                     "positions", 
                     PositionsFieldId, PositionsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getSFPositions),
    new FieldDescription(SFGeoPositionsPtr::getClassType(), 
                     "secPositions", 
                     SecPositionsFieldId, SecPositionsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getSFSecPositions),
    new FieldDescription(SFGeoColorsPtr::getClassType(), 
                     "colors", 
                     ColorsFieldId, ColorsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getSFColors),
    new FieldDescription(SFGeoNormalsPtr::getClassType(), 
                     "normals", 
                     NormalsFieldId, NormalsFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getSFNormals),
    new FieldDescription(MFVec3f::getClassType(), 
                     "sizes", 
                     SizesFieldId, SizesFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getMFSizes),
    new FieldDescription(SFMaterialPtr::getClassType(), 
                     "material", 
                     MaterialFieldId, MaterialFieldMask,
                     false,
                     (FieldAccessMethod) &ParticlesBase::getSFMaterial)
};

//! Particles type

FieldContainerType ParticlesBase::_type(
    "Particles",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &ParticlesBase::createEmpty,
    Particles::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(ParticlesBase, ParticlesPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParticlesBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ParticlesBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr ParticlesBase::shallowCopy(void) const 
{ 
    ParticlesPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Particles *>(this)); 

    return returnValue; 
}

UInt32 ParticlesBase::getContainerSize(void) const 
{ 
    return sizeof(ParticlesBase); 
}


void ParticlesBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((ParticlesBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

ParticlesBase::ParticlesBase(void) :
    _sfPositions              (), 
    _sfSecPositions           (), 
    _sfColors                 (), 
    _sfNormals                (), 
    _mfSizes                  (), 
    _sfMaterial               (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

ParticlesBase::ParticlesBase(const ParticlesBase &source) :
    _sfPositions              (source._sfPositions              ), 
    _sfSecPositions           (source._sfSecPositions           ), 
    _sfColors                 (source._sfColors                 ), 
    _sfNormals                (source._sfNormals                ), 
    _mfSizes                  (source._mfSizes                  ), 
    _sfMaterial               (source._sfMaterial               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

ParticlesBase::~ParticlesBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 ParticlesBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _sfPositions.getBinSize();
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        returnValue += _sfSecPositions.getBinSize();
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        returnValue += _sfColors.getBinSize();
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        returnValue += _sfNormals.getBinSize();
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        returnValue += _mfSizes.getBinSize();
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }


    return returnValue;
}

void ParticlesBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        _sfSecPositions.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyToBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        _mfSizes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }


}

void ParticlesBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _sfPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
    {
        _sfSecPositions.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
    {
        _sfColors.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
    {
        _sfNormals.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SizesFieldMask & whichField))
    {
        _mfSizes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }


}

void ParticlesBase::executeSyncImpl(      ParticlesBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pOther->_sfPositions);

    if(FieldBits::NoField != (SecPositionsFieldMask & whichField))
        _sfSecPositions.syncWith(pOther->_sfSecPositions);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _sfColors.syncWith(pOther->_sfColors);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _sfNormals.syncWith(pOther->_sfNormals);

    if(FieldBits::NoField != (SizesFieldMask & whichField))
        _mfSizes.syncWith(pOther->_mfSizes);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);


}

