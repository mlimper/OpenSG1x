/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class LightBase!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILELIGHTBASEINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGLightBaseBase.h"
#include "OSGLightBase.h"



OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static char cvsid_cpp       [] = "@(#)$Id: OSGLightBaseBase.cpp,v 1.12 2001/09/17 14:15:06 vossg Exp $";
    static char cvsid_hpp       [] = OSGLIGHTBASEBASE_HEADER_CVSID;
    static char cvsid_inl       [] = OSGLIGHTBASEBASE_INLINE_CVSID;

    static char cvsid_fields_hpp[] = OSGLIGHTBASEFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector	LightBaseBase::AmbientFieldMask = 
    (1 << LightBaseBase::AmbientFieldId);

const OSG::BitVector	LightBaseBase::DiffuseFieldMask = 
    (1 << LightBaseBase::DiffuseFieldId);

const OSG::BitVector	LightBaseBase::SpecularFieldMask = 
    (1 << LightBaseBase::SpecularFieldId);

const OSG::BitVector	LightBaseBase::BeaconFieldMask = 
    (1 << LightBaseBase::BeaconFieldId);

const OSG::BitVector	LightBaseBase::OnFieldMask = 
    (1 << LightBaseBase::OnFieldId);

const OSG::BitVector	LightBaseBase::ConstantAttenuationFieldMask = 
    (1 << LightBaseBase::ConstantAttenuationFieldId);

const OSG::BitVector	LightBaseBase::LinearAttenuationFieldMask = 
    (1 << LightBaseBase::LinearAttenuationFieldId);

const OSG::BitVector	LightBaseBase::QuadraticAttenuationFieldMask = 
    (1 << LightBaseBase::QuadraticAttenuationFieldId);



// Field descriptions

/*! \var Color4f         LightBaseBase::_sfAmbient
    
*/
/*! \var Color4f         LightBaseBase::_sfDiffuse
    
*/
/*! \var Color4f         LightBaseBase::_sfSpecular
    
*/
/*! \var NodePtr         LightBaseBase::_sfBeacon
    
*/
/*! \var Bool            LightBaseBase::_sfOn
    
*/
/*! \var Real32          LightBaseBase::_sfConstantAttenuation
    The light's constant attenuation.
*/
/*! \var Real32          LightBaseBase::_sfLinearAttenuation
    The light's linear attenuation.
*/
/*! \var Real32          LightBaseBase::_sfQuadraticAttenuation
    The light's quadratic attenuation.
*/
//! LightBase description

FieldDescription *LightBaseBase::_desc[] = 
{
    new FieldDescription(SFColor4f::getClassType(), 
                     "ambient", 
                     AmbientFieldId, AmbientFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFAmbient),
    new FieldDescription(SFColor4f::getClassType(), 
                     "diffuse", 
                     DiffuseFieldId, DiffuseFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFDiffuse),
    new FieldDescription(SFColor4f::getClassType(), 
                     "specular", 
                     SpecularFieldId, SpecularFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFSpecular),
    new FieldDescription(SFNodePtr::getClassType(), 
                     "beacon", 
                     BeaconFieldId, BeaconFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFBeacon),
    new FieldDescription(SFBool::getClassType(), 
                     "on", 
                     OnFieldId, OnFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFOn),
    new FieldDescription(SFReal32::getClassType(), 
                     "constantAttenuation", 
                     ConstantAttenuationFieldId, ConstantAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFConstantAttenuation),
    new FieldDescription(SFReal32::getClassType(), 
                     "linearAttenuation", 
                     LinearAttenuationFieldId, LinearAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFLinearAttenuation),
    new FieldDescription(SFReal32::getClassType(), 
                     "quadraticAttenuation", 
                     QuadraticAttenuationFieldId, QuadraticAttenuationFieldMask,
                     false,
                     (FieldAccessMethod) &LightBaseBase::getSFQuadraticAttenuation)
};

//! LightBase type

FieldContainerType LightBaseBase::_type(
    "LightBase",
    "NodeCore",
    NULL,
    NULL, 
    LightBase::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(LightBaseBase, LightBasePtr)

/*------------------------------ get -----------------------------------*/

static const char *getClassname(void)
{
    return "LightBase"; 
}

FieldContainerType &LightBaseBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LightBaseBase::getType(void) const 
{
    return _type;
} 
/*! \}                                                                 */

UInt32 LightBaseBase::getContainerSize(void) const 
{ 
    return sizeof(LightBaseBase); 
}


void LightBaseBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((LightBaseBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

LightBaseBase::LightBaseBase(void) :
	_sfAmbient                (), 
	_sfDiffuse                (), 
	_sfSpecular               (), 
	_sfBeacon                 (), 
	_sfOn                     (Bool(true)), 
	_sfConstantAttenuation    (Real32(1)), 
	_sfLinearAttenuation      (Real32(0)), 
	_sfQuadraticAttenuation   (Real32(0)), 
	Inherited() 
{
}

//! Copy Constructor

LightBaseBase::LightBaseBase(const LightBaseBase &source) :
	_sfAmbient                (source._sfAmbient                ), 
	_sfDiffuse                (source._sfDiffuse                ), 
	_sfSpecular               (source._sfSpecular               ), 
	_sfBeacon                 (source._sfBeacon                 ), 
	_sfOn                     (source._sfOn                     ), 
	_sfConstantAttenuation    (source._sfConstantAttenuation    ), 
	_sfLinearAttenuation      (source._sfLinearAttenuation      ), 
	_sfQuadraticAttenuation   (source._sfQuadraticAttenuation   ), 
	Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

LightBaseBase::~LightBaseBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 LightBaseBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        returnValue += _sfAmbient.getBinSize();
    }

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        returnValue += _sfSpecular.getBinSize();
    }

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }

    if(FieldBits::NoField != (OnFieldMask & whichField))
    {
        returnValue += _sfOn.getBinSize();
    }

    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
    {
        returnValue += _sfConstantAttenuation.getBinSize();
    }

    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
    {
        returnValue += _sfLinearAttenuation.getBinSize();
    }

    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
    {
        returnValue += _sfQuadraticAttenuation.getBinSize();
    }


    return returnValue;
}

MemoryHandle LightBaseBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
        pMem = _sfAmbient.copyToBin(pMem);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        pMem = _sfDiffuse.copyToBin(pMem);

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
        pMem = _sfSpecular.copyToBin(pMem);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        pMem = _sfBeacon.copyToBin(pMem);

    if(FieldBits::NoField != (OnFieldMask & whichField))
        pMem = _sfOn.copyToBin(pMem);

    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
        pMem = _sfConstantAttenuation.copyToBin(pMem);

    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
        pMem = _sfLinearAttenuation.copyToBin(pMem);

    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
        pMem = _sfQuadraticAttenuation.copyToBin(pMem);


    return pMem;
}

MemoryHandle LightBaseBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
        pMem = _sfAmbient.copyFromBin(pMem);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        pMem = _sfDiffuse.copyFromBin(pMem);

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
        pMem = _sfSpecular.copyFromBin(pMem);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        pMem = _sfBeacon.copyFromBin(pMem);

    if(FieldBits::NoField != (OnFieldMask & whichField))
        pMem = _sfOn.copyFromBin(pMem);

    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
        pMem = _sfConstantAttenuation.copyFromBin(pMem);

    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
        pMem = _sfLinearAttenuation.copyFromBin(pMem);

    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
        pMem = _sfQuadraticAttenuation.copyFromBin(pMem);


    return pMem;
}

void LightBaseBase::executeSyncImpl(      LightBaseBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
        _sfAmbient.syncWith(pOther->_sfAmbient);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
        _sfDiffuse.syncWith(pOther->_sfDiffuse);

    if(FieldBits::NoField != (SpecularFieldMask & whichField))
        _sfSpecular.syncWith(pOther->_sfSpecular);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
        _sfBeacon.syncWith(pOther->_sfBeacon);

    if(FieldBits::NoField != (OnFieldMask & whichField))
        _sfOn.syncWith(pOther->_sfOn);

    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
        _sfConstantAttenuation.syncWith(pOther->_sfConstantAttenuation);

    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
        _sfLinearAttenuation.syncWith(pOther->_sfLinearAttenuation);

    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
        _sfQuadraticAttenuation.syncWith(pOther->_sfQuadraticAttenuation);


}

