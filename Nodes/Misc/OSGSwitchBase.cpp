/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Switch!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILESWITCHINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSwitchBase.h"
#include "OSGSwitch.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<SwitchPtr>::_type("SwitchPtr", "NodeCorePtr", true);

#if defined(__sgi)

#pragma instantiate SField<SwitchPtr>::_fieldType
#pragma instantiate MField<SwitchPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, SwitchPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, SwitchPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static char cvsid_cpp       [] = "@(#)$Id: $";
    static char cvsid_hpp       [] = OSGSWITCHBASE_HEADER_CVSID;
    static char cvsid_inl       [] = OSGSWITCHBASE_INLINE_CVSID;

    static char cvsid_fields_hpp[] = OSGSWITCHFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  SwitchBase::ChoiceFieldMask = 
    (1 << SwitchBase::ChoiceFieldId);



// Field descriptions

/*! \var Int32           SwitchBase::_sfChoice
    
*/
//! Switch description

FieldDescription *SwitchBase::_desc[] = 
{
    new FieldDescription(SFInt32::getClassType(), 
                     "choice", 
                     ChoiceFieldId, ChoiceFieldMask,
                     true,
                     (FieldAccessMethod) &SwitchBase::getSFChoice)
};

//! Switch type

FieldContainerType SwitchBase::_type(
    "Switch",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &SwitchBase::createEmpty,
    Switch::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SwitchBase, SwitchPtr)

/*------------------------------ get -----------------------------------*/

static const char *getClassname(void)
{
    return "Switch"; 
}

FieldContainerType &SwitchBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SwitchBase::getType(void) const 
{
    return _type;
} 
/*! \}                                                                 */

FieldContainerPtr SwitchBase::shallowCopy(void) const 
{ 
    SwitchPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Switch *>(this)); 

    return returnValue; 
}

UInt32 SwitchBase::getContainerSize(void) const 
{ 
    return sizeof(SwitchBase); 
}


void SwitchBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SwitchBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

SwitchBase::SwitchBase(void) :
    _sfChoice                 (Int32(-1)), 
    Inherited() 
{
}

//! Copy Constructor

SwitchBase::SwitchBase(const SwitchBase &source) :
    _sfChoice                 (source._sfChoice                 ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

SwitchBase::~SwitchBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SwitchBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        returnValue += _sfChoice.getBinSize();
    }


    return returnValue;
}

void SwitchBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        _sfChoice.copyToBin(pMem);
    }


}

void SwitchBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        _sfChoice.copyFromBin(pMem);
    }


}

void SwitchBase::executeSyncImpl(      SwitchBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
        _sfChoice.syncWith(pOther->_sfChoice);


}

