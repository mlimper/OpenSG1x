/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Billboard!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBILLBOARDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGBillboardBase.h"
#include "OSGBillboard.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<BillboardPtr>::_type("BillboardPtr", "NodeCorePtr", true);

#if defined(__sgi)

#pragma instantiate SField<BillboardPtr>::_fieldType
#pragma instantiate MField<BillboardPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, BillboardPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, BillboardPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGBILLBOARDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGBILLBOARDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGBILLBOARDFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  BillboardBase::AxisOfRotationFieldMask = 
    (1 << BillboardBase::AxisOfRotationFieldId);

const OSG::BitVector  BillboardBase::DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask = 
    (1 << BillboardBase::DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldId);

const OSG::BitVector  BillboardBase::DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask = 
    (1 << BillboardBase::DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldId);



// Field descriptions

/*! \var Vec3f           BillboardBase::_sfAxisOfRotation
    
*/
/*! \var Bool            BillboardBase::_sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera
    name until I find a better one
*/
/*! \var Bool            BillboardBase::_sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec
    name until I find a better one
*/
//! Billboard description

FieldDescription *BillboardBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "axisOfRotation", 
                     AxisOfRotationFieldId, AxisOfRotationFieldMask,
                     true,
                     (FieldAccessMethod) &BillboardBase::getSFAxisOfRotation),
    new FieldDescription(SFBool::getClassType(), 
                     "dontGiveAFuckWhatTheSpecSaysAndPointToTheCamera", 
                     DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldId, DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask,
                     true,
                     (FieldAccessMethod) &BillboardBase::getSFDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera),
    new FieldDescription(SFBool::getClassType(), 
                     "doGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec", 
                     DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldId, DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask,
                     true,
                     (FieldAccessMethod) &BillboardBase::getSFDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec)
};

//! Billboard type

FieldContainerType BillboardBase::_type(
    "Billboard",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &BillboardBase::createEmpty,
    Billboard::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(BillboardBase, BillboardPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &BillboardBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &BillboardBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr BillboardBase::shallowCopy(void) const 
{ 
    BillboardPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Billboard *>(this)); 

    return returnValue; 
}

UInt32 BillboardBase::getContainerSize(void) const 
{ 
    return sizeof(BillboardBase); 
}


void BillboardBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((BillboardBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

BillboardBase::BillboardBase(void) :
    _sfAxisOfRotation         (Vec3f(0.f, 1.f, 0.f)), 
    _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera(Bool(true)), 
    _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec(Bool(false)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

BillboardBase::BillboardBase(const BillboardBase &source) :
    _sfAxisOfRotation         (source._sfAxisOfRotation         ), 
    _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera(source._sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera), 
    _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec(source._sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

BillboardBase::~BillboardBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 BillboardBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AxisOfRotationFieldMask & whichField))
    {
        returnValue += _sfAxisOfRotation.getBinSize();
    }

    if(FieldBits::NoField != (DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask & whichField))
    {
        returnValue += _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera.getBinSize();
    }

    if(FieldBits::NoField != (DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask & whichField))
    {
        returnValue += _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec.getBinSize();
    }


    return returnValue;
}

void BillboardBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AxisOfRotationFieldMask & whichField))
    {
        _sfAxisOfRotation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask & whichField))
    {
        _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera.copyToBin(pMem);
    }

    if(FieldBits::NoField != (DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask & whichField))
    {
        _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec.copyToBin(pMem);
    }


}

void BillboardBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AxisOfRotationFieldMask & whichField))
    {
        _sfAxisOfRotation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask & whichField))
    {
        _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask & whichField))
    {
        _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec.copyFromBin(pMem);
    }


}

void BillboardBase::executeSyncImpl(      BillboardBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (AxisOfRotationFieldMask & whichField))
        _sfAxisOfRotation.syncWith(pOther->_sfAxisOfRotation);

    if(FieldBits::NoField != (DontGiveAFuckWhatTheSpecSaysAndPointToTheCameraFieldMask & whichField))
        _sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera.syncWith(pOther->_sfDontGiveAFuckWhatTheSpecSaysAndPointToTheCamera);

    if(FieldBits::NoField != (DoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpecFieldMask & whichField))
        _sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec.syncWith(pOther->_sfDoGiveAFuckWhatTheSpecSaysIfYouCareAboutTheSpec);


}

