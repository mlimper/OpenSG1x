/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VRMLTransform!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEVRMLTRANSFORMINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGVRMLTransformBase.h"
#include "OSGVRMLTransform.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<VRMLTransformPtr>::_fieldType
#pragma instantiate MField<VRMLTransformPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, VRMLTransformPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, VRMLTransformPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	VRMLTransformBase::CenterFieldMask = 
    (1 << VRMLTransformBase::CenterFieldId);

const OSG::BitVector	VRMLTransformBase::RotationFieldMask = 
    (1 << VRMLTransformBase::RotationFieldId);

const OSG::BitVector	VRMLTransformBase::ScaleFieldMask = 
    (1 << VRMLTransformBase::ScaleFieldId);

const OSG::BitVector	VRMLTransformBase::ScaleOrientationFieldMask = 
    (1 << VRMLTransformBase::ScaleOrientationFieldId);

const OSG::BitVector	VRMLTransformBase::TranslationFieldMask = 
    (1 << VRMLTransformBase::TranslationFieldId);



char VRMLTransformBase::cvsid[] = "@(#)$Id: OSGVRMLTransformBase.cpp,v 1.10 2001/07/31 13:39:04 vossg Exp $";

/** \brief Group field description
 */

FieldDescription *VRMLTransformBase::_desc[] = 
{
    new FieldDescription(SFVec3f::getClassType(), 
                     "center", 
                     CenterFieldId, CenterFieldMask,
                     false,
                     (FieldAccessMethod) &VRMLTransformBase::getSFCenter),
    new FieldDescription(SFQuaternion::getClassType(), 
                     "rotation", 
                     RotationFieldId, RotationFieldMask,
                     false,
                     (FieldAccessMethod) &VRMLTransformBase::getSFRotation),
    new FieldDescription(SFVec3f::getClassType(), 
                     "scale", 
                     ScaleFieldId, ScaleFieldMask,
                     false,
                     (FieldAccessMethod) &VRMLTransformBase::getSFScale),
    new FieldDescription(SFQuaternion::getClassType(), 
                     "scaleOrientation", 
                     ScaleOrientationFieldId, ScaleOrientationFieldMask,
                     false,
                     (FieldAccessMethod) &VRMLTransformBase::getSFScaleOrientation),
    new FieldDescription(SFVec3f::getClassType(), 
                     "translation", 
                     TranslationFieldId, TranslationFieldMask,
                     false,
                     (FieldAccessMethod) &VRMLTransformBase::getSFTranslation)
};

/** \brief VRMLTransform type
 */

FieldContainerType VRMLTransformBase::_type(
    "VRMLTransform",
    "Transform",
    NULL,
    (PrototypeCreateF) &VRMLTransformBase::createEmpty,
    VRMLTransform::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(VRMLTransformBase, VRMLTransformPtr)

FieldContainerType &VRMLTransformBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &VRMLTransformBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr VRMLTransformBase::shallowCopy(void) const 
{ 
    VRMLTransformPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const VRMLTransform *>(this)); 

    return returnValue; 
}

UInt32 VRMLTransformBase::getContainerSize(void) const 
{ 
    return sizeof(VRMLTransformBase); 
}


void VRMLTransformBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((VRMLTransformBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

VRMLTransformBase::VRMLTransformBase(void) :
	_sfCenter	(), 
	_sfRotation	(), 
	_sfScale	(), 
	_sfScaleOrientation	(), 
	_sfTranslation	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

VRMLTransformBase::VRMLTransformBase(const VRMLTransformBase &source) :
	_sfCenter		(source._sfCenter), 
	_sfRotation		(source._sfRotation), 
	_sfScale		(source._sfScale), 
	_sfScaleOrientation		(source._sfScaleOrientation), 
	_sfTranslation		(source._sfTranslation), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

VRMLTransformBase::~VRMLTransformBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 VRMLTransformBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        returnValue += _sfCenter.getBinSize();
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        returnValue += _sfRotation.getBinSize();
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }

    if(FieldBits::NoField != (ScaleOrientationFieldMask & whichField))
    {
        returnValue += _sfScaleOrientation.getBinSize();
    }

    if(FieldBits::NoField != (TranslationFieldMask & whichField))
    {
        returnValue += _sfTranslation.getBinSize();
    }


    return returnValue;
}

MemoryHandle VRMLTransformBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        pMem = _sfCenter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        pMem = _sfRotation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        pMem = _sfScale.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ScaleOrientationFieldMask & whichField))
    {
        pMem = _sfScaleOrientation.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TranslationFieldMask & whichField))
    {
        pMem = _sfTranslation.copyToBin(pMem);
    }


    return pMem;
}

MemoryHandle VRMLTransformBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        pMem = _sfCenter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        pMem = _sfRotation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        pMem = _sfScale.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ScaleOrientationFieldMask & whichField))
    {
        pMem = _sfScaleOrientation.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TranslationFieldMask & whichField))
    {
        pMem = _sfTranslation.copyFromBin(pMem);
    }


    return pMem;
}

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void VRMLTransformBase::executeSyncImpl(      VRMLTransformBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        _sfCenter.syncWith(pOther->_sfCenter);
    }

    if(FieldBits::NoField != (RotationFieldMask & whichField))
    {
        _sfRotation.syncWith(pOther->_sfRotation);
    }

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.syncWith(pOther->_sfScale);
    }

    if(FieldBits::NoField != (ScaleOrientationFieldMask & whichField))
    {
        _sfScaleOrientation.syncWith(pOther->_sfScaleOrientation);
    }

    if(FieldBits::NoField != (TranslationFieldMask & whichField))
    {
        _sfTranslation.syncWith(pOther->_sfTranslation);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

