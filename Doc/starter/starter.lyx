#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 218
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle default

\layout Title

OpenSG Starter guide
\layout Author

doc@opensg.org
\layout Date

Version 0.1
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

Introduction
\layout Section

What is OpenSG
\layout Standard

OpenSG is a real-time rendering system based on a scenegraph metaphor.
 It works along the lines of OpenInventor, Performer or Java3D, although
 it is probably closest to Performer.
 It supports parallel processing, albeit in a more general way, and will
 drive multiple displays for multi-screen stereo projection systems.
 The goal is to have something that handles multi-threaded data structures
 as simply as possible without compromising performance too much.
 It should also support heterogeneous multi-pipe applications, i.e.
 multiple different graphics cards running one application.
 Many things are quite easy to do with a little program, but are sometimes
 hard to fit into an existing system.
 Thus accessibility is an important goal, and we're striving to make OpenSG
 very extend-able.
\layout Standard

It works on different Unix systems and Windows.
 
\layout Standard

It's primary use (i.e.
 what we are doing with it) is for VR applications, mainly in the automotive
 context.
 But it can be used for any kind of application needing fast and general
 3D graphics.
 
\layout Section

What is OpenSG not
\layout Standard

OpenSG is not a complete VR system.
 Things like device access and interaction are left out on purpose, there
 are other systems for that.
\layout Section

Where do get it
\layout Standard

www.OpenSG.org blabla
\layout Section

How to compile and install
\layout Standard

INSTALL/README blabla
\layout Section

How do use it
\layout Subsection

Own projects
\layout Standard

Makefile blabla
\layout Subsection

Extending OpenSG
\layout Standard

Makefile blabla
\layout Standard

test files
\layout Chapter

Base types
\layout Standard

only overview, look at the doxygen files for detailed description blabla
\layout Standard

Platform Independence blabla
\layout Section

Log
\layout Standard

Message logger class, handles info,warning and error messages
\layout Section

StringID
\layout Standard

Do not use it.
 It is only for StringID which can have shared data.
 Use std::string instead.
\layout Subsection

Functors
\layout Standard

Moving target.
 Don not use it right now.
\layout Section

Multithreading
\layout Section

Time & Data
\layout Section

Color
\layout Section

Math (vector,point,matrix,quaternion)
\layout Section

Line & Plane
\layout Section

Bounding Volume
\layout Section

Image
\layout Chapter

Fields and FieldContainer
\layout Standard

container for everything that is thread-save
\layout Section

Createing new Field Container classes
\layout Standard

fcdEdit (see image 
\begin_inset LatexCommand \ref{fcdEditFig}

\end_inset 


\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 267 177
file fcd.eps
width 4 90
flags 9

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{fcdEditFig}

\end_inset 

FcdEdit blabla
\end_float 
) stuff
\layout Subsection

XML Description (Foo.fcd)
\layout Subsection

Field Types (FooFields.h)
\layout Subsection

Base/Meta Type (FooBase.h, FooBase.inl, FooBase.cpp)
\layout Subsection

'User Code' implementation (Foo.h, Foo.inl, Foo.cpp)
\layout Section

Creating a FieldContainer instance
\layout Standard

factory,prototype blabla
\layout Section

Changing field values
\layout Standard

changelist blabla
\layout Section

FieldContainer attachments
\layout Standard

attachment blabla
\layout Section

Destroying a FieldContainer
\layout Chapter

Nodes and NodeCores
\layout Standard

single (see image 
\begin_inset LatexCommand \ref{singleParentFig}

\end_inset 


\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 238 304
file node_core_share.eps
width 4 80
flags 9

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{singleParentFig}

\end_inset 

Single Parent Scene
\end_float 
) /multi-parent (see image 
\begin_inset LatexCommand \ref{multiParentFig}

\end_inset 


\begin_float fig 
\layout Standard
\align center 

\begin_inset Figure size 238 286
file tree_multiparent.eps
width 4 80
flags 9

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{multiParentFig}

\end_inset 

Multi Parent Scene
\end_float 
) stuff
\layout Section

Node 
\layout Standard

volume stuff, toWord matrix
\layout Section

NodeCore 
\layout Subsection

Linking Node Cores
\layout Subsection

Special Node Cores
\layout Subsubsection

Material chunk 
\layout Subsubsection

Geometry property 
\layout Chapter

Action and Traversals
\layout Subsection

Usage
\layout Subsection

Write our own action handler
\layout Chapter

Camera and Window
\layout Chapter

Loader
\layout Subsection

Image
\layout Subsubsection

Usage
\layout Subsubsection

Write your own
\layout Subsection

Scene
\layout Subsubsection

Usage
\layout Subsubsection

Write your own
\layout Standard


\begin_inset LatexCommand \listoffigures{}

\end_inset 


\layout Standard


\latex latex 

\backslash 
begin{appendix}
\layout Chapter

Code Style
\layout Chapter

fcdEdit description
\layout Standard

Code Style
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 535 435
file fcdEdit-numbered.eps
width 3 90
flags 11

\end_inset 


\layout Enumerate

Node name; you don't have to include the OSG prefix
\layout Enumerate

System Component ?
\layout Enumerate

Parent field container; you dont have to include the OSG prefix
\layout Enumerate

Is Parent a System Component
\layout Enumerate

Library:
\layout Enumerate

PFTypes
\layout Enumerate

Structure
\layout Enumerate

Field list, shows all field description in a vertical list
\layout Enumerate

Name of the Field
\layout Enumerate

Type of the Field, can be changed/extended with the 'Load Field Types/Reset
 Field Types' mechanisms
\layout Enumerate

Cardinality: defines the field to be a single or multifield (can hold one
 value or any number (0-n))
\layout Enumerate

Access: private/protected/public c++ sty;e access definition
\layout Enumerate

Visibility: internal/external; will be used to create various styles of
 documentation
\layout Enumerate

Header: defines the type header, if unset ...
\layout Enumerate

DefaultValue: The default field value, prototype ?
\layout Enumerate

DefaultHeader: ?
\layout Enumerate

Description: Text description of the Field
\layout Enumerate

New Field: creates a new field
\layout Enumerate

Delete Field: deletes the current field
\layout Enumerate

Clone Field: creates a new field description as clone of the current field
\layout Enumerate

Up: Moves the current field one position up
\layout Enumerate

Down: Movies the current field one position down
\layout Enumerate

New: Restarts the process 
\layout Enumerate

Load:
\layout Enumerate

Load Parent:
\layout Enumerate

ResetFieldTypes:
\layout Enumerate

LoadFieldTypes;
\layout Enumerate

Save:
\layout Enumerate

Save as:
\layout Enumerate

Write Field Container Base Code: Writes the current description as FooBase.h,
 FooBase.inl and FooBase.cpp
\layout Enumerate

Write Field Container Code: Writes the current description as Foo.h Foo.inl
 and Foo.cpp
\layout Enumerate

About
\layout Enumerate

Exit
\layout Enumerate

Node Description: HTML ?
\layout Standard


\latex latex 

\backslash 
end{appendix}
\the_end
