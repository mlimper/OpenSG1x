#include <OpenSG/OSGConfig.h>

OSG_USING_NAMESPACE;

/*! 
\page QT Appendix B - OpenSG with QT
\latexonly Starter:NewChapter \endlatexonly

Chapter Overview
<HR>
	\ref TutorialQTGeneral<BR>
	\ref TutorialQTDesigner<BR>
	\ref TutorialQTCompiling<BR>
<HR>

Throughout the tutorials we used a GLUT Window for rendering, but as I mentioned earlier, there are some more options. QT (from Trolltech (www.trolltech.com)) is
a very common and powerful cross platform tool for rapid GUI development. This appendix will show you how to create a simple application that is capable to
render OpenSG content, though this will not (and can not) be an introduction to QT development. If you are new to QT have a look at their website where you
can find some tutorials dealing with QT stuff only.

\section TutorialQTGeneral General

We are going to develop a simple application that features one incredible button which will allow us to load a file from disk. The most space will be taken by
the area in which the model will be rendered. Here is an image what the application will be looking like. The model was loaded by clicking the load button and then
selecting the appropiate file with a standart dialog.

\image html qtdesigner_final.png "The application we will create"
\image latex qtdesigner_final.eps "The application we will create" width = 8cm

I will show you step by step what you have to do, but I also assume that you have some basic knowledge of QT. However, dont't worry if you have not - this one
was my very first QT application ;-)

\subsection TutorialQTGeneralPrerequisites Prerequisites

Well, you might have guessed it, you will need QT. On nearly every Linux box running a X server, QT will be already installed. On Windows and Mac OS X, you 
have to download and install it. You can get it from <A HREF="http://www.trolltech.com">http://www.trolltech.com</A>. Please note, that if you need to compile
QT yourself, that it might take more than a hour to finish. Make sure to also compile the "designer" tool, an application that will allow you to develop QT 
GUI's with ease (if you know where to click what). Please follow the installation instructions found within the package you downloaded.

In addition to that, you need to compile OpenSG with QT support (Windows binaries have it already compiled in). Here is an example of the configure command

./configure --enable-glut --enable-tif --enable-png --enable-jpg --enable-qt --with-qt=/usr/qt/3/

The configure script might be able to find the location of qt, if it does not you have to add the last parameter.

<I>
Note:  Your path to QT might be different. If you compiled it yourself, it is possibly /usr/local/qt/3/
</I>

The rest of the process is just the same as usual. You are now ready to create QT powered OpenSG applications... or OpenSG powered QT applications ;-)

\section TutorialQTDesigner QTDesigner

We start our work with with the designer from qt. On Linux boxes this application is found in "your_qt_folder/bin". I believe Windows users will have an entry 
in their start menu. After startup, you should see a window like below - if it is totally different, consider that you may have started the wrong application.

\image html qtdesigner_newdialog.png "Designer window after startup"
\image latex qtdesigner_newdialog.eps "Designer window after startup" width=10cm

As we are not going to develop a complex application with multiple windows, we need not to create a project. Just select the "Dialog" icon, as seen above, and 
click on "OK". 

You see now an empty window in the middle of the screen titled with "Form1", which is actually your application. On the right hand side you have two toolbox 
windows named "Object Explorer" and "Property Editor/Signal Handlers". The latter will be used to set attributes of the selected object, like the size or name
of the window. On the left hand side is the "Toolbox" where you can select different GUI elements to place in your window.

\subsection TutorialQTDesignerBuildGUI Building the GUI

First of all we drop in all GUI elements we will need. In the toolbox select "Common Widgets", if not already selected. Now click on the first entry "PushButon"
and drag a little rectangular area at the top of the "Form1" window. Choose a reasonable size for a button. Now again in the toolbox select "Custom Widgets", 
where you should find a "OSGQGLManagedDesignerWidget". If not, depending on your installation, you need to create it first. If you have it installed you can
skip the next section

\subsubsection TutorialQTDesignerBuildGUICreating Creating the OSGQLManagedDesignerWidget

In the menu bar select "Tools > Custom > Edit Custom Widgets...". You should see the following window, which might be totally empty

\image html qtdesigner_customwidget.png "Creating a new custom widget"
\image latex qtdesigner_customwidget.eps "Creating a new custom widget" width = 10cm

Click on the "New Widget" button and edit the attributes found on the right hand side. Make sure the "Definition" tab is selected. Enter the following

Class :			OSGQGLManagedDesignerWidget<BR>
Headerfile :	OpenSG/OSGQGLManagedDesignerWidget_qt.h<BR>
Dropdownfield : Global  (instead of local)

All other options should be left as they are. Please make sure that everything is spelled correctly, else your application will not compile correctly.

\subsubsection TutorialQTDesignerBuildGUIPlacing Place the Custom Widget

Now select the OSGQGLManagedDesignerWidget, if you havn't already, and drag a rectangle that will take up all space left. Your window "Form1" should now look
like this

\image html qtdesigner_form1.png "The QT window"
\image latex qtdesigner_form1.eps "The QT window" width = 8cm 

\subsection TutorialQTDesignerProperties Edit the Properties

Now we are going to give our elements some reasonable names and values. If you select an object (like the button or the custom widget), you will see the 
corresponding properties in the "Property Editor/Signal Handlers" Window on the right side. Select the push button and change it's name from "PushButton1" to
"loadButton". The caption of the button will not change, as we changed only the internal name - look for the property called text and change the value to "load".
That will change the capption of the button.

Now change the name of the OSGQGLManagedDesignerWidget to "osgWidget". Finally select the window itself and change the name from "Form1" to "MainWindow" as well
as the "caption" property from "Form1" to "OpenSG Viewer".

\subsection TutorialQTDesignerSingal Creating a Slot

The button has no function yet, so we will change that know. Select the load button and then click on the "members" tab found in the object explorer. Click with
the right mouse button on the line that says "Slots" and select "Edit..." from the context menu. The "Edit Functions" window will appear. Click on "New Function".
Enter "load()" instead of newFunction() as function name. Also change the specifier "virtual" to "non virtual" and type from "function" to "slot". The window
should now look like this 

\image html qtdesigner_editfunctions.png "Edit Functions window" 
\image latex qtdesigner_editfunctions.eps "Edit Functions window" width = 8cm

Click on "OK" to close that window. We need to connect the parts with each other. Press F3 on your keyboard and click on the load button. In the new window click
on "No Signal" below Signal and select clicked(). Set Receiver to "MainWindow" and finally set slot to load() - click OK.

Now click on the load() slot, found beneath the public specifier. That will open a new window, where you find the body
of the load() function. Here we can add code to perform the actions we want it to do. Repleace the contents of the file with the following code - of course you
can leave out the comments...

\code
#include <qfiledialog.h>
#include <OpenSG/OSGSceneFileHandler.h>
#include <OpenSG/OSGSimpleGeometry.h>

void MainWindow::load()
{
    // this command will open a file select dialog, allowing wrl, osg, and bin file types. The selected
    // filename along with it's path will be stored in 's'
    QString s(QFileDialog::getOpenFileName(QString::null, "Szenenformate (*.wrl *.osg *.bin)"));
    if (!s.isEmpty()) 
    {
        char *filename;
        //create a correct filename
        filename = (char*)s.latin1();
        NodePtr n = SceneFileHandler::the().read(filename);

        //load that file - if it fails for some reason, we crate a torus
        if (n != NullFC)
	        osgWidget->getManager().setRoot(n);
        else
	        osgWidget->getManager().setRoot(makeTorus(0.5,2,16,16));
    }
}
\endcode

Now it is about time to save everything. Select "File > Save All". I advise you to create a new folder - let us name it OpenSGViewer. QT suggests the filename
"mainwindow.ui", which is alright for us. Just click "OK" after you have entered the new folder. If you have a look in that folder you will see that there are
two files now: "mainwindow.ui" and "mainwindow.ui.h". The latter contains exactly what we have written in the editor, where as the first on is created 
automatically by QT and describes the GUI.

\subsection TutorialQTDesignerMain  Main File

For a complete application, the important main() function is still missing. So using your favorite editor, create a file called main.cpp and save it at the same
location as both other files. Add this code to that file

\code
#include <qapplication.h>
#include <OpenSG/OSGConfig.h>
#include <OpenSG/OSGNode.h>

#include "mainwindow.h"

OSG_USING_NAMESPACE;

int main(int argc, char **argv)
{
	osgInit(argc, argv);
	
	QApplication app (argc, argv);

	MainWindow main;
	app.setMainWidget(&main);
	main.show();

	int result = app.exec();
	return result;
}
\endcode

Actually this is quite simple. At the very beginning we initialize OpenSG (as usual) and QT. Afterwards we create an instance of our own widget, set it as the 
applications main window and execute it. 

\section TutorialQTCompiling Compiling

Compiling involves three more steps than usual, because the designer does nor produce C++ code right away. This is intend, because in this way it is much easier
to extend an application with the designer, without destroying code that was added in between. Execute the following commands one after another. First we create
C++ source files from the generated ui file.

This will generate the header file
<PRE>
	uic -o mainwindow.h mainwindow.ui
</PRE>
and this the cpp file
<PRE>
	uic -i mainwindow.h -o mainwindow.cpp mainwindow.ui
</PRE>

Now invoke the next command
<PRE>
	moc -o moc_mainwindow.cpp mainwindow.h
</PRE>
and finally the "usual" compiler command
<PRE>
	g++ -D_GNU_SOURCE -DQT_CLEAN_NAMESPACE -DOSG_WITH_GLUT -DOSG_WITH_QT -DOSG_WITH_TIF 
	-DOSG_WITH_PNG -DOSG_WITH_JPG -I$QTDIR/include -I/usr/local/include -ansi
	-f-template-depth-100 mainwindow.cpp main.cpp moc_mainwindow.cpp -L/usr/local/lib/dbg
	-L/usr/X11R6/lib -L$QTDIR/lib -lOSGWindowGLUT -lOSGWindowQT -lOSGSystem -lOSGBase -lGLU
	-lGL -lglut -lqt -lXmu -lXi -lXt -lpthread -ldl -o OpenSGViewer
</PRE>

Yes, really that is one single command! However, you might have to adjust some things. First, if you build the optimized OpenSG library you have to use
-L/usr/local/lib/opt instead of -L/usr/local/lib/dbg. Also you have to make sure $QTDIR is defined correctly. If not you can also specify the full path here.
I hope your terminal supports copy and paste ;-)

After compiling you can execute the application with 

<PRE>
	./OpenSGViewer
</PRE>

Click on the load button and select any valid file - if you have no such files on your own, take one from the tutorial/progs/data folder. Maybe you have to 
move the camera to see anything, depending on the file you loaded. 

You can find all source files in the tutorial/progs/qt folder!

Here you go!

Next Chapter : \ref Solutions
*/
