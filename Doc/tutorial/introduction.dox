#include <OSGConfig.h>

using namespace OSG;

/*! \page TutorialIntroduction Introduction
\latexonly Starter:NewChapter \endlatexonly

Chapter Overview
<HR>
    \ref TutorialWhatIsOpenSG <BR>
    \ref TutorialWhatIsOpenSGNot <BR>
    \ref TutorialInstallation <BR>
    \ref TutorialMakingAndExecuting <BR>
    \ref TutorialCompilation <BR>
    \ref TutorialExercises <BR>
<HR>

\image html opensg_logo_small.png ""
\image latex opensg_logo_small.eps "OpenSG Logo" width=8cm

\section TutorialWhatIsOpenSG What is OpenSG

OpenSG is an open source real-time rendering system based on a scenegraph metaphor on top of OpenGL. But 
what is actually the difference compared to OpenGL? OpenGL is a state machine which means it does not know 
anything about the environment. It is only aware of the triangle just being calculated and drawn, it 
has no knowledge about the past nor the future. Here comes the strength of a scenegraph system into play. 
OpenSG stores the whole scene in a graph (now you get where the name is from) and thus can optimize 
the way data is passed to the graphics hardware. With that it is possible (and extremly useful) to check if 
parts of the scene are not visible, like a desk behind a closed door. The entire rendering for such parts can be
skipped completely, resulting in a great increase of performance depending on the scene.

Of course OpenSG is not the only scenegraph based system. Libraries like Performer, OpenInventor and
Java3D, to name a few, are all based on the same idea. As always every system has its own advantages
and disadvantages. In case of OpenSG the biggest advantages are lieing in the ability to handle a cluster 
and multithreaded data structures in a very easy and still efficient way. In addition it works seamlessly
on heterogeneous networks, so multiple computers with different graphic cards can drive one and the
same application. Another big advantage is it's accessibility which makes it very easy to extend. Compared
to the other scenegraph systems mentioned, OpenSG has only few disadvantages. Some have more build-in
functionality due to their much earlier date of release, but this will vanish as OpenSG hits version
1.3 and above. In my personal opinion the biggest problem with OpenSG was the lack of a good documentation,
because the learning curve was very hard at the beginning. This makes it especially difficult for new
users to get started. It is my goal to fight this disadvantage by writing the online tutorial you are reading 
right now ;-)

Some last words in general : OpenSG runs on various Unix systems as well as on Windows. If you are
using Windows you need the Microsdoft Visual Studio compiler version 7 or above, whereas on Unix you
only need the gcc compiler (3.x +) and a few libraries like GLUT or Qt and some image libries which are 
installed on most Unix systems by default. For more detailed instructions, see \ref TutorialInstallation

\section TutorialWhatIsOpenSGNot What is OpenSG not?

OpenSG is not a full application on it's own, it is a library which can help you developing graphics intensive applications so you do
not need to implement your own scenegraph. Altough OpenSG can do more than displaying graphics on your monitor,
you will in most cases not use OpenSG all alone. Often you will need a VR System, capable of handling your
input devices like a tracker. <a href = "http://www.vrjuggler.org">VRJuggler</a> and Open Tracker are VR Systems 
working well together with OpenSG.

\section TutorialInstallation Installation

\subsection TutorialInstallationLinux Installation on Linux

If you are using one of the major Linux distributions you can download a rpm package from the
<a href = "www.opensg.org/download.EN.html"> OpenSG Homepage </a>. Currently there are precompiled
packages for Suse 8.0, Suse 8.1, as well as Redhat 8.0. The older Suse version is compiled with gcc 2.95.3 and the
others with the new gcc 3.2. You can choose between an optimized and a debug version. The latter on is a whole lot bigger
and not that fast, although the difference is quite not grave. However the the debug version is better for debugging ;-)

The installation of any of these binary packages is as easy as any other. Just download and install it and there you go!

If you are using any other Linux distribution or if you like to compile things yourself, you have to get the source code.
You can either download the source tarball or you get a copy via CVS. The source code from the CVS is the bleeding edge of
the OpenSG library, which has a lot more features compared to the latest official release version 1.2.0. On the other hand it is possible
that the CVS version does not work at all. Maybe it does not compile or it runs not stable - so it is your choice, but because of much more 
features in the CVS version, I would recommend using that version, if you do not mind some compiling.

If CVS is your choice, here is what you need to do:

Open a terminal and enter the two following commands

\code
	cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/opensg login
		
	cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/openg co OpenSG
\endcode

<I>
Attention :
If you are promted for a password, just hit enter.
As you are downloading from a UNIX Server, you have to pay special attention to the case of the letters. The
path must be specified using  lowecase characters (i.e. /cvsroot/opensg), where as "co OpenSG" must be specified exactly 
as it is.
</I>

The first command connects you to the sorceforge server, where the second tells the server that you want to download the 
module called "OpenSG". The parameter "-z3" enables compression during data transfer and is considered optional but useful.
The servers of sourceforge are sometimes down (as I personally discovered), so if you get an error message or a timeout again and again it is most
likely not your fault. Just try again later or if you are as unpatient as I am, download the source tarball from the OpenSG
homepage as mentioned above.

In either case you now should have a new directory called "OpenSG" or "OpenSG-1.2.0", depending on how you downloaded the source
code. Now we need to configure and compile the library. Here is a "default" installation, which is good for most purposes.

If you want to use QT have a look at \ref QT, because you need some different configure options.

\code
	cd OpenSG
	//replace with your OpenSG folder if necessary
		
	./configure --enable-glut --enable-tif --enable-png --enable-jpg
	make
	// you need root privileges for that
	sudo make install				

\endcode

<I>
Attention:
Typing make will compile the debug version of OpenSG. If you like the optimized version replace make with "make opt"

The compilation of OpenSG may take quite some time - the author recommends watching an episode of Star Trek The Next Generation
(or two if you have a slow computer) ;-)
</I>

Hopefully you finished the compilation without errors. If you had errors during compilation, the reason is a missing library in 
most cases. Check if you correctly have installed glut and the image libraries. If you have all required libraries already 
installed and they are not found by the configure script anyway it is possibly because they are not installed on default locations. You can
explicitly point to these locations by appending this to your configure command 
<PRE> --with-tif=/path/to/tif/library --with-jpg=/path/to/jpg/library </PRE> and so on.

The default installation path of OpenSG is "/usr/local". Of course you can change that by adding 
<PRE> --prefix=/the/path/you/like </PRE> to your configure command. 

You can get an overview of all possible options by typing : <PRE> ./configure --help </PRE>

In order to run OpenSG powered programs, you have to specify where the library files can found at.

For bash/ksh users this is
<PRE> export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:prefix/lib/{dbg/opt}</PRE>
where prefix is your installation prefix (the default is "/usr/local/"). 'dbg' is used by the debug version and 'opt' by the optimized one.
If you were using default parameters during installtion you should type
<PRE> export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/dbg </PRE>

If you are using a csh/tcsh shell, the line is nearly the same:
<PRE> setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/prefix/lib/{dbg, opt}</PRE>

You need to set the LD_LIBRARY_PATH every time you open a new terminal! Because that would be very annoying, there is, of course,
a better way. Instead of typing that command every time you can add it to your profile file. That file lies within your homefolder 
and is called ".bash_profile", ".profile" or 
".tcsh_profile" or something similar to that depending on the type of shell and operating system you are using. Please do not miss that dot, it is 
necessary. This file is sourced every time you open a new shell. Please notice that this will only take effect after a reboot or at least a resart
of the X server.

\subsection TutorialInstallationCygwin Installation on Cygwin

The installation on cygwin is almost indentical to the Linux installtion procedure, but there are some different prerequisites. 
It is best to have the Intel or Viusal Studio Compiler installed at their default locations (i.e. c:\\program files\\), otherwise it
is possible that the configure script can not find them. In addition to that I supplied the path to some Visual Studio .dll by extending
the Windows path variable by : 
\code
c:\program files\Microsoft Visual Studio .NET\Common7\IDE
\endcode 
where a lot of important files lie. You might adjust the path to your current Version (this applies to .NET 2002 and maybe also 2003).

GLUT needs to be installed in UNIX-style directories in order to be found

Unless you are using the old version 5.0 of visual studio you also need to add a parameter to your configure line:
<PRE>./configure [--all-options-you-want] --with-compiler={icl60, icl70, cl.net}</PRE>
Choose the compiler coressponding to your version of Visual Studio.

Depending on your environment you also have to make standard include files accessible to the compiler. The simplest way to do that, is 
to add another paramter to your configure command
<PRE>--with-add-incdir=/usr/include/w32api</PRE>
This is the default location for important windows header files like windows.h within your cygwin environment

Like with the installation on Linux you need to tell your system where to find the dll and lib files. You can simply copy them
all to the folder where your executable is, but a more clever way is to adjust your PATH variable

\subsection TutorialInstallationMacintosh Installation on a Macintosh PowerPC

Installing OpenSG on a Macintosh was, and still is, not a very easy task at all. Currently there is somebody working on a improved port, but unfortunately
this port is not finished yet. However, it is possible to run in on a Mac with either some missing features on Mac OS or full features on Linux on Mac.

Installation on Linux/ppc a bit extra effort, but the actual problem might be installing Linux itself on a Mac. At least you are rewarded with
a fully functional and performant OpenSG. 
I tried Yellow Dog Linux and Gentoo Linux on my Powerbook and the latter also on my G5. In both cases it worked find, after I solved some riddles. However
installing Gentoo is not very easy, if you are not an experienced Linux user. In that case I would recommend using Yellow Dog Linux.
Yellow Dog Linux is actually a port of Red Hat, but
YDL is available for the PowerPC architecture only. You can find the distributions at

<A HREF = "http://www.yellowdoglinux.com">http://www.yellowdoglinux.com</A> and <A HREF = "http://www.gentoo.org">http://www.gentoo.org</A>

Regardless of which Linux you actually use, you will of course need OpenGL (i.e. Mesa) development packages installed, as well as the GLUT package,
if you would like to use it. Furthermore the appropiate packages for the image libraries are needed. You can simply install imagemagick, for example, because
all image libraries needed by OpenSG are also installed with imagemagick and furthermore, if you want to build the decomentation yourself from source you need
it anyway.

However there is still one thing to do before you start compiling, because your system will be identified as powerpc-unknown-linux-gnu. 

Well, this is a bit quick and dirty but it works well, so open the "OSGConfig.h" which can be found in <I>your_openg_folder/Source/Base/Base</I>.
\code

// locate the following lines that say 
// (the are located after the first comment block)

#ifndef _OSGCONFIG_H
#define _OSGCONFIG_H

// and add the following line here

#define __linux

\endcode

<I>Note on Gentoo
There is an additional step to take if compiling on a Gentoo based systems. For some reasons, I do not understand, OpenSG will complain about an unknown
GNU major version - which is not correct, as this version is 3.80 as expected by OpenSG. You can check this by running
</I>
<PRE>
  make --version
</PRE>
<I>
Anyway, we will simply trick OpenSG again by opening "commonBuildDetect.mk" found in <I>your_opensg_folder/Common</I>. At the end of that file locate the
lines that say
</I>
\code
  MAKEMAJOR := $(strip $(MAKEMAJOR))
  MAKEMINOR := $(strip $(MAKEMINOR))
\endcode
<I>
and replace them with
</I>
\code
  MAKEMAJOR := 3
  MAKEMINOR := 80
\endcode
<I>
this will tell OpenSG the correct version of GNU make. You can now continue as normal
</I>

Your system will now be identified as linux throught OpenSG. Now, just run the configure and make command as you would normally on 
Linux based systems. If you are encountering any problems during compilation make sure you have all the needed libraries (and the appropriate devel packages)
installed.

If you want to run applications, don't forget do edit your .profile file as explained above for Linux on a PC. 

NOTE:
If you have just installed a new linux on your Mac, the hardware acceleration of your graphic cards is most likely not activated. I can not explain
how to activate it as this is not our concern here, but if you need help, the direct rendering infrastructure page would be a good point to start
off: <A HREF = "dri.sf.net">dri.sf.net</A>. This will only help you out if you have an ATI based graphics board (including some other, older chipsets), but 
not if you have an NVidia card. I am very sorry, but as NVidia develops their on closed source drivers for x86 only, there is currently no way to get 3D hardware
acceleration to your Mac!

\subsection TutorialInstallationWindows Installation on Windows

In order to use OpenSG on the Windows platform you need either the Intel compiler for Visual Studio 6 or you need Visual Studio 7 (aka .NET) or above. 
If you do not want to use cygwin you should download the binary installer. After installation, the PATH variable is automatically
set as needed and your can find the standart tutorials in your start menu. There are ready to use project files for Viusal Studio for every
tutorial that comes with OpenSG. These tutorials are the ones that shipped with OpenSG ever since, and have nothing to do with the tutorials we develop beginning
with the next chapter!

<I>
Notice:

The download page offers two different versions of OpenSG for Windows. One is using the Microsoft's STL and the other is using
the STLPort. I would recommend the STLPort in any case, because it is much faster! Especially if you are loading VRML files from
disk or you are manipulating big parts of geometry data the STLPort is quite more than two times faster! The necessary header files
are also automatically installed, so you do not have to download it yourself.
</I>

\section TutorialMakingAndExecuting Making and executing the tutorials

The fist thing to do with your fresh installation of OpenSG is most likely to test wether the tutorial programs are working or not. If
you just installed the binary version on windows you need only to point and click on start button > OpenSG > Tutorials>...

In all other cases you first have to build the tutorials, but that is as easy as clicking in Windows

\code
cd OpenSG\Tutorials
make

//after finishing, execute them
.\01hello
.\02move
// and so on

\endcode

The following picture shows what you should see if you type (assuming you are still in the Tutorials folder):
<PRE>
    ./10loading Data/tie.wrl
</PRE>

\image html tutorial_tie.png "The legendary Tie Fighter loaded from VRML by OpenSG!"
\image latex tutorial_tie.eps "The legendary Tie Fighter loaded from VRML by OpenSG!" width = 4cm

If you get an error when you are executing one of the tutorials you should check if you have correctly specified the LD_LIBRARY_PATH
or the PATH variable, depending on your platform

Windows users need not to compile the tutorials on their own as they are precompiled, but my advise is to open one Visual 
Studio project file and try to compile that tutorial. By doing this you can see if everthing is working fine.

\section TutorialCompilation Compilation of Own Applications

After compiling and executing your tutorials you are ready to start right off with your first own application! In the next chapter 
I will introduce a first tutorial where you can get used to some core aspects of OpenSG. But at this point I want to start with
some more general words about compiling OpenSG Projects.

\subsection TutorialCompilation Projects on Windows

If you want to spare a lot of time and trouble, do not try to start a new project from
within Visual Studio. There is a template project file provided. Use this template or simple change the code of a existing tutorial found in the "Tutorials" 
folder. Of course all those settings can be done by hand, but you should only do that, if you have no other choice (i.e. extend an existing project with
OpenSG Functionality)

[TODO: List all the entries that have to be done...]

[TODO : MFC Example]

\subsection TutorialCompilation Projects on Linux

Often Linux users have more trouble with setting up stuff compared to Mac or Windows. However this time it is quite easy, if you know what to do. If you are 
comfortable with Makefiles you can write your own one or use the sample \ref FirstAppTutorialMakefile I'll provide in the next chapter. This sample
assumes that every OpenSG application is consisting of one file only (which is really sufficent for us right now) and that each cpp filename is starting with
a two digit number like 00framework.cpp. Also those files found will compile into an application with the same name. If you want to or need to write your own
makefile you can peek into the sample one, to get an idea what is needed.

If you do not like terminal hacking you can, of course, also use your favourite integrated development environment. I will show you what is necessary 
to set up an project using kdevelop 3.0. First create a simple new C++ project like shown in the next picture

\image html new_project.png "Setup new simple C++ project"
\image latex new_project.eps "Setup new simple C++ project" width = 8cm

Replace the "hello world" code with your OpenSG program. If you want to try this, before you have any knowledge of OpenSG itself, you can simply copy the contents
of some tutorial. Now we need to specify some configure commands - click on "Project" in the menu bar and choose "Project Options". On the left hand side click
on "Configure Options". The following image shows what you should see

\image html project_options.png "Project Options"
\image latex project_options.eps "Project Options" width = 8cm

The red circles indicate where you need to make changes. These fields are empty on your screen, but you need to provide quite a lot of arguments here. Ready your
copy and paste shortcut...

<PRE>
C/C++ preprocessor flags (CPPFLAGS)

-D_GNU_SOURCE -DQT_CLEAN_NAMESPACE -DOSG_WITH_GLUT -DOSG_WITH_QT -DOSG_WITH_JPG 
-DOSG_WITH_PNG -D_OSG_HAVE_CONFIGURED_H_ -DQT_NO_XINERAMA -DQT_NO_XRENDER 
-DQT_NO_XFTFREETYPE -DQT_NO_XKB -DQT_NO_SM_SUPPORT -DQT_NO_IMAGEIO_MNG 
-DQT_NO_IMAGEIO_JPEG -DQT_NO_STYLE_AQUA -DQT_NO_STYLE_MAC 
-DQT_NO_STYLE_INTERLACE -DQT_NO_STYLE_COMPACT -use_readonly_const 
-ftemplate-depth-100 
-I/usr/local/include -I/usr/qt/3/include -march=athlon -Wno-deprecated
</PRE>

and 

<PRE>
-L/usr/local/lib/dbg -lOSGWindowGLUT -lOSGSystem -lOSGBase -lglut 
-lGLU -lGL -lXmu -lXi -lXt  -lqt -lpthread -ldl 
-L/usr/qt/3/lib -L/usr/X11R6/lib
</PRE>

<B>Important Note:</B>
<I>
I used default paths (i.e. -I/ust/qt/3/include) - you possibly have to adjust some values
</I>

\section TutorialExercises Exercises

\subsection TutorialIntroductionExercises1 Ex. Compile OpenSG
1. Compile the optimized (not debug) version of OpenSG for your platform. GLUT, tif, png and jpg support have to be enabled. 

\subsection TutorialIntroductionExercises2 Ex. Compile Tutorials
2. Compile all tutorials found in the "OpenSG/Tutorials" folder. Please notice that these tutorials are not related to
the tutorials I will present throughout theses pages! Execute some (or all) of the tutorials, after compilation has finised

Next Chapter : \ref FirstApp
*/
