#include <OSGConfig.h>

using namespace OSG;

/*! \page PageIntroduction Introduction

\latexonly Starter:NewChapter \endlatexonly

Welcome to the OpenSG starter guide. This document will help you understand
the structure of the OpenSG system and the main classes that you need to know
to write graphics programs using OpenSG. It started as a quick-start, but got
a little big for that. ;) If you're not into reading text, take a look at the
tutorial programs and come back when you need a little background for specific
topics.

It is not meant to be an introduction to computer graphics or real-time
rendering. It would actually be useful to be somewhat familiar with another
scene graph system, but that's not mandatory. For a short introduction to the
scene graph concept, see \ref PageScenegraph.

It does not explain every single function and its parameters, take a look at
the Code documentation that is generated by doxygen for that. It will also not
motivate the decisions taken and alternatives that were rejected, see the
design document for that. This is just for jump-starting OpenSG usage.

If you want to send feedback or have further questions you can send them
either to the OpenSG user list (opensg-users@lists.sourceforge.net) or to us
directly at feedback@opensg.org.

This starter guide was written by the core team, but it wouldn't be what it is
without the helpful reviews and comments by Marc Alexa and Patrick Dähne.

This is for version 1.2.0, which is a stable release, meaning that we put
quite a bit of work into writing it. That doesn't mean it's perfect or without
problems, which we would like to hear about. But it's a lot better than what
we had before.

\section StarterWhatis What is OpenSG?

OpenSG is a real-time rendering system based on a scene graph metaphor. It
works along the lines of OpenInventor, Performer or Java3D, although it is
probably closest to Performer. It supports parallel processing, albeit in a
more general way, and will drive multiple displays for multi-screen stereo
projection systems, possible distributed across a cluster of machines. The
goal is to have something that handles multi-threaded data structures as
simply as possible without compromising performance too much. It should also
support heterogeneous multi-pipe applications, i.e. multiple different
graphics cards running one application. Many things are quite easy to do with
a little program, but are sometimes hard to fit into an existing system. Thus
accessibility is an important goal, and we're striving to make OpenSG very
extensible.

It works on different Unix systems and Windows. It compiles with the Microsoft
Visual Studio compiler, starting with version 7.


\section StarterWhatisnot What is OpenSG not?

OpenSG is not a complete VR system. Things like device access and interaction
are left out on purpose, there are other systems for that (like VRJuggler or
Open Tracker).


\section StarterCompilation Compilation 

\subsection StarterCompileApps Applications Using OpenSG

\subsubsection StarterAppsUnix Unix / Cygwin

You either need to compile the library (see below) or install a binary
version. OpenSG comes with a \p osg-config script that can output the
necessary option for compiling/linking applications suing OpenSG. As OpenSG is
split into several optional libraries (see \ref StarterSysstruct), the script
needs to know which libraries you want to use. For example to find the options
necessary to compile a source file for an application that uses the base,
system and GLUT window-system libaries you would put the output of
<tt>osg-config --cflags Base  System GLUT</tt> into your \p Makefile. For an
example see the \p Makefile of the tutorials, it works on every system with a
usable command line.

\subsubsection StarterAppsVS Visual Studio

If you want to compile an application using OpenSG using Visual Studio we \b
strongly recommend to not start a new project and add the OpenSG libraries, but
start with a project for a tutorial example from the binary distribution. 

The reason is that OpenSG needs a bunch of command line options for the Visual
Studio compiler to use it, and using different options for compiling
applications than the ones used for compiling the library can and will lead to
mysterious crashes, typically in inline methods that reallocate memory like
adding children to nodes, or creating Geometry. The reason is usually the
braindead memory management of Windows, which does not allow freeing memory
that was allocated in another DLL, unless all of them have been linked with the
same runtime lib. If you didn't understand that: never mind, just make sure you
use the right compiler options.


\subsection StarterCompileLib Compiling OpenSG Itself

\subsubsection StarterLibUnix Unix / Cygwin

Short version: ./configure ; make should work.

Long version: OpenSG uses a relatively standard configure script to adapt the
options it needs to the system it's compiled on. configure is also used to set
up optional libraries that are available. For Windows you can use the
cygwin environment (http://sources.redhat.com/cygwin/) to get the needed shell
tools.

Note that there are some constraints. You should install the Visual Studio and
Intel compiler in their default locations (...:\Program Files\...), otherwise
the configure script will not find them. Install the GLUT in UNIX-style
directories, i.e. .../include/GL/glut.h and .../lib/ *dll+*lib, otherwise it
won't be found. Note that you need to add the directory where the libs are
created to your PATH or WINPATH (or to the Windows environment variable PATH),
or copy all the dlls to the directory where your programs are. Some of these
will be lifted in the future, but that's the way it is right now.

All options are optional. The most useful ones are --with-jpg[=<dir>],
--with-glut[=<dir>], --with-qt[=<dir>], --with-tif[=<dir>]</tt> and
--with-png[=<dir>] which specify the directories where the specific
libraries/header can be found. If you need to download these libraries, check
http://www.opensg.org/prerequisites.EN.html for locations. All examples and
tutorials use GLUT, so it's highly recommended to configure it. There are some
other options that are less often needed, run configure --help to get a full
list.

So for a standard Linux distribution you should call ./configure --with-jpg
--with-tif --with-png --with-qt=$QTDIR to get a useful configuration.

Configure creates a directory in Builds with a name specific for the current
system, e.g. Builds/i686-pc-linux-gnu-g++/. Go into this directory and call
make to create the libraries.

In general you can call make help in any directory with a makefile to get a
list of supported targets in this directory.

Not that OpenSG needs the GNU version of make. This is the default on Linux
and Cygwin systems, so a simple make is fine. On IRIX it's usually called
gmake, if you don't have it you need to install it yourself. 

\subsubsection StarterLibVS Visual Studio

Project files for Visual Studio 6 and 7 are in the \p VSBuild directory. They
can be created from the Makefiles on a Cygwin system automatically (make dsp
or make dsp7). The project for VS7 is actually a VS6 project that will be
converted to VS7 format the first time it is used.

Note that you need the Intel compiler for VS6, the Microsoft VS6 compiler
is just too far away from the C++ standard to use OpenSG.


\section StarterSysstruct System Structure

The full OpenSG system consistes of several libraries. 

The Base library contains the low-level functions and basic classes like
vectors and volumes. It also contains the operating system abstractions and
the basic multi-threading wrappers.

The System library is the main library. It contains all the higher-level
objects starting at the FieldContainer level. That includes all the scenegraph
nodes and the actions to work on them. It includes the loaders for images and
scene files, and the general window handling classes. In general, it includes
everything the other libraries don't.

For each window system that is supported there's a separate little library
which contains the interface objects for that window system. Right now we have
interfaces to X, WIN32, GLUT and QT.

The sources for all of these are in the \p Source subdirectory.

\section StarterInstallation Installation

Call make install to install the libraries in the place specified to
configure, or /usr/local per default. You can change the installation
directory at install time by specifying it as make INSTALL_DIR=<dir> install.
make install will copy all include files into a directory OpenSG in
$INSTALL_DIR/include and the libs into $INSTALL_DIR/lib/dbg or
$INSTALL_DIR/lib/opt, depending on the optimization used. 

For a local install it's useful to use BUILD as the prefix for configure, i.e.
call configure --prefix=BUILD. This will install the system into the correct
Builds/ * directory.

\section StarterMaketest Making and executing the test programs

To build the test programs, go into the BaseTest, SystemTest etc. directories
and call make or make Tests. make list lists the available programs in the
current directory. You can make a specific test program by running the listed
command.

To execute the test programs you need to have the OpenSG dynamic libraries in
your library search path. For that it's easiest to locally install them as
described before and call (csh/tcsh) setenv LD_LIBRARY_PATH
${LD_LIBRARY_PATH}:../lib/dbg or (sh/bash) export
LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:../lib/dbg. Then you can just run the test
programs in the *Test directory.

\section StarterMaketut Making and executing the tutorials

There are a number of tutorial examples in the tutorials directory. They are
available in compiled form as a part of the binary distributions, but it is
possible and probably the best way to start using OpenSG to change and
recompile them.

You need to make and install the libraries first. To actually create the
tutorials on Unix just call make. For Windows there's a Visual Studio
Workspace file in the binary distribution.

\ext

\section StarterExtending Extending OpenSG

Extending OpenSG is generally trivial: just add your files to the directories,
they will automagically be picked up by the next compile. 

Adding new directories is a little more tricky. You need to add your directory
to CommConf/common.libs.in. This is not difficult, but hard to explain. If you
need to do that, take a look at the file, try it and if it doesn't work send
us an email or use the developer list on SourceForge.

If you need new libraries you have to add them to the configure script . Copy
some of the given examples or ask us for help.

The following chapters introduce you to the main classes and concepts used in
OpenSG. Again, they are not intended to explain every function and its
parameters, see the doxygen documentation for that, and they are not meant to
explain the reasons behind the design choices, see the design document for
that. 1.2 What is OpenSG not?

OpenSG is not a complete VR system. Things like device access and interaction
are left out on purpose, there are other systems for that.

\endext

\section StarterWheretoget Where to get it

If you read this you probably have it already, otherwise take a look at
http://www.opensg.org/ for the latest released version. You can also get it
from SourceForge, which we use for project management, at
http://www.sf.net/project/showfiles.php?group_id=5283.

If you want to get access to the current development version you can get it
from CVS, see http://sourceforge.net/cvs/?group_id=5283 for details. Nightly
snapshots of the CVS source and libs are available at at
www.opensg.org/dailybuild_logs.

*/
