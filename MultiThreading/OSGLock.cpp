/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#define OSG_COMPILEFIELDCONTAINER

#include <stdlib.h>
#include <stdio.h>

#include "OSGConfig.h"

#include <iostream>

#include "OSGLock.h"

#include "OSGLock.h"

#include "OSGBaseFunctions.h"

#include "OSGThreadManager.h"

#include <errno.h>
#include <OSGLog.h>

OSG_USING_NAMESPACE


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char LockCommonBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

LockCommonBase::LockCommonBase(void) :
    Inherited(NULL),
    _uiLockId(0)
{
}

LockCommonBase::LockCommonBase(const Char8  *szName,
                                           UInt32  uiId):
    Inherited(szName),
    _uiLockId(uiId)
{
}

/** \brief Destructor
 */

LockCommonBase::~LockCommonBase(void)
{
}


/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/



#if defined (OSG_USE_PTHREADS)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char PThreadLockBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

PThreadLockBase::PThreadLockBase(void):
    Inherited(),
    _pLowLevelLock()
{
}

/** \brief Constructor
 */

PThreadLockBase::PThreadLockBase(const Char8  *szName,
                                             UInt32  uiId) :
    Inherited(szName, uiId),
    _pLowLevelLock()
{
}

/** \brief Destructor
 */

PThreadLockBase::~PThreadLockBase(void)
{
}

Bool PThreadLockBase::init(void)
{
    pthread_mutex_init(&(_pLowLevelLock), NULL);

    return true;
}

void PThreadLockBase::shutdown(void)
{
    pthread_mutex_destroy(&(_pLowLevelLock));
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void PThreadLockBase::aquire(void)
{
    pthread_mutex_lock  (&(_pLowLevelLock));         
}

void PThreadLockBase::release(void)
{
    pthread_mutex_unlock(&(_pLowLevelLock));               
}

Bool PThreadLockBase::request(void)
{
    return (pthread_mutex_trylock(&(_pLowLevelLock)) != EBUSY); 
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

#endif /* OSG_USE_PTHREADS */




#if defined (OSG_USE_SPROC)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char SprocLockBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

SprocLockBase::SprocLockBase(void):
    Inherited(),
    _pLowLevelLock(NULL)
{
}

/** \brief Constructor
 */

SprocLockBase::SprocLockBase(const Char8  *szName, 
                                         UInt32  uiId):
    Inherited(szName, uiId),
    _pLowLevelLock(NULL)
{
}

/** \brief Destructor
 */

SprocLockBase::~SprocLockBase(void)
{
}

Bool SprocLockBase::init(void)
{
    ThreadManager *pThreadManager = ThreadManager::the();

    if(pThreadManager == NULL)
        return false;

    if(pThreadManager->getArena() == NULL)
        return false;

    _pLowLevelLock = usnewlock(pThreadManager->getArena());

    if(_pLowLevelLock == NULL)
        return false;

    usinitlock(_pLowLevelLock);

    return true;
}

void SprocLockBase::shutdown(void)
{
    ThreadManager *pThreadManager = ThreadManager::the();

    if(pThreadManager == NULL)
        return;

    if(pThreadManager->getArena() == NULL)
        return;

    if(_pLowLevelLock != NULL)
    {
        usfreelock(_pLowLevelLock, pThreadManager->getArena());

        _pLowLevelLock = NULL;
    }
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void SprocLockBase::aquire(void)
{
    if(_pLowLevelLock != NULL)
        ussetlock(_pLowLevelLock);
}

void SprocLockBase::release(void)
{
    if(_pLowLevelLock != NULL)
        usunsetlock(_pLowLevelLock);
}

Bool SprocLockBase::request(void)
{
    Bool  returnValue = false;
    Int32 rc          = 0;

    if(_pLowLevelLock != NULL)
        rc = uscsetlock(_pLowLevelLock, 0);

    returnValue = (rc == 1);

    return returnValue;
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/


#endif /* OSG_USE_SPROC */



#if defined (OSG_USE_WINTHREADS)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char WinThreadLockBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

WinThreadLockBase::WinThreadLockBase(void) :
    Inherited()
#ifdef OSG_WINLOCK_USE_MUTEX
    , _pMutex(NULL)
#endif
{
}

/** \brief Constructor
 */

WinThreadLockBase::WinThreadLockBase(const Char8  *szName,
                                                 UInt32  uiId) :
    Inherited(szName, uiId)
#ifdef OSG_WINLOCK_USE_MUTEX
    , _pMutex(NULL)
#endif
{
}

/** \brief Destructor
 */

WinThreadLockBase::~WinThreadLockBase(void)
{
}

Bool WinThreadLockBase::init(void)
{ 
#ifdef OSG_WINLOCK_USE_MUTEX
	_pMutex = CreateMutex(NULL,      // no security attributes
                          FALSE,     // initially not owned
                          _szName);  // name of mutex
	
	if(_pMutex == NULL) 
	{
		return false;
    }

    return true;
#else
    InitializeCriticalSection(&_pCriticalSection);

    return true;
#endif
}

void WinThreadLockBase::shutdown(void)
{
#ifdef OSG_WINLOCK_USE_MUTEX
    if(_pMutex != NULL)
    {
        CloseHandle(_pMutex);
    }
#else
    DeleteCriticalSection(&_pCriticalSection);
#endif
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void WinThreadLockBase::aquire(void)
{
#ifdef OSG_WINLOCK_USE_MUTEX
    WaitForSingleObject(_pMutex, INFINITE);
#else
    EnterCriticalSection(&_pCriticalSection);
#endif
}

void WinThreadLockBase::release(void)
{
#ifdef OSG_WINLOCK_USE_MUTEX
    ReleaseMutex(_pMutex);
#else
    LeaveCriticalSection(&_pCriticalSection);
#endif
}

Bool WinThreadLockBase::request(void)
{
#ifdef OSG_WINLOCK_USE_MUTEX
    DWORD rc;
    rc = WaitForSingleObject(_pMutex, 0);

    if(rc == WAIT_OBJECT_0)
    {
        return true;
    }
    else
    {
        return false;
    }
#else
    return TryEnterCriticalSection(&_pCriticalSection);
#endif
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

#endif /* OSG_USE_WINTHREADS */





//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char          Lock::cvsid[] = "@(#)$Id: $";
MPLockType Lock::_type("OSGLock", "OSGMPBase", Lock::create);

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

Lock *Lock::create(const Char8 *szName, UInt32 uiId)
{
    Lock *returnValue = NULL;

    returnValue = new Lock(szName, uiId);

    if(returnValue->init() == false)
    {
        delete returnValue;
        returnValue = NULL;
    }
    
    return returnValue;
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

Lock::Lock(void) :
    Inherited()
{
}

Lock::Lock(const Char8 *szName, UInt32 uiId) :
    Inherited(szName, uiId)
{
}

/** \brief Destructor
 */

Lock::~Lock(void)
{
    ThreadManager::the()->removeLock(this);
    shutdown();
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/





//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char LockPool::cvsid[] = "@(#)$Id: $";

MPLockPoolType LockPool::_type("OSGLockPool", 
                                     "OSGMPBase", 
                                     LockPool::create);

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

LockPool *LockPool::create(const Char8 *szName, UInt32 uiId)
{
    LockPool *returnValue = NULL;

    returnValue = new LockPool(szName, uiId);

    if(returnValue->init() == false)
    {
        delete returnValue;
        returnValue = NULL;
    }
    
    return returnValue;
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

Bool LockPool::init(void)
{
    Bool   returnValue = true;
    Char8 *pTmp;

    pTmp = new Char8[strlen(_szName) + 6];

    for(UInt32 i = 0; i < uiLockPoolSize; i++)
    {
#ifdef OSG_DEBUG_LOCK_STAT
        _pLockStats[i] = 0;
#endif
        sprintf(pTmp, "%s%d\n", _szName, i);

        stringDup(pTmp, _pLocks[i]._szName);

        returnValue &= _pLocks[i].init();
    }

    delete [] pTmp;
        
    return returnValue;
}

void LockPool::shutdown(void)
{
    for(UInt32 i = 0; i < uiLockPoolSize; i++)
    {
        _pLocks[i].shutdown();
    }
}

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

LockPool::LockPool(const Char8  *szName,
                               UInt32  uiId) :
    Inherited(szName, uiId)
{
}

/** \brief Destructor
 */

LockPool::~LockPool(void)
{
    ThreadManager::the()->removeLockPool(this);
    shutdown();
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void LockPool::aquire(void *keyP)
{
    _pLocks[(((UInt32) keyP) & uiLockPoolMask) >> 7].aquire();
}

void LockPool::release(void *keyP)
{
    _pLocks[(((UInt32) keyP) & uiLockPoolMask) >> 7].release();
}

Bool LockPool::request(void *keyP)
{
    return _pLocks[(((UInt32) keyP) & uiLockPoolMask) >> 7].request();
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

///---------------------------------------------------------------------------
///  FUNCTION: 
///---------------------------------------------------------------------------
//:  Example for the head comment of a function
///---------------------------------------------------------------------------
///
//p: Paramaters: 
//p: 
///
//g: GlobalVars:
//g: 
///
//r: Return:
//r: 
///
//c: Caution:
//c: 
///
//a: Assumptions:
//a: 
///
//d: Description:
//d: 
///
//s: SeeAlso:
//s: 
///---------------------------------------------------------------------------

