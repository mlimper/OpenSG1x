/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#define OSG_COMPILEMULTITHREADING

#include <stdlib.h>
#include <stdio.h>

#include "OSGConfig.h"

#include <iostream>

#include "OSGMPBase.h"
#include <OSGTypeFactory.h>
#include <OSGBaseFunctions.h>
#include <OSGThreadManager.h>

OSG_USING_NAMESPACE

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char MPType::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPType::MPType(const Char8 *szName, 
                     const Char8 *szParentName,
                           Bool   bRegister) :
    Inherited(szName, bRegister)
{
}

/** \brief Destructor
 */

MPType::~MPType(void)
{
}


/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/



//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char      MPThreadType::cvsid[]        = "@(#)$Id: $";

UInt32 MPThreadType::_uiThreadCount = 0;

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPThreadType::MPThreadType(const Char8         *szName, 
                                 const Char8         *szParentName,
                                       CreateThreadF  fCreateThread) :
    Inherited(szName, szParentName),

    _fCreateThread(fCreateThread)
{
    _uiTypeId = ThreadManager::the()->registerThreadType(this);
}

/** \brief Destructor
 */

MPThreadType::~MPThreadType(void)
{
}


/*---------------------------- properties ---------------------------------*/

Thread *MPThreadType::create(const Char8 *szName)
{
    Char8  *szTmp;
    UInt32  uiNewId = _uiThreadCount++;

    if(szName == NULL)
    {
        szTmp = new Char8[16];
        sprintf(szTmp, "OSGThread_%d", uiNewId);
    }
    else
    {
        szTmp = const_cast<Char8 *>(szName);
    }

    if(_fCreateThread != NULL)
        return _fCreateThread(szTmp, uiNewId);
    else
        return NULL;
}


/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/



//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char MPBarrierType::cvsid[] = "@(#)$Id: $";

UInt32 MPBarrierType::_uiBarrierCount = 0;

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPBarrierType::MPBarrierType(const Char8          *szName, 
                                   const Char8          *szParentName,
                                         CreateBarrierF  fCreateBarrier) :
    Inherited(szName, szParentName),
    _fCreateBarrier(fCreateBarrier)
{
    _uiTypeId = ThreadManager::the()->registerBarrierType(this);
}

/** \brief Destructor
 */

MPBarrierType::~MPBarrierType(void)
{
}

/*---------------------------- properties ---------------------------------*/

Barrier *MPBarrierType::create(const Char8 *szName)
{
    UInt32 uiNewId = _uiBarrierCount++;

    if(_fCreateBarrier != NULL)
        return _fCreateBarrier(szName, uiNewId);
    else
        return NULL;
}

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/






//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char MPLockType::cvsid[] = "@(#)$Id: $";

UInt32 MPLockType::_uiLockCount = 0;

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPLockType::MPLockType(const Char8       *szName, 
                             const Char8       *szParentName,
                                   CreateLockF  fCreateLock) :
    Inherited(szName, szParentName),
    _fCreateLock(fCreateLock)
{
    _uiTypeId = ThreadManager::the()->registerLockType(this);
}


/** \brief Destructor
 */

MPLockType::~MPLockType(void)
{
}


/*---------------------------- properties ---------------------------------*/

Lock *MPLockType::create(const Char8 *szName)
{
    UInt32 uiNewId = _uiLockCount++;

    if(_fCreateLock != NULL)
        return _fCreateLock(szName, uiNewId);
    else
        return NULL;
}


/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/




//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char MPLockPoolType::cvsid[] = "@(#)$Id: $";

UInt32 MPLockPoolType::_uiLockPoolCount = 0;

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPLockPoolType::MPLockPoolType(
    const Char8          *szName, 
    const Char8          *szParentName,
    CreateLockPoolF  fCreateLockPool) :

    Inherited(szName, szParentName),
    _fCreateLockPool(fCreateLockPool)
{
    _uiTypeId = ThreadManager::the()->registerLockPoolType(this);
}


/** \brief Destructor
 */

MPLockPoolType::~MPLockPoolType(void)
{
}

/*---------------------------- properties ---------------------------------*/

LockPool *MPLockPoolType::create(const Char8 *szName)
{
    UInt32 uiNewId = _uiLockPoolCount++;

    if(_fCreateLockPool != NULL)
        return _fCreateLockPool(szName, uiNewId);
    else
        return NULL;
}

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/








//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/


char      MPBase::cvsid[] = "@(#)$Id: $";

MPType MPBase::_type("OSGMPBase", NULL, true);

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

const MPType &MPBase::getStaticType(void)
{
    return _type;
}

UInt32 MPBase::getStaticTypeId(void)
{
    return 0;
}

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MPBase::MPBase(const Char8 *szName) :
    Inherited(),
    
    _szName(NULL)
{
    stringDup(szName, _szName);
}

/** \brief Destructor
 */

MPBase::~MPBase(void)
{
    delete [] _szName;
}

/*---------------------------- properties ---------------------------------*/

MPType &MPBase::getType(void)
{
    return _type;
}

const MPType &MPBase::getType(void) const
{
    return _type;
}

UInt32 MPBase::getTypeId(void)
{
    return getType().getId();
}

const Char8 *MPBase::getCName(void) const
{
    return _szName;
}

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- inheriteance ---------------------------------*/

/*-------------------------- comparison -----------------------------------*/



///---------------------------------------------------------------------------
///  FUNCTION: 
///---------------------------------------------------------------------------
//:  Example for the head comment of a function
///---------------------------------------------------------------------------
///
//p: Paramaters: 
//p: 
///
//g: GlobalVars:
//g: 
///
//r: Return:
//r: 
///
//c: Caution:
//c: 
///
//a: Assumptions:
//a: 
///
//d: Description:
//d: 
///
//s: SeeAlso:
//s: 
///---------------------------------------------------------------------------
