/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#define OSG_COMPILEBASELIB

#include <stdlib.h>
#include <stdio.h>

#include "OSGConfig.h"

#include <iostream>

#include "OSGBarrier.h"
#include "OSGBaseFunctions.h"

#include <OSGThreadManager.h>

OSG_USING_NAMESPACE

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char BarrierCommonBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

BarrierCommonBase::BarrierCommonBase(const Char8  *szName,
                                                 UInt32  uiId):
    Inherited(szName),
    _uiBarrierId(uiId)
{
}

/** \brief Destructor
 */

BarrierCommonBase::~BarrierCommonBase(void)
{
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/



#if defined (OSG_USE_PTHREADS)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char PThreadBarrierBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

PThreadBarrierBase::PThreadBarrierBase(const Char8  *szName,
                                                   UInt32  uiId) :
    Inherited(szName, uiId),

    _pLockOne         (),
    _pLockTwo         (),
    _pWakeupCondition (),
    _uiCount          (0)    
{
}

/** \brief Destructor
 */

PThreadBarrierBase::~PThreadBarrierBase(void)
{
}

Bool PThreadBarrierBase::init(void)
{
    pthread_cond_init (&(_pWakeupCondition), NULL);
    pthread_mutex_init(&(_pLockOne),         NULL);
    pthread_mutex_init(&(_pLockTwo),         NULL);
        
    _uiCount = 0;

    return true;
}

void PThreadBarrierBase::shutdown(void)
{
    pthread_cond_destroy (&(_pWakeupCondition));
    pthread_mutex_destroy(&(_pLockOne));
    pthread_mutex_destroy(&(_pLockTwo));
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void PThreadBarrierBase::enter(UInt32 uiNumWaitFor)
{
    if(uiNumWaitFor <= 1)
        return;
        
    pthread_mutex_lock(&(_pLockOne));

    _uiCount++;

    if(_uiCount < uiNumWaitFor)
    {
        /* not enough threads are waiting => wait */

        pthread_cond_wait(&(_pWakeupCondition), &(_pLockOne));
    }
    else
    {
        /* ok, enough threads are waiting
           => wake up all waiting threads 
        */

        pthread_cond_broadcast(&(_pWakeupCondition));
        
    }

    pthread_mutex_lock(&(_pLockTwo));         
    
    if(_uiCount == uiNumWaitFor)
    {
        _uiCount = 0;

        pthread_cond_init(&(_pWakeupCondition), NULL);
    }
    
    pthread_mutex_unlock(&(_pLockTwo));               
    
    pthread_mutex_unlock(&(_pLockOne));
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

#endif /* OSG_USE_PTHREADS */


#if defined (OSG_USE_SPROC)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char SprocBarrierBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

SprocBarrierBase::SprocBarrierBase(const Char8  *szName,
                                               UInt32  uiId) :
    Inherited(szName, uiId),

    _pBarrier(NULL)
{
}

/** \brief Destructor
 */

SprocBarrierBase::~SprocBarrierBase(void)
{
}

Bool SprocBarrierBase::init(void)
{
    ThreadManager *pThreadManager = ThreadManager::the();

    if(pThreadManager == NULL)
        return false;

    if(pThreadManager->getArena() == NULL)
        return false;

    _pBarrier = new_barrier(pThreadManager->getArena());

    if(_pBarrier == NULL)
        return false;

    init_barrier(_pBarrier);

    return true;
}

void SprocBarrierBase::shutdown(void)
{
    if(_pBarrier != NULL)
        free_barrier(_pBarrier);   
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void SprocBarrierBase::enter(UInt32 uiNumWaitFor)
{
    if(_pBarrier != NULL)
        barrier(_pBarrier, uiNumWaitFor);
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

#endif /* OSG_USE_SPROC */


#if defined (OSG_USE_WINTHREADS)

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char WinThreadBarrierBase::cvsid[] = "@(#)$Id: $";

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/** \brief Constructor
 */

WinThreadBarrierBase::WinThreadBarrierBase(const Char8  *szName,
                                                       UInt32  uiId) :
    Inherited(szName, uiId),

	_uiCount(0),
	_pMutex1(NULL),
	_pMutex2(NULL),
	_pConditionEvent(NULL)

{
}

/** \brief Destructor
 */

WinThreadBarrierBase::~WinThreadBarrierBase(void)
{
}

Bool WinThreadBarrierBase::init(void)
{
    Char8 *pTmp;

    pTmp = new Char8[strlen(_szName) + 5];

    sprintf(pTmp, "%sWE", _szName);

	_pConditionEvent = CreateEvent(NULL,
                                   TRUE,
                                   FALSE,
                                   pTmp); 

    if(_pConditionEvent == NULL) 
	{
		fprintf(stderr, "Event create failed\n");
		return false;
    }

    sprintf(pTmp, "%sM1", _szName);

	_pMutex1 = CreateMutex(NULL,   // no security attributes
                           FALSE,  // initially not owned
                           pTmp);  // name of mutex
	
	if(_pMutex1 == NULL) 
	{
        CloseHandle(_pConditionEvent);

		fprintf(stderr, "Create mutex1 failed\n");
		return false;
    }


    sprintf(pTmp, "%sM2", _szName);

	_pMutex2 = CreateMutex(NULL,   // no security attributes
                           FALSE,  // initially not owned
                           pTmp);  // name of mutex
	
	if(_pMutex2 == NULL) 
	{
        CloseHandle(_pConditionEvent);
        CloseHandle(_pMutex1);

		fprintf(stderr, "Create mutex2 failed\n");
		return false;
    }

    delete [] pTmp;

    return true;
}

void WinThreadBarrierBase::shutdown(void)
{
    if(_pConditionEvent != NULL)
        CloseHandle(_pConditionEvent);

    if(_pMutex1 != NULL)
        CloseHandle(_pMutex1);

    if(_pMutex2 != NULL)
        CloseHandle(_pMutex2);
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

void WinThreadBarrierBase::enter(UInt32 uiNumWaitFor)
{
    if(uiNumWaitFor <= 1)
        return;
        
    WaitForSingleObject(_pMutex1, INFINITE);

    _uiCount++;

    if(_uiCount < uiNumWaitFor)
    {
        /* not enough threads are waiting => wait */

        ReleaseMutex(_pMutex1);
        WaitForSingleObject(_pConditionEvent, INFINITE);
    }
    else
    {
        /* ok, enough threads are waiting
           => wake up all waiting threads 
        */

        ReleaseMutex(_pMutex1);
        SetEvent(_pConditionEvent);
        
    }

	WaitForSingleObject(_pMutex2, INFINITE);
    
    if(_uiCount == uiNumWaitFor)
    {
        _uiCount = 0;
        ResetEvent(_pConditionEvent);
    }

	ReleaseMutex(_pMutex2);
}

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/

#endif /* OSG_USE_WINTHREADS */


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

char Barrier::cvsid[] = "@(#)$Id: $";

MPBarrierType Barrier::_type("OSGBarrier", 
                                   "OSGMPBase",
                                   Barrier::create);

/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

Barrier *Barrier::create (const Char8  *szName,
                                      UInt32  uiId)
{
    Barrier *returnValue = NULL;

    returnValue = new Barrier(szName, uiId);

    if(returnValue->init() == false)
    {
        delete returnValue;
        returnValue = NULL;
    }
    
    return returnValue;
}


/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

Barrier::Barrier(const Char8  *szName,
                             UInt32  uiId) :
    Inherited(szName, uiId)
{
}

/** \brief Destructor
 */

Barrier::~Barrier(void)
{
    ThreadManager::the()->removeBarrier(this);

    shutdown();
}

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*------------- constructors & destructors --------------------------------*/

/*------------------------------ access -----------------------------------*/

/*---------------------------- properties ---------------------------------*/

/*-------------------------- your_category---------------------------------*/

/*-------------------------- assignment -----------------------------------*/

/*-------------------------- comparison -----------------------------------*/




///---------------------------------------------------------------------------
///  FUNCTION: 
///---------------------------------------------------------------------------
//:  Example for the head comment of a function
///---------------------------------------------------------------------------
///
//p: Paramaters: 
//p: 
///
//g: GlobalVars:
//g: 
///
//r: Return:
//r: 
///
//c: Caution:
//c: 
///
//a: Assumptions:
//a: 
///
//d: Description:
//d: 
///
//s: SeeAlso:
//s: 
///---------------------------------------------------------------------------

