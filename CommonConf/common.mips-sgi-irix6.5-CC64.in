
LINKER_INIT_FLAG     := -Wl,-init

LIBPATH_OPTION       := -L
LIBLNK_OPTION        := -l

OBJ_OPTION           := -o

NO_STDINC_DEP_OPTION := -Y

COMPONLY_OPTION      := -c

DEPEND_OPTION        := -M

LD_OUTOPT            := -o

LNK_LD_OUTOPT        := -o

DIR_SEP              := /

II_FILESDIR          := ii_files

### Compiler Version ###############################################


COMPILER := $(shell CC -version 2>&1  | cat)

CV := $(word $(words $(COMPILER)),$(COMPILER))
CV := $(subst ., ,$(CV))
CV := $(wordlist 1,1,$(CV))$(wordlist 2,2,$(CV))$(wordlist 3,3,$(CV))

COMPILERVERSION := $(strip $(CV))

### Target ##########################################################

ISA     := mips4
ABI     := 64
DEFLIBS := 64

### Defines #######################################################

ifeq ($(CONFIGURED_GVBETA),1)
DEF_GVBETA := -DOSG_GV_BETA
else
DEF_GVBETA :=
endif

# For QT
DEP_PLATTFORMDEF = -D__EDG__ -D_STANDARD_C_PLUS_PLUS 

SOURCE_DEFINES   = -DQT_CLEAN_NAMESPACE

SYSTEM_DEFINES   = -D_OSG_HAVE_CONFIGURED_H_    \
                   $(DEF_GVBETA)



### Warnings #######################################################

WARNINGS	   		= -fullwarn 

WARNINGS_C_OFF		= # -woff 835

# 1110 : statement is unreachable
# 1174 : Variable declared but never referenced
# 1375 : Base class Destructor not virtual
# 1376 : class has no accessible constructors
# 1424 : The template parameter is not used in declaring the argument types
# 1682 : overloaded virtual function is only partially overridden
# rubens
# warning(3322): omission of explicit type is nonstandard ("int" assumed)

WARNINGS_CPP_OFF 	= -woff 1355 #-woff 1110,1174,1375,1682,1424,3322

ifeq ($(PEDANTIC_ERRORS),1)
WARN_ERR_CPP        = -diag_error 1548,1116,1681,1552,3303,1682,1551,1197   \
					  -diag_error 1174,1375,3331,1169,1401,3201,1424,1110
else
WARN_ERR_CPP        = -diag_error 1548,1116,1552,3303,1682,1551,1197        \
					  -diag_error 3331,1169,1401,1110
endif

### Language #######################################################

#can not use this one, as MS is not ansi conform
#-LANG:ansi-for-init-scope=on 

LANG_FLAGS          = -LANG:restrict			                            \
					  -LANG:exceptions=ON -LANG:std

COMPILER    		= -$(ABI) -$(ISA) -xansi  -use_readonly_const 			\
					  -no_auto_include $(LANG_FLAGS)

### Optimize / Debug ###############################################

ifeq ($(PRINT_INLINE), 1)
COMP_INLINE := $(COMP_INLINE) -INLINE:list=ON
endif

ifeq ($(DEBUG_VERSION), 0)
	COMP_OPTIMIZE    = -OPT:Olimit=8192 -O2 $(COMP_INLINE)
	COMP_DEBUG       = 
else
	COMP_OPTIMIZE    =
	COMP_DEBUG       = -g -INLINE:none -DOSG_DEBUG
endif

CCFLAGS_EXT_OPT := -OPT:Olimit=8192 -O2
CCFLAGS_EXT_DBG := -g -INLINE:none -DOSG_DEBUG

### Compiler Flags ################################################


DEFINES     = $(SOURCE_DEFINES) $(SYSTEM_DEFINES) $(DEP_PLATTFORMDEF)	\
		      $(CONFIGURED_PACKAGE_DEFS)

# C Compiler Flags

CFLAGS   := $(WARNINGS) $(WARNINGS_C_OFF) -D__STDC__ 						\
		    $(DEFINES) $(COMPILER) $(COMP_OPTIMIZE) $(COMP_DEBUG)

# CPP Compiler Flags

CCFLAGS  := $(WARNINGS) $(WARNINGS_CPP_OFF) $(WARN_ERR_CPP) $(DEFINES) \
		    $(COMPILER) $(COMP_OPTIMIZE) $(COMP_DEBUG) 

CCDEPFLAGS := $(COMPILER) $(COMP_OPTIMIZE) $(COMP_DEBUG) 

CCFLAGS_EXT     := $(SOURCE_DEFINES) $(SYSTEM_DEFINES) $(DEP_PLATTFORMDEF) $(COMPILER) 

# Assembler Flags

ASFLAGS  := $(WARNINGS) $(WARNINGS_C_OFF) $(DEFINES) 	\
	 	    $(COMPILER) $(COMP_OPTIMIZE) $(COMP_DEBUG) 


# Linker Flags

ifeq ($(PRINT_INLINE), 1)
LINK_INLINE := $(LINK_INLINE) -INLINE:list=ON
endif

ifeq ($(DEBUG_VERSION), 0)
	LINK_OPTIMIZE    = -O2 -OPT:Olimit=8192 $(LINK_INLINE)
	AR_FLAGS         = -O2 -OPT:Olimit=8192 $(LINK_INLINE) 
	LINK_DEBUG       = 
else
	LINK_OPTIMIZE    =
	LINK_DEBUG       = -g 
endif


LD_FLAGS += -$(ABI) -$(ISA) $(LINK_OPTIMIZE) $(LINK_DEBUG)

LD_FLAGS_EXT      = -$(ABI) -$(ISA) -LANG:std
LD_FLAGS_EXT_OPT := -O2 -OPT:Olimit=8192 $(LINK_INLINE)
LD_FLAGS_EXT_DBG := -g 
