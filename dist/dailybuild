#!/bin/sh
# you need a shell that understands (( ... ))
# On irix sh==ksh, for Linux/Cygwin use bash
# reason: windows takes ages to create processes, and we need a=$a+1 a lot

# 
# script to automatically check out and build the whole OpenSG system 
# including tests and run them
#
# you need cvs in your path and doxygen/dot to make the docs
# search for LOCAL to see where it needs to be adapted to your local environment

# utility functions

cleanup ()
{
    write_html_tail $out_html.Main.html

    # compress the HTML files, as they tend to get pretty big
    gzip -9f $out_html*.html
    
    # LOCAL: copy the HTML logs to the destination location
    eval $do_copy 
    
    rm -f $log_configure $log_make $log_errors
}

errorexit () 
{
    subsys=$1
    errfile=$2

    echo "<br><br>Errors found, dailybuild aborted!" >> $out_html.Main.html
    
    send_mail $subsys $errfile
    
    cleanup
    exit 1
}

normalexit ()
{
    cleanup
    exit 0
}

usage ()
{
    cat << EOF

Usage:	`basename $scriptname` -h

Options:
    -h	    display this message

EOF
}

write_html_head ()
{
    outfile="$1"

    cat << EOF > $outfile
<html>
<head>
<title>OpenSG dailybuild $now on $host results</title>
</head>
<body>
<h1>OpenSG dailybuild $now on $host results</h1>
<p>
`date +%H:%M`: Start<br><br>
System: $system<br>
Compiler: $compiler <br>
Configuration: --with-compiler=$compiler $stl_args $glut_args $qt_args $tif_args $jpeg_args $png_args<br>
EOF
}

write_html_tail ()
{
    cat << EOF >> $1
<br><br>
`date +%H:%M`: Finish
</body>
</html>
EOF
}

send_mail ()
{
    subsys=$1
    errfile=$2
    cat << EOF > $out_mail
System: $system
Compiler: $compiler
Log: http://www.opensg.org/dailybuild_logs/$link_html.Main.html.gz

Failed in $subsys.

EOF

    if test -s $errfile;
    then
    	cat $errfile >> $out_mail
	echo  >> $out_mail
    fi
    
    # LOCAL: choose your email adresses here
    $mail -s "OpenSG dailybuild on $host failed" opensg-dailybuilds@lists.sf.net < $out_mail
    ##$mail -s "OpenSG dailybuild on $host failed" reiners@igd.fhg.de < $out_mail
}

write_html_log ()
{
    file="$1"
    title=$2
    log=$3
    errfile=$4
    warnfile=$5
 
    cat << EOF > $file
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>OpenSG dailybuild $now $title on $host results</title>
<style type="text/css">
<!--
body	    	{ background-color:#ffffff }
td.line		{ text-align:right; vertical-align:top }
td.log		{ font-family:monospace; vertical-align:top }
tr.normal	{ }
tr.error	{ background-color:#ff2020; color:#ffffff }
tr.warning	{ background-color:#ff6600 }
//-->
</style>
</head>
<body>
<h1>OpenSG dailybuild $now $title on $host results</h1>
<p>
<a href=http://www.opensg.org/dailybuild_logs/$link_html.Main.html.gz>
Back to main log</a>
</p><p>
System: $system<br>
Compiler: $compiler<br>
</p>
EOF

    # loop through the file, counting lines, highlight error & warning lines

    if test -s $errfile ;
    then
 	ind=1

    	echo "<h4>Errors:</h4>" >> $file

    	echo "<table border=0>" >> $file
	
	IFS='@'	
	cat $errfile | sed -e 's|:|@|' -e 's|\\|\&#92|g' | sort -n | \
        while read line err ;
     	do
	    echo -n '<tr class="normal"><td class="line">' >> $file
	    echo -n "<a href=#$line>$line</a></td>" >> $file
	    echo    '<td class="log">'$err'</td></tr>' >> $file
	    
	    elist[$ind]=$line
	    (( ind=$ind + 1 ))   
	done
	elist[$ind]=0

	IFS=''
	
    	echo "</table>" >> $file
    else
    	elist[1]=0
    fi

    if test -s $warnfile ;
    then
 	ind=1

    	echo "<h4>Warnings:</h4>" >> $file

    	echo "<table border=0>" >> $file

	IFS='@'	
	cat $warnfile | sed -e 's|:|@|' -e 's|\\|\&#92|g' | sort -n | \
        while read line err ;
     	do
	    echo -n '<tr class="normal"><td class="line">' >> $file
	    echo -n "<a href=#$line>$line</a></td>" >> $file
	    echo    '<td class="log">'$err'</td></tr>' >> $file
	    
	    #echo A $ind $line
	    wlist[$ind]=$line
	    #echo B $ind $line ${wlist[$ind]}
	    (( ind=$ind + 1 ))
	    #echo C $ind ${wlist[0]} ${wlist[1]} ${wlist[2]} ${wlist[3]}
	done
	IFS=''
	
	#echo D $ind ${wlist[0]} ${wlist[1]} ${wlist[2]} ${wlist[3]}
	wlist[$ind]=0
	
	#echo E $ind ${wlist[0]} ${wlist[1]} ${wlist[2]} ${wlist[3]}

    	echo "</table>" >> $file
    else
    	wlist[1]=0
    fi
    ln=1
    acterr=1
    acterrline=${elist[$acterr]}
    actwarn=1
    actwarnline=${wlist[$actwarn]}
    #echo F $title $actwarn $actwarnline ${#wlist} @${wlist}@

    echo "<h4>Log:</h4>" >> $file

    echo "<table border=0>" >> $file
    
    # convert spaces to nbsp to prevent read from killing them
    cat $log | sed -e 's| |\&nbsp;|g' | while read -r line
    do
     	#echo G $ln $acterr $acterrline $actwarn $actwarnline	
	if test $ln -eq $acterrline ; 
	then
	    echo -n '<tr class="error">' >> $file
	    (( acterr=$acterr + 1 ))
	    acterrline=${elist[$acterr]}
	    if test $ln -eq $actwarnline ;
	    then
	    	(( actwarn=$actwarn + 1 ))
	    	actwarnline=${elist[$actwarn]}
	    fi
	elif test $ln -eq $actwarnline ; 
	then
	    echo -n '<tr class="warning">' >> $file
	    (( actwarn=$actwarn + 1 ))
	    actwarnline=${wlist[$actwarn]}
    	else
	    echo -n '<tr class="normal">' >> $file
	fi
 	echo -n '<td class="line">'  >> $file
	echo $ln '</td> <td class="log"><a name='$ln'>' >> $file
	echo $line | sed -e 's|\&nbsp;| |g' -e 's|&|&amp;|g' -e 's|<|\&lt;|g' \
	    >> $file
	echo '</a></td></tr>' >> $file
   	
	(( ln=$ln + 1 ))
    done	
 
    cat << EOF >> $file
</table>
</body>
</html>
EOF
}


checkerror ()
{
    title="$1"
    file="$2"
    do_exit="$3"
    
    retval=0
    
    # remove the expected errors
    $grep -n -i -w error $file| \
    $grep -v \
    	-e "warning: nm returned a nonzero error status" \
    	-e "GetLastError" \
	> $log_errors || true
    $grep -n -i -w failed $file | \
    $grep -v \
    	-e "WIN32Window::init: failed" \
    	-e "WIN32Window::activate: failed" \
	>> $log_errors || true
    
    # remove the expected warnings
    $grep -n -i -w warning $file | \
    $grep -v \
    	-e "not used for resolving any symbol" \
 	> $log_warnings || true

    # write the log file
    write_html_log $out_html.$title.html $title $file $log_errors $log_warnings

    # check error file (empty -> ignore)
    if test \! -s $log_errors 
    then
	rm -f $log_errors
	echo "`date +%H:%M`: <a href=$link_html.$title.html.gz>$title</a> finished sucessfully.<br>" >> $out_html.Main.html
    else
 	echo "`date +%H:%M`: <br><font color=#b00000><a href=$link_html.$title.html.gz>$title</a> had errors!</font><br>" >> $out_html.Main.html

	IFS=':'
	cat $log_errors | while read line err
	do
	    echo "<a href=$link_html.$title.html.gz#$line>$line</a> : $err<br>" >> $out_html.Main.html
	done
	IFS=''

        if test x$do_exit != xno
        then
	    errorexit $title $log_errors
        else
            false
            return
        fi
    fi
    
    true
}

# Main script starts here

# setup: error handling etc.

##set -e
##trap errorexit  ERR HUP INT QUIT
##trap normalexit EXIT

tmpdir=/tmp
basedir=`pwd`

extra_args=""
par_jobs=1
config_shell=sh
mail=echo
do_copy='cp $out_html* $log_destination'
grep=grep

loginfo=""
make=make

scriptname=$0

while test $# -gt 0 
do
	case $1 in
                --compiler)
	                compiler=$2
	                shift
	                shift
	                ;;
                --extra-args)
                        extra_args="$extra_args $2"
                        shift
                        shift
                        ;;
                --with-qt)
                        qt_args="--with-qt=$2"
                        shift
                        shift
                        ;;
                --with-glut)
                        glut_args="--with-glut=$2"
                        shift
                        shift
                        ;;
                --with-tif)
                        tif_args="--with-tif=$2"
                        shift
                        shift
                        ;;
                --with-jpg)
                        jpg_args="--with-jpg=$2"
                        shift
                        shift
                        ;;
                --with-png)
                        png_args="--with-png=$2"
                        shift
                        shift
                        ;;
                --par_jobs)
                        par_jobs=$2
                        shift
                        shift
                        ;;
		*)	break 2
			;;
	esac
done

# LOCAL change to your local directory
log_destination=/igd/a4/www/opensg/dailybuild_logs/

log_cvs=$tmpdir/opensg.cvs
log_configure=$tmpdir/opensg.configure
log_make=$tmpdir/opensg.make
log_test=$tmpdir/opensg.test
log_errors=$tmpdir/opensg.errors
log_warnings=$tmpdir/opensg.warnings
log_install=$tmpdir/opensg.install
log_doc=$tmpdir/opensg.doc
out_mail=$tmpdir/opensg.mail
doc_flag=$tmpdir/opensg.doc_done

system="Not set yet"
host=`hostname`

# Check out the sources

# little trick to get around the password input
# not nice but works. Anyone got a better solutions?

cvs_ok=`fgrep -l anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg $HOME/.cvspass`
if test x$cvs_ok = x
then
    echo ":pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg A" >> $HOME/.cvspass
fi

#cleanup what's left
rm -rf OpenSG

# cvs needs to be in the path!
cvs -z9 -d:pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg co -P OpenSG > $log_cvs 2>&1

# find the right parameters for this system

cd OpenSG
system=`CommonConf/config.guess`

# LOCAL: set the system specific params. 
# PATH needs to include doxygen and dot for doc to work

case $system in

    mips-sgi-irix6* )	
    	
	qt_args=${qt_args:="--with-qt=/igd/a4/software/IRIX/packages/qt-3.0"}
	glut_args=${glut_args:="--with-glut=/igd/a4/software/IRIX/packages/glut-3.7"}
	tif_args=${tif_args:="--with-tif=/igd/a4/software/IRIX/"}
	jpeg_args=${jpeg_args:="--with-jpeg=/igd/a4/software/IRIX/"}
 	png_args=${png_args:="--with-png=/igd/a4/software/IRIX/"}
   	par_jobs=${par_jobs:=6}
	compiler=${compiler:=CC}
        do_copy='cp $out_html* $basedir/opensg_dailybuild.$today.source.tgz $log_destination'
	mail=/usr/sbin/Mail
        make=/sgi/bin/gmake
	export PATH=/igd/a4/software/IRIX/bin/:$PATH
        loginfo="OS: `/bin/uname -aR` <br>"
        loginfo="$loginfo Compiler Version: `CC -version 2>&1` <br>"
	;;

    hppa2.0w-hp* )	
        	
	qt_args=""
	glut_args=${glut_args:="--with-glut --with-glutincludedir=/opt/graphics/OpenGL/contrib/libglut --with-glutlibdir=/opt/graphics/OpenGL/contrib/libglut"}
	tif_args=${tif_args:="--with-tif=/igd/a4/software/HP-UX/"}
	jpeg_args=${jpeg_args:="--with-jpeg=/igd/a4/software/HP-UX/"}
 	png_args=${png_args:="--with-png=/igd/a4/software/HP-UX/"}
   	par_jobs=${par_jobs:=2}
	compiler=${compiler:=aCC}
	mail=/usr/bin/mailx
        # Need a decent grep here
        grep=/igd/a4/software/HP-UX/bin/grep
	export PATH=/igd/a4/software/HP-UX/bin/:$PATH
        loginfo="OS: `/bin/uname -a` <br>"
        loginfo="$loginfo Compiler Version: `aCC --version 2>&1` <br>"
        # Move HP-toxic stuff out of the way
        Common/prep_hp
	;;
	
    *-pc-linux-gnu )	
    	
	qt_args=${qt_args:="--with-qt=/igd/a4/software/Linux/packages/qt-3.0"}
    	glut_args=${glut_args:="--with-glut"}
	tif_args=${tif_args:="--with-tif"}
	jpeg_args=${jpeg_args:="--with-jpeg"}
 	png_args=${png_args:="--with-png"}
    	par_jobs=${par_jobs:=2}
	compiler=${compiler:=g++}
	config_shell=bash
	mail=/usr/bin/Mail
	export PATH=/igd/a4/software/Linux/bin/:$PATH
        loginfo="OS: `uname -a` <br>"
        loginfo="$loginfo    `cat /proc/version` <br>"
        loginfo="$loginfo Compiler Version: `$compiler -v 2>&1` <br>"
	;;

    *-pc-cygwin )	
    	
    	glut_args=${glut_args:="--with-glut=`pwd`/../packages/glut_3.7"}
	tif_args=${tif_args:="--with-tif=`pwd`/../packages/tiff-3.5.4"}
    	par_jobs=${par_jobs:=2}
	compiler=${compiler:=icl50}
	config_shell=bash
	mail=`pwd`/../do_send_mail
	# LOCAL: for the cygwins that don't have full NFS access
	# note: rcp is a Windows command and thus can't handle /cygdrive pathes
        # and it can't handle <drive>:<file> pathes either, mistaking them for hosts :(
	do_copy='cd $basedir ; rcp -b $link_html* tizian:$log_destination'
	export PATH=$PATH
        loginfo="OS: `uname -a` <br>"
	;;

    *-apple-darwin* )	
    	
    	glut_args="--with-glut"
    	par_jobs=${par_jobs:=1}
	compiler=${compiler:=cc}
	config_shell=sh
	mail=/usr/bin/Mail
	# LOCAL: for the cygwins that don't have full NFS access
        do_copy='rcp $out_html* tizian:$log_destination'
	export PATH=$PATH
        loginfo="OS: `uname -a` <br>"
        # get rid of version number
        system=`echo $system | sed -e 's/darwin[0-9].[0-9]/darwin/'`
	;;
	
   *)
   
    	echo "Unknown system $system!"
	errorexit System /dev/null
	;;
	
esac

# set defaults if not set yet
qt_args=${qt_args:=""}
glut_args=${glut_args:=""}
tif_args=${tif_args:=""}
jpeg_args=${jpeg_args:=""}
png_args=${png_args:=""}


# Start output
# do it here so that $compiler and $system are set

now=`date '+%d.%m.%y %H:%M'`
today=`date '+%y%m%d'`

build_id=$today.$system.$compiler
link_html=opensg_dailybuild.$build_id
out_html=$basedir/$link_html

rm -f $out_html.Main.html
write_html_head $out_html.Main.html 
echo $loginfo >> $out_html.Main.html 
echo '<p>' >> $out_html.Main.html 

checkerror "Cvs" $log_cvs

# create the source snapshot
# Only on Irix, one is enough

case $system in

    mips-sgi-irix6* )	
                        cd ..
                        tar cf - OpenSG | \
                            gzip -9f > $basedir/opensg_dailybuild.$today.source.tgz
                        cd OpenSG
                        ;;
esac

# configure it

## autoconf    removed for now, version problems
$config_shell ./configure --prefix=BUILD --with-compiler=$compiler $stl_args \
    $glut_args $qt_args $tif_args $jpeg_args $png_args $extra_args 1>$log_configure 2>&1
checkerror "Configure" $log_configure

# start making the doc
# takes forever, do it in parallel

if type doxygen > /dev/null 2>&1
then
	has_doxygen=1
	( rm -f $doc_flag ; $make doc 1>$log_doc 2>&1 ; touch $doc_flag ) &
else
	has_doxygen=0
fi

# make the libs

cd Builds/$system-$compiler
export OSGSUBPARJOBS=$par_jobs

$make dbg 1>$log_make 2>&1
checkerror "DebugLibs" $log_make

$make opt 1>$log_make 2>&1
checkerror "OptLibs" $log_make

# locally install the libs

$make install > $log_install 2>&1
export LD_LIBRARY_PATH=`pwd`/lib/dbg:$LD_LIBRARY_PATH

checkerror "Install" $log_install

# create the snapshot
tar cf - lib include | gzip -9f > $out_html.snapshot.tgz


# make and run the tests that have gold test results
errcount=0

for i in *Test;
do
    cd $i
    # keep going after errors to catch them all
    $make -j$par_jobs -k dbg 1>$log_test.$i 2>&1
    $make -j$par_jobs -k opt 1>>$log_test.$i 2>&1
    checkerror $i $log_test.$i no
    (( errcount = $errcount + $? ))
    echo "Running ${i}s:<br>" >> $out_html.Main.html
    # do we have testfiles?
    if test `\ls -1 test* 2>/dev/null | wc -l` -ne 0 ;
    then
	for j in test*;
	do
    	    # find the gold file
 	    echo -n "$j... " >> $out_html.Main.html
   	    tloc=`find ../../.. -name $j.cpp | sed -e 's|[^/]*$||'`goldtests/$j.log
 	    if test "$tloc" != "goldtests/$j.log" -a -r $tloc
	    then
		$j > $log_test 2>&1
		if test "`diff -q $log_test $tloc`" != "" ;
		then
	    	    echo " results differ:<br>" >> $out_html.Main.html
	    	    echo -n "<pre>" >> $out_html.Main.html
		    diff $log_test $tloc >> $out_html.Main.html
	    	    echo "</pre>" >> $out_html.Main.html
		else
	    	    echo " ok.<br>" >> $out_html.Main.html
		fi
	    else
	    	echo " no gold test.<br>" >> $out_html.Main.html    
	    fi 
	done
    fi
    cd ..
    
done

if expr $has_doxygen > /dev/null 2>&1 = 1 ;
then
     
    # wait for the doc to finish
    while ! test -r $doc_flag ; do sleep 30; done

    # check the doc
    checkerror "Doc" $log_doc
fi

if test $errcount -gt 0
then
    errorexit Tests NOFILE
fi

# all done

echo "<br>All done, all right. Have a nice day." >>  $out_html.Main.html

cleanup
