#!/bin/ksh

# 
# script to create a binary distribution, Unix style
#
# This is an extremely optimistic script, it does no 
# error checking whatever. Use with care!

if test ${#*} -lt 1
then
    OSGPOOL=`pwd`/OpenSG
else
    OSGPOOL=$1
    shift
fi

echo "Making binary dist in" $OSGPOOL

build_make=gmake

if ! test x$OSG_DIST_FORCE_FULL_REBUILD = x
then
    unset OSG_DIST_NO_DISTASSEMBLY
    unset OSG_DIST_NO_EXAMPLEBUILD
    unset OSG_DIST_NO_REBUILD
    unset OSG_DIST_NO_RECONFIGURE
    unset OSG_DIST_NO_REINSTALL
    unset OSG_DIST_NO_TUTORIALBUILD

    OSG_DIST_REMOVE_BUILDDIR=1

    echo "Full rebuild forced\n";
fi

# does the OSGPOOL exist? If not, check it out.

if test ! -d $OSGPOOL
then
    # Check out the sources
    
    # little trick to get around the password input
    # not nice but works. Anyone got a better solution?
    
    cvs_ok=`fgrep -l anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg $HOME/.cvspass`
    if test "x$cvs_ok" = x
    then
        echo ":pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg A" >> $HOME/.cvspass
    fi
    
    # go where it's suppoosed to be
    cd `dirname $OSGPOOL`
    
    # cvs needs to be in the path!
    cvs -d:pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg co -P OpenSG 

    if test `basename $OSGPOOL` != OpenSG
    then
        mv OpenSG `basename $OSGPOOL`
    fi
fi

# get the OSGVERSION

OSGVERSION=`cat $OSGPOOL/VERSION | sed -e "/\n/d"`

# make the libs

olddir=`pwd`
cd $OSGPOOL

system=`CommonConf/config.guess`

# find the configure options for the dist

case $system in

    mips-sgi-* )    
    
    glut_dir="/igd/a4/software/IRIX"
    glut_lib="libglut.a"
    glut_args="--with-glut=$glut_dir"
    qt_dir="/igd/a4/software/IRIX/packages/qt-3.0"
    qt_lib=libqt.so
    qt_args="--with-qt=$qt_dir"
    tif_args="--with-tif"
    jpeg_args="--with-jpeg"
    png_args=""
    par_jobs=6
    compiler=${compiler:=CC}
    export PATH=/igd/a4/software/IRIX/bin/:$PATH
    distname=sgi
    ;;
    
    *-pc-linux-gnu )    
        
    glut_dir="/usr"
    glut_lib="libglut.so.3"
    glut_args="--with-glut=$glut_dir"
    qt_dir="/usr/lib/qt3"
    qt_lib=libqt.so
    qt_args="--with-qt=$qt_dir"
    tif_args="--with-tif"
    jpeg_args="--with-jpeg"
    png_args="--with-png"
    par_jobs=4
    compiler=${compiler:=g++}
    config_shell=bash
    mail=/usr/bin/Mail
    export PATH=/igd/a4/software/Linux/bin/:$PATH
    if test -r /etc/SuSE-release 
    then
        VERSION=`tail -1 /etc/SuSE-release | sed -e 's/^[^0-9]*//'`
        distname=suse$VERSION
    elif test -r /etc/redhat-release 
    then
        VERSION=`sed -e 's/^[^0-9]*//' -e 's/[^0-9]*$//' < /etc/redhat-release`
        distname=redhat$VERSION
    else
        distname=linux    
    fi
    ;;

    *-pc-cygwin )   

    if test ${#*} -eq 1
    then
        echo "got config"
        config_in=$1
        shift

        echo "Building for windows using config " $config_in

        . $config_in
    else
        glut_dir="`pwd`/../packages/glut_3.7"
        glut_lib="glut32.dll"
        glut_args="--with-glut=$glut_dir"
        qt_dir="`pwd`/../packages/qt-3.0"
        qt_lib=qt-mt300.dll
        qt_args="--with-qt=$qt_dir"
        tif_args=""
        par_jobs=1
        compiler=${compiler:=icl50}
        config_shell=bash
        distname=win
    fi
    ;;


    hppa2.0w-hp* )	
       
        build_make=make
	qt_args="--with-qt=/igd/a4/software/HP-UX"
        qt_dir="/igd/a4/software/HP-UX"
        qt_lib=libqt.3
	glut_args="--with-glut --with-glutincludedir=/opt/graphics/OpenGL/contrib/libglut --with-glutlibdir=/opt/graphics/OpenGL/contrib/libglut"
 	glut_lib=        
        tif_args="--with-tif=/igd/a4/software/HP-UX/"
	jpeg_args="--with-jpeg=/igd/a4/software/HP-UX/"
 	png_args=""
   	par_jobs=${par_jobs:=4}
	compiler=${compiler:=aCC}
        distname=hpux
	export PATH=/igd/a4/software/HP-UX/bin/:$PATH
        # Move HP-toxic stuff out of the way
        Common/prep_hp
	;;
    
   *)
    
    echo "Unknown system $system!"
    exit 1
    ;;
    
esac

echo "System" $system
echo "Dist" $distname


# configure it

if ! test x$OSG_DIST_REMOVE_BUILDDIR = x
then
    echo "OSG_DIST_REMOVE_BUILDDIR set, remove build dir " Builds/$system-$compiler$suffix
    rm -rf Builds/$system-$compiler$suffix
fi

if test x$OSG_DIST_NO_RECONFIGURE = x
then
    $config_shell ./configure --prefix=BUILD --with-compiler=$compiler        \
       $stl_args $glut_args $qt_args $tif_args $jpeg_args $png_args $gif_args \
       $freetype_args $add_inc_dirs $add_lib_dirs $platform_args $config_args \
       $compiler_args
else
    echo "OSG_DIST_NO_RECONFIGURE   set, skipping configure"
fi

# Build the libs

cd Builds/$system-$compiler$suffix

export OSGSUBPARJOBS=$par_jobs

if test x$OSG_DIST_NO_REBUILD = x
then
    $build_make opt 
    $build_make dbg 
else
    echo "OSG_DIST_NO_REBUILD       set, skipping build"
fi

if test x$OSG_DIST_NO_REINSTALL = x
then
    $build_make install
else
    echo "OSG_DIST_NO_REINSTALL     set, skipping install"
fi

case $system in
    # Windows is very different from the Unices. No, really. :)
    *-pc-cygwin )           
    ;;
    *)
        if test x$OSG_DIST_NO_EXAMPLEBUILD = x
        then

            # make the sceneviewer

            cd ../../Examples/SceneViewer

            $build_make QTDIR=$qt_dir OSGROOT=../../Builds/$system-$compiler$suffix

            cd $olddir
        else
            echo "OSG_DIST_NO_EXAMPLEBUILD  set, skipping example build"
        fi
    ;;
esac

# create the distribution(s)

case $system in
    # Windows is very different from the Unices. No, really. :)
    *-pc-cygwin )           

    cd $olddir

    if test x$OSG_DIST_NO_DISTASSEMBLY = x
    then
    
        rm -rf OpenSG-$OSGVERSION-$distname-$compiler$suffix
        mkdir OpenSG-$OSGVERSION-$distname-$compiler$suffix
        cd OpenSG-$OSGVERSION-$distname-$compiler$suffix

        # support libs
    
        mkdir tmp
        cd tmp
        unzip $OSGPOOL/dist/win/supportlibs.zip > /dev/null

        mv include ..
        mv stlport ../include
        mv sources/*.txt ../include
        mv README.txt ../README_SupportLibs.txt

        mv lib ..

        cd ..
        rm -rf tmp

        # copy windows defaults
        # copies GLUT lib automatically

        cp -r $OSGPOOL/dist/win/dist/* .
        cp    $OSGPOOL/dist/win/README.bindist README.txt

        # copy the QT lib, as Qt 3.0 is not everywhere yet

        if test x$qt_lib != x
        then
            cp ${qt_dir}/lib/${qt_lib} lib
        fi
        
        # copy OpenSG stuff
        cp -r $OSGPOOL/Builds/$system-$compiler$suffix/include/OpenSG ./include
        cp -r $OSGPOOL/Builds/$system-$compiler$suffix/lib/opt/* lib
        cp -r $OSGPOOL/Builds/$system-$compiler$suffix/lib/dbg/* lib
    
#  doesn't work. Libname is written in lib :(
#    for i in $OSGPOOL/Builds/$system-$compiler$suffix/lib/dbg/*.dll ;
#    do
#        l=`basename $i .dll`
#        d=`dirname $i`
#        cp $i lib/${l}-dbg.dll
#        cp $d/$l.lib lib/${l}-dbg.lib 
#    done
    
    else
        echo "OSG_DIST_NO_DISTASSEMBLY  set, skipping assembly"

        cd OpenSG-$OSGVERSION-$distname-$compiler$suffix
    fi

    if test x$OSG_DIST_NO_EXAMPLEBUILD = x
    then

        # make the sceneviewer

        mkdir Examples

        cp -r $OSGPOOL/Examples/SceneViewer Examples

        cd Examples/SceneViewer

#LIBTYPE=opt
        $build_make  QTDIR=$qt_dir OSGROOT=$OSGPOOL/Builds/$system-$compiler$suffix

        cd ../..
 
        # copy the SceneViewer
        cp Examples/SceneViewer/osgSceneViewer.exe .
 
        rm -rf Examples

    else
        echo "OSG_DIST_NO_EXAMPLEBUILD  set, skipping example build"

        # copy the SceneViewer
        
        if test -r Examples/SceneViewer/osgSceneViewer.exe
        then
            cp Examples/SceneViewer/osgSceneViewer.exe .
        fi
    fi
 
    if test x$OSG_DIST_NO_TUTORIALBUILD = x
    then
        # do the tutorials

        if test -w Tutorials
        then
            rm -rf Tutorials
        fi

        cp -r $OSGPOOL/Tutorials .

        cd Tutorials

#LIBTYPE=opt
        $build_make OSGPOOL=$OSGPOOL OSGROOT=$OSGPOOL/Builds/$system-$compiler$suffix -f Makefile
    else
        echo "OSG_DIST_NO_TUTORIALBUILD set, skipping tutorial build"
    fi

    $build_make COMP=$compiler$suffix -f Makefile.win dsw

    # cleanup the garbage
    rm -rf CVS Makefile* common.* template.* Tutorials.dsp.raw README BUILD \
           vc60.idb vc70.idb *.obj *.pdb *.ilk
    
    cp $OSGPOOL/dist/win/BUILD.tutorials BUILD.txt
    cp $OSGPOOL/dist/win/README.tutorials README.txt
    
    exit
    ;;
esac

# from here on it's Unix

echo "Making Opt dist"

# make the opt OSGVERSION

echo "dir..."
rm -rf OpenSG-$OSGVERSION-$distname-opt
mkdir OpenSG-$OSGVERSION-$distname-opt

cd OpenSG-$OSGVERSION-$distname-opt
cp $OSGPOOL/dist/README.bindist README

# copy the libs/includes

cp -r $OSGPOOL/Builds/$system-$compiler/include .
cp -r $OSGPOOL/Builds/$system-$compiler/bin .

mkdir lib
cp -r $OSGPOOL/Builds/$system-$compiler/lib/opt lib

# copy the QT lib, as Qt 3.0 is not everywhere yet
if test x$qt_lib != x
then
    cp ${qt_dir}/lib/${qt_lib} lib/opt
fi

# copy the GLUT lib, as it is not everywhere yet
if test x$glut_lib != x
then
    cp ${glut_dir}/lib/${glut_lib} lib/opt
fi

# make the tutorial examples

echo "tuts..."
cp -r $OSGPOOL/Tutorials .

cd Tutorials
rm -rf CVS
sed -e 's|##DBG##|opt|g' < Makefile.dist > Makefile
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/README.tutorials > README
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/BUILD.tutorials > BUILD
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/run_osgSceneViewer > ../run_osgSceneViewer
chmod 755 ../run_osgSceneViewer

#remove the stuff we don't need here
rm -f Makefile.dist Makefile.win template.*  Tutorials.dsp.raw common.cygwin .prefix.*

$build_make
$build_make clean

cd ..

# copy the SceneViewer
cp $OSGPOOL/Examples/SceneViewer/osgSceneViewer .

# do system-specific stuff

case $system in
    mips-sgi-* )
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

# and pack it up

echo "pack..."
cd ..

tar cf - OpenSG-$OSGVERSION-$distname-opt | \
            gzip -9 > OpenSG-$OSGVERSION-$distname-opt.tgz

# now add the debug libs...

echo "Making Opt+Dbg dist"

echo "dir..."
mv OpenSG-$OSGVERSION-$distname-opt OpenSG-$OSGVERSION-$distname-opt+dbg

cd OpenSG-$OSGVERSION-$distname-opt+dbg

cp -r ${OSGPOOL}/Builds/$system-$compiler/lib/dbg lib
#needed by SceneViewer, and not everywhere yet
if test x$qt_lib != x
then
    ln -s ../opt/${qt_lib} lib/dbg
fi

# copy the GLUT lib, as it is not everywhere yet
ln -s ../opt/${glut_lib} lib/dbg

# do system-specific stuff

case $system in
    mips-sgi-* )              
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

echo "pack..."
cd ..

tar cf - OpenSG-$OSGVERSION-${distname}-opt+dbg | \
            gzip -9 > OpenSG-$OSGVERSION-${distname}-opt+dbg.tgz


# ... get rid of the opt libs ...

echo "Making Dbg dist"
echo "dir..."

mv OpenSG-$OSGVERSION-$distname-opt+dbg OpenSG-$OSGVERSION-$distname-dbg

cd OpenSG-$OSGVERSION-$distname-dbg
#needed by SceneViewer, and not everywhere yet
if test x$qt_lib != x
then
    rm -rf lib/dbg/${qt_lib}
    cp ${qt_dir}/lib/${qt_lib} lib/dbg
fi
if test x$glut_lib != x
then
    rm -rf lib/dbg/${glut_lib}
    cp ${glut_dir}/lib/${glut_lib} lib/dbg
fi
rm -rf lib/opt

# Build the dbg-tutorials again

echo "tuts..."

cd Tutorials
$build_make Clean

sed -e 's|##DBG##|dbg|g' < $OSGPOOL/Tutorials/Makefile.dist > Makefile
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/README.tutorials > README
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/BUILD.tutorials > BUILD
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/run_osgSceneViewer > ../run_osgSceneViewer
chmod 755 ../run_osgSceneViewer

$build_make
$build_make clean

cd ..

# do system-specific stuff

case $system in
    mips-sgi-* )              
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

echo "pack..."
cd ..

tar cf - OpenSG-$OSGVERSION-${distname}-dbg | \
            gzip -9 > OpenSG-$OSGVERSION-${distname}-dbg.tgz

# that's it!
echo "All done. Enjoy!"



