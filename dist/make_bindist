#!/bin/ksh

# 
# script to create a binary distribution, Unix style
#
# This is an extremely optimistic script, it does no 
# error checking whatever. Use with care!

if test ${#*} -lt 1
then
    OSGPOOL=`pwd`/OpenSG
else
    OSGPOOL=$1
    shift
fi

echo "Making binary dist in" $OSGPOOL

build_make=gmake

# does the OSGPOOL exist? If not, check it out.

if ! test -d $OSGPOOL
then
    # Check out the sources
    
    # little trick to get around the password input
    # not nice but works. Anyone got a better solution?
    
    cvs_ok=`fgrep -l anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg $HOME/.cvspass`
    if test "x$cvs_ok" = x
    then
        echo ":pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg A" >> $HOME/.cvspass
    fi
    
    # go where it's suppoosed to be
    cd `dirname $OSGPOOL`
    
    # cvs needs to be in the path!
    cvs -d:pserver:anonymous@cvs.opensg.sourceforge.net:/cvsroot/opensg co -P OpenSG 

    if test `basename $OSGPOOL` != OpenSG
    then
        mv OpenSG `basename $OSGPOOL`
    fi
fi

# get the version

VERSION=`cat $OSGPOOL/VERSION | sed -e "/\n/d"`

# make the libs

olddir=`pwd`
cd $OSGPOOL

system=`CommonConf/config.guess`

# find the configure options for the dist

case $system in

    mips-sgi-* )    
    
    glut_dir="/igd/a4/software/IRIX"
    glut_lib="libglut.a"
    glut_args="--with-glut=$glut_dir"
    qt_dir="/igd/a4/software/IRIX/packages/qt-3.0"
    qt_lib=libqt.so.3.0.0
    qt_args="--with-qt=$qt_dir"
    tif_args="--with-tif"
    jpeg_args="--with-jpeg"
    png_args=""
    par_jobs=6
    compiler=${compiler:=CC}
    export PATH=/igd/a4/software/IRIX/bin/:$PATH
    distname=sgi
    ;;
    
    *-pc-linux-gnu )    
        
    glut_dir="/usr"
    glut_lib="libglut.so.3"
    glut_args="--with-glut=$glut_dir"
    qt_dir="/igd/a4/software/Linux/packages/qt-3.0"
    qt_lib=libqt.so.3.0.0
    qt_args="--with-qt=$qt_dir"
    tif_args="--with-tif"
    jpeg_args="--with-jpeg"
    png_args="--with-png"
    par_jobs=2
    compiler=${compiler:=g++}
    config_shell=bash
    mail=/usr/bin/Mail
    export PATH=/igd/a4/software/Linux/bin/:$PATH
    if test -d /etc/SuSEconfig 
    then
        distname=suse
    else
        distname=redhat    
    fi
    ;;

    *-pc-cygwin )   

    if test ${#*} -eq 1
    then
        echo "got config"
        config_in=$1
        shift

        echo "Building for windows using config " $config_in

        . $config_in
    else
        glut_dir="`pwd`/../packages/glut_3.7"
        glut_lib="glut32.dll"
        glut_args="--with-glut=$glut_dir"
        qt_dir="`pwd`/../packages/qt-3.0"
        qt_lib=qt-mt300.dll
        qt_args="--with-qt=$qt_dir"
        tif_args=""
        par_jobs=1
        compiler=${compiler:=icl50}
        config_shell=bash
        distname=win
    fi
    ;;
    
   *)
    
    echo "Unknown system $system!"
    exit 1
    ;;
    
esac

#echo "System" $system
#echo "Dist" $distname


# configure it

##rm -rf Builds/$system-$compiler


if test -z $OSG_DIST_NO_RECONFIGURE
then
    $config_shell ./configure --prefix=BUILD --with-compiler=$compiler        \
       $stl_args $glut_args $qt_args $tif_args $jpeg_args $png_args $gif_args \
       $freetype_args $add_inc_dirs $add_lib_dirs $platform_args $config_args \
       $compiler_args
else
    echo "OSG_DIST_NO_RECONFIGURE  set, skipping configure"
fi

# Build the libs

cd Builds/$system-$compiler
export OSGSUBPARJOBS=$par_jobs

if test -z $OSG_DIST_NO_REBUILD
then
    $build_make opt 
    $build_make dbg 
else
    echo "OSG_DIST_NO_REBUILD      set, skipping build"
fi

if test -z $OSG_DIST_NO_REINSTALL
then
    $build_make install
else
    echo "OSG_DIST_NO_REINSTALL    set, skipping install"
fi

if test -z $OSG_DIST_NO_EXAMPLEBUILD
then

    # make the sceneviewer

    cd ../../examples/SceneViewer

    $build_make QTDIR=$qt_dir OSGROOT=../../Builds/$system-$compiler

    cd $olddir
else
    echo "OSG_DIST_NO_EXAMPLEBUILD set, skipping example build"
fi

# create the distribution(s)

case $system in
    # Windows is very different from the Unices. No, really. :)
    *-pc-cygwin )           

    cd $olddir

    if test -z $OSG_DIST_NO_DISTASSEMBLY
    then
    
        rm -rf OpenSG-$VERSION-$distname-$compiler
        mkdir OpenSG-$VERSION-$distname-$compiler
        cd OpenSG-$VERSION-$distname-$compiler

        # support libs
    
        mkdir tmp
        cd tmp
        unzip $OSGPOOL/dist/win/supportlibs.zip > /dev/null

        mv include ..
        mv stlport ../include
        mv sources/*.txt ../include
        mv README.txt ../README_SupportLibs.txt

        mv lib ..

        cd ..
        rm -rf tmp

        # copy windows defaults
        # copies GLUT lib automatically

        cp -r $OSGPOOL/dist/win/dist/* .
        cp    $OSGPOOL/dist/win/README.bindist README.txt

        # copy the QT lib, as Qt 3.0 is not everywhere yet
        cp ${qt_dir}/lib/${qt_lib} lib
 
        # copy the SceneViewer
        cp $OSGPOOL/examples/SceneViewer/osgSceneViewer.exe .
   
        # copy OpenSG stuff
        cp -r $OSGPOOL/Builds/$system-$compiler/include/OpenSG ./include
        cp -r $OSGPOOL/Builds/$system-$compiler/lib/opt/* lib
        cp -r $OSGPOOL/Builds/$system-$compiler/lib/dbg/* lib
    
#  doesn't work. Libname is written in lib :(
#    for i in $OSGPOOL/Builds/$system-$compiler/lib/dbg/*.dll ;
#    do
#        l=`basename $i .dll`
#        d=`dirname $i`
#        cp $i lib/${l}-dbg.dll
#        cp $d/$l.lib lib/${l}-dbg.lib 
#    done
    
        # do the tutorials
        cp -r $OSGPOOL/Tutorials .
    else
        echo "OSG_DIST_NO_DISTASSEMBLY set, skipping assembly"

        cd OpenSG-$VERSION-$distname-$compiler
    fi

    cd tutorials


    $build_make OSGPOOL=$OSGPOOL -f Makefile

    exit

    gmake -f Makefile.win dsw
    
    # cleanup the garbage
    rm -rf CVS Makefile* common.* template.* Tutorials.dsp.raw README BUILD vc60.idb
    
    cp $OSGPOOL/dist/win/BUILD.tutorials BUILD.txt
    cp $OSGPOOL/dist/win/README.tutorials README.txt
    
    exit
    ;;
esac

# from here on it's Unix

# make the opt version

rm -rf OpenSG-$VERSION-$distname-opt
mkdir OpenSG-$VERSION-$distname-opt

cd OpenSG-$VERSION-$distname-opt
cp $OSGPOOL/dist/README.bindist README

# copy the libs/includes

cp -r $OSGPOOL/Builds/$system-$compiler/include .
cp -r $OSGPOOL/Builds/$system-$compiler/bin .

mkdir lib
cp -r $OSGPOOL/Builds/$system-$compiler/lib/opt lib

# copy the QT lib, as Qt 3.0 is not everywhere yet
cp ${qt_dir}/lib/${qt_lib} lib/opt
ln -s ${qt_lib} lib/opt/libqt.so.3.0
ln -s ${qt_lib} lib/opt/libqt.so.3
ln -s ${qt_lib} lib/opt/libqt.so

# copy the GLUT lib, as it is not everywhere yet
cp ${glut_dir}/lib/${glut_lib} lib/opt

# make the tutorial examples

cp -r $OSGPOOL/tutorials .

cd tutorials
rm -rf CVS
sed -e 's|##DBG##|opt|g' < Makefile.dist > Makefile
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/README.tutorials > README
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/BUILD.tutorials > BUILD
sed -e 's|##DBG##|opt|g' < $OSGPOOL/dist/run_osgSceneViewer > ../run_osgSceneViewer
chmod 755 ../run_osgSceneViewer

#remove the stuff we don't need here
rm Makefile.dist Makefile.win template.*  Tutorials.dsp.raw common.cygwin .prefix.*

gmake
gmake clean

cd ..

# copy the SceneViewer
cp $OSGPOOL/examples/SceneViewer/osgSceneViewer .

# do system-specific stuff

case $system in
    mips-sgi-* )
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

# and pack it up

cd ..

tar cf - OpenSG-$VERSION-$distname-opt | \
            gzip -9 > OpenSG-$VERSION-$distname-opt.tgz

# now add the debug libs...

mv OpenSG-$VERSION-$distname-opt OpenSG-$VERSION-$distname-opt+dbg

cd OpenSG-$VERSION-$distname-opt+dbg

cp -r ${OSGPOOL}/Builds/$system-$compiler/lib/dbg lib
#needed by SceneViewer, and not everywhere yet
ln -s ../opt/${qt_lib} lib/dbg
ln -s ${qt_lib} lib/dbg/libqt.so.3.0
ln -s ${qt_lib} lib/dbg/libqt.so.3
ln -s ${qt_lib} lib/dbg/libqt.so

# copy the GLUT lib, as it is not everywhere yet
ln -s ../opt/${glut_lib} lib/dbg

# do system-specific stuff

case $system in
    mips-sgi-* )              
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

cd ..

tar cf - OpenSG-$VERSION-${distname}-opt+dbg | \
            gzip -9 > OpenSG-$VERSION-${distname}-opt+dbg.tgz


# ... get rid of the opt libs ...

mv OpenSG-$VERSION-$distname-opt+dbg OpenSG-$VERSION-$distname-dbg

cd OpenSG-$VERSION-$distname-dbg
#needed by SceneViewer, and not everywhere yet
rm -rf lib/dbg/${qt_lib}
cp ${qt_dir}/lib/${qt_lib} lib/dbg
rm -rf lib/dbg/${glut_lib}
cp ${glut_dir}/lib/${glut_lib} lib/dbg
rm -rf lib/opt

# Build the dbg-tutorials again

cd tutorials
gmake Clean

sed -e 's|##DBG##|dbg|g' < $OSGPOOL/tutorials/Makefile.dist > Makefile
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/README.tutorials > README
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/BUILD.tutorials > BUILD
sed -e 's|##DBG##|dbg|g' < $OSGPOOL/dist/run_osgSceneViewer > ../run_osgSceneViewer
chmod 755 ../run_osgSceneViewer

gmake
gmake clean

cd ..

# do system-specific stuff

case $system in
    mips-sgi-* )              
    ;;  
    *-pc-linux-gnu )    
    ;;
esac

cd ..

tar cf - OpenSG-$VERSION-${distname}-dbg | \
            gzip -9 > OpenSG-$VERSION-${distname}-dbg.tgz

# that's it!



