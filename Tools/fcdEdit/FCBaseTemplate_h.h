/* This is a template file for fcdEdit.
 * To create it from sample source,  cut'n'paste the source and apply the following
 * substitutions:
 * s|\|\\|g 
 * s|"|\"|g 
 * s|^|"| 
 * s|$|",|
 */

char *FCBaseTemplate_h[]={
"/*---------------------------------------------------------------------------*\\",
" *                                OpenSG                                     *",
" *                                                                           *",
" *                                                                           *",
" *             Copyright (C) 2000,2001 by the OpenSG Forum                   *",
" *                                                                           *",
" *                            www.opensg.org                                 *",
" *                                                                           *",
" *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                License                                    *",
" *                                                                           *",
" * This library is free software; you can redistribute it and/or modify it   *",
" * under the terms of the GNU Library General Public License as published    *",
" * by the Free Software Foundation, version 2.                               *",
" *                                                                           *",
" * This library is distributed in the hope that it will be useful, but       *",
" * WITHOUT ANY WARRANTY; without even the implied warranty of                *",
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *",
" * Library General Public License for more details.                          *",
" *                                                                           *",
" * You should have received a copy of the GNU Library General Public         *",
" * License along with this library; if not, write to the Free Software       *",
" * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                Changes                                    *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"",
"/*****************************************************************************\\",
" *****************************************************************************",
" **                                                                         **",
" **                  This file is automatically generated.                  **",
" **                                                                         **",
" **          Any changes made to this file WILL be lost when it is          **",
" **           regenerated, which can become necessary at any time.          **",
" **                                                                         **",
" **     Do not change this file, changes should be done in the derived      **",
" **     class @!Classname!@",
" **                                                                         **",
" *****************************************************************************",
"\\*****************************************************************************/",
"", 
"",
"#ifndef _OSG@!CLASSNAME!@BASE_H_",
"#define _OSG@!CLASSNAME!@BASE_H_",
"#ifdef __sgi",
"#pragma once",
"#endif",
"",
"//---------------------------------------------------------------------------",
"//  Includes",
"//---------------------------------------------------------------------------",
"",
"#include <@!HeaderPrefix!@OSGConfig.h>",
"",
"#include <@!HeaderPrefix!@OSGBaseTypes.h>",
"#include <@!HeaderPrefix!@OSGFieldDescription.h>",
"#include <@!HeaderPrefix!@OSGFieldContainer.h>",
"#include <OSG@!Libname!@Def.h>",
"#include <@!ParentHeaderPrefix!@OSG@!Parent!@.h>",
"@@BeginFieldLoop@@",
"#include <@!FieldtypeInclude!@>	// @!Fieldname!@ type",
"@@EndFieldLoop@@",
"",
"#include <OSG@!Classname!@Fields.h>",
"", 
"OSG_BEGIN_NAMESPACE",
"",
"//---------------------------------------------------------------------------",
"//  Forward References",
"//---------------------------------------------------------------------------",
"",
"class @!Classname!@;",
"",
"//---------------------------------------------------------------------------",
"//   Types",
"//---------------------------------------------------------------------------",
"",
"//---------------------------------------------------------------------------",
"//  Class",
"//---------------------------------------------------------------------------",
"",
"/*! @!Classname!@ Base Class. */",
"",
"class OSG_@!LIBNAME!@LIB_DLLMAPPING @!Classname!@Base : public @!Parent!@",
"{",
"  private:",
"",
"    typedef @!Parent!@ Inherited;",
"",
"  public:",
"",
"    //-----------------------------------------------------------------------",
"    //   constants                                                           ",
"    //-----------------------------------------------------------------------",
"    ",
"@@FieldIdsAndMasksDecl@@",
"",
"    //-----------------------------------------------------------------------",
"    //   enums                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   types                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   class functions                                                     ",
"    //-----------------------------------------------------------------------",
"",
"    static const char *getClassname(void) { return \"@!Classname!@Base\"; };",
"",
"    //-----------------------------------------------------------------------",
"    //   instance functions                                                  ",
"    //-----------------------------------------------------------------------",
"",
"    /*-------------- general fieldcontainer declaration --------------------*/",
"",
"    virtual       OSG::FieldContainerType &getType  (void); ",
"    virtual const OSG::FieldContainerType &getType  (void) const; ",
"    ",
"    static OSG::FieldContainerType &getClassType    (void); ",
"    static OSG::UInt32              getClassTypeId  (void); ",
"@@if !Abstract",
"    static @!Classname!@Ptr         create          (void); ",
"    static @!Classname!@Ptr         createEmpty     (void); ",
"",
"    virtual OSG::FieldContainerPtr  shallowCopy     (void) const; ",
"@@endif",
"    virtual OSG::UInt32             getContainerSize(void) const;",
"",
"    virtual void                    executeSync(      FieldContainer &other,",
"                                                const BitVector      &whichField);",
"",
"",
"    virtual UInt32       getBinSize (const BitVector    &whichField);",
"    virtual MemoryHandle copyToBin  (      MemoryHandle  pMem,", 
"                                     const BitVector    &whichField);",
"    virtual MemoryHandle copyFromBin(      MemoryHandle  pMem,", 
"                                     const BitVector    &whichField);",
"",
"    /*--------------------------- access fields ----------------------------*/",
"",
"@@if hasPublicFields", 
"    //! Return the fields.",
"",
"@@BeginFieldLoop@@",
"@@if isPublic", 
"    inline @!CARDINALITY!@@!Fieldtype!@	*get@!CARDINALITY!@@!Fieldname!@(void);",
"@@endif", 
"@@EndFieldLoop@@",
"",
"@@endif", 
"    /*----------------------------- access ----------------------------------*/",
"",
"@@if hasPublicFields", 
"    //!@{ Return the fields' values.",
"",
"@@BeginSFFieldLoop@@",
"@@if isPublic", 
"    inline       @!Fieldtype!@	&get@!Fieldname!@(void);",
"    inline const @!Fieldtype!@	&get@!Fieldname!@(void) const;",
"    inline       void	             set@!Fieldname!@( @!Fieldtype!@ value );",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"@@BeginMFFieldLoop@@",
"@@if isPublic", 
"    inline       @!Fieldtype!@	               &get@!Fieldname!@( UInt32 index );",
"    inline       @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void);",
"    inline const @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void) const;",
"@@endif", 
"@@EndMFFieldLoop@@",
"",
"    //!@}",
"",
"@@endif", 
"    /*-------------------------- transformation ----------------------------*/",
"",
"    /*------------------------------ volume -------------------------------*/",
"",
"    /*------------------------------ dump -----------------------------------*/",
"",
"  protected:",
"",
"    //-----------------------------------------------------------------------",
"    //   enums                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   types                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   class variables                                                     ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   class functions                                                     ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   instance variables                                                  ",
"    //-----------------------------------------------------------------------",
"",
"@@if hasFields", 
"    //! The fields storing the data.",
"",
"@@BeginFieldLoop@@",
"@@if !isPrivate", 
"    /*! @!Fielddescription!@",
"     */", 
"    @!CARDINALITY!@@!Fieldtype!@	_@!fieldname!@;",
"@@endif", 
"@@EndFieldLoop@@",
"@@endif", 
"",
"    //-----------------------------------------------------------------------",
"    //   instance functions                                                  ",
"    //-----------------------------------------------------------------------",
"",
"    @!Classname!@Base(void);",
"    @!Classname!@Base(const @!Classname!@Base &source);",
"    virtual ~@!Classname!@Base(void); ",
"    ",
"@@if hasProtectedFields", 
"    //! Return the protected fields.",
"",
"@@BeginFieldLoop@@",
"@@if isProtected", 
"    inline @!CARDINALITY!@@!Fieldtype!@	*get@!CARDINALITY!@@!Fieldname!@(void);",
"@@endif", 
"@@EndFieldLoop@@",
"",
"    //!@{ Return the fields' values.",
"",
"@@BeginSFFieldLoop@@",
"@@if isProtected", 
"    inline       @!Fieldtype!@	&get@!Fieldname!@(void);",
"    inline const @!Fieldtype!@	&get@!Fieldname!@(void) const;",
"    inline       void	             set@!Fieldname!@( @!Fieldtype!@ value );",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"@@BeginMFFieldLoop@@",
"@@if isProtected", 
"    inline       @!Fieldtype!@	               &get@!Fieldname!@( UInt32 index );",
"    inline       @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void);",
"    inline const @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void) const;",
"@@endif", 
"@@EndMFFieldLoop@@",
"",
"    //!@}",
"@@endif", 
"", 
"    void executeSyncImpl(      @!Classname!@Base *pOther,",
"                         const BitVector         &whichField);",
"",
"  private:",
"",
"    //-----------------------------------------------------------------------",
"    //   enums                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   types                                                               ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   friend classes                                                      ",
"    //-----------------------------------------------------------------------",
"",
"    friend class FieldContainer;",
"",
"    //-----------------------------------------------------------------------",
"    //   friend functions                                                    ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   class variables                                                     ",
"    //-----------------------------------------------------------------------",
"",
"    static char cvsid[];",
"",
"@@if hasFields", 
"    static FieldDescription   *_desc[];",
"",
"@@endif", 
"    static FieldContainerType  _type;",
"",
"@@if hasPrivateFields", 
"    //! The private fields storing the data.",
"",
"@@BeginFieldLoop@@",
"@@if isPrivate", 
"    /*! @!Fielddescription!@",
"     */", 
"    @!CARDINALITY!@@!Fieldtype!@	_@!fieldname!@;",
"@@endif", 
"@@EndFieldLoop@@",
"@@endif", 
"",
"    //-----------------------------------------------------------------------",
"    //   class functions                                                     ",
"    //-----------------------------------------------------------------------",
"    ",
"@@if hasPrivateFields", 
"    //! Return the private fields.",
"",
"@@BeginFieldLoop@@",
"@@if isPrivate", 
"    inline @!CARDINALITY!@@!Fieldtype!@	*get@!CARDINALITY!@@!Fieldname!@(void);",
"@@endif", 
"@@EndFieldLoop@@",
"",
"    //!@{ Return the fields' values.",
"",
"@@BeginSFFieldLoop@@",
"@@if isPrivate", 
"    inline       @!Fieldtype!@	&get@!Fieldname!@(void);",
"    inline const @!Fieldtype!@	&get@!Fieldname!@(void) const;",
"    inline       void	             set@!Fieldname!@( @!Fieldtype!@ value );",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"@@BeginMFFieldLoop@@",
"@@if isPrivate", 
"    inline       @!Fieldtype!@	               &get@!Fieldname!@( UInt32 index );",
"    inline       @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void);",
"    inline const @!CARDINALITY!@@!Fieldtype!@ &get@!Fieldname!@(void) const;",
"@@endif", 
"@@EndMFFieldLoop@@",
"",
"    //!@}",
"",
"@@endif", 
"",
"    //-----------------------------------------------------------------------",
"    //   instance variables                                                  ",
"    //-----------------------------------------------------------------------",
"",
"    //-----------------------------------------------------------------------",
"    //   instance functions                                                  ",
"    //-----------------------------------------------------------------------",
"",
"    // prohibit default functions (move to 'public' if you need one)",
"",
"    void operator =(const @!Classname!@ &source);",
"};",
"",
"//---------------------------------------------------------------------------",
"//   Exported Types",
"//---------------------------------------------------------------------------",
"",
"",
"/** \\brief class pointer",
" */",
"typedef @!Classname!@Base *@!Classname!@BaseP;",
"",
"OSG_END_NAMESPACE",
"", 
"#endif /* _OSG@!CLASSNAME!@BASE_H_ */",
NULL };
