/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleTexturedMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTUREDSIMPLEMATERIALBASE_H_
#define _OSGTEXTUREDSIMPLEMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>

#include <OSGSimpleMaterial.h> // Parent

#include <OSGImagePFields.h> // Image type
#include <OSGUInt32Fields.h> // MinFilter type
#include <OSGUInt32Fields.h> // MagFilter type
#include <OSGUInt32Fields.h> // EnvMode type
#include <OSGBoolFields.h> // EnvMap type

#include <OSGSimpleTexturedMaterialFields.h>

OSG_BEGIN_NAMESPACE

class SimpleTexturedMaterial;
class BinaryDataHandler;

/*! \brief SimpleTexturedMaterial Base Class. */

class OSG_SYSTEMLIB_DLLMAPPING SimpleTexturedMaterialBase : public SimpleMaterial
{
  private:

    typedef SimpleMaterial Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        ImageFieldId     = Inherited::NextFieldId,
        MinFilterFieldId = ImageFieldId     + 1,
        MagFilterFieldId = MinFilterFieldId + 1,
        EnvModeFieldId   = MagFilterFieldId + 1,
        EnvMapFieldId    = EnvModeFieldId   + 1,
        NextFieldId      = EnvMapFieldId    + 1
    };

    static const osg::BitVector ImageFieldMask;
    static const osg::BitVector MinFilterFieldMask;
    static const osg::BitVector MagFilterFieldMask;
    static const osg::BitVector EnvModeFieldMask;
    static const osg::BitVector EnvMapFieldMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static const  char               *getClassname(void);

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    inline       SFImageP            *getSFImage          (void);
    inline       SFUInt32            *getSFMinFilter      (void);
    inline       SFUInt32            *getSFMagFilter      (void);
    inline       SFUInt32            *getSFEnvMode        (void);
    inline       SFBool              *getSFEnvMap         (void);

    inline       ImageP              &getImage          (void);
    inline const ImageP              &getImage          (void) const;
    inline       UInt32              &getMinFilter      (void);
    inline const UInt32              &getMinFilter      (void) const;
    inline       UInt32              &getMagFilter      (void);
    inline const UInt32              &getMagFilter      (void) const;
    inline       UInt32              &getEnvMode        (void);
    inline const UInt32              &getEnvMode        (void) const;
    inline       Bool                &getEnvMap         (void);
    inline const Bool                &getEnvMap         (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    inline void setImage          ( const ImageP &value );
    inline void setMinFilter      ( const UInt32 &value );
    inline void setMagFilter      ( const UInt32 &value );
    inline void setEnvMode        ( const UInt32 &value );
    inline void setEnvMap         ( const Bool &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void         executeSync(      FieldContainer &other,
                                     const BitVector      &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32       getBinSize (const BitVector    &whichField);
    virtual void copyToBin  (      BinaryDataHandler &pMem,
                             const BitVector    &whichField);
    virtual void copyFromBin(      BinaryDataHandler &pMem,
                             const BitVector    &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SimpleTexturedMaterialPtr    create          (void); 
    static  SimpleTexturedMaterialPtr    createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFImageP            _sfImage;
    SFUInt32            _sfMinFilter;
    SFUInt32            _sfMagFilter;
    SFUInt32            _sfEnvMode;
    SFBool              _sfEnvMap;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SimpleTexturedMaterialBase(void);
    SimpleTexturedMaterialBase(const SimpleTexturedMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SimpleTexturedMaterialBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      SimpleTexturedMaterialBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)

    void operator =(const SimpleTexturedMaterial &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef SimpleTexturedMaterialBase *SimpleTexturedMaterialBaseP;

OSG_END_NAMESPACE

#define OSGTEXTUREDSIMPLEMATERIALBASE_HEADER_CVSID "@(#)$Id: OSGSimpleTexturedMaterialBase.h,v 1.1 2001/10/06 18:01:26 dirk Exp $"

#endif /* _OSGTEXTUREDSIMPLEMATERIALBASE_H_ */
