
   How to build OpenSG
   ===================
   
The master document is on the web at
http://www.opensg.org/prerequisites.EN.html. If in doubt, go there. 


On a Unix or Unix-like system it's pretty easy. 

./configure && make && make install 

should work.

The only things it really depends on are OpenGL (or Mesa) and a decent C++
compiler (see below for the definition of decent for the different platforms).

However, in general you should configure some additional libraries. The most
important is the GLUT library, as all of the tutorials and most of the tests
depend on it. Other useful libraries are tif, jpg, png and qt. The library
works with any QT >= 2, but the SceneViewer example needs 3.0, so it is
recommended to use 3.0.

To tell configure what libraries to use and, if necessary, where to find them
use the --with-<lib>{=<dir>} options. Call ./configure --help to see all the
options which are available.

A typical configure call would look like this:

./configure --with-glut=/usr --with-jpg --with-png --with-qt=/somewhere/qt-3.0


configure creates a subdirectory in Builds, whose name
depends on the current system, e.g. Builds/mips-sgi-irix6.5-CC, and which
will contain all system-dependent files. This allows concurrent development on
multiple different systems in one directory tree.

Go into this directory and call make to create the libraries. To
find out which make targets are available call make help. This is
possible in all directories of the system which contain a makefile.

There are different libraries that make up the whole system:

Base: the low-level support library. Contains elementary stuff like basic
types, vectors, matrices, quaternions, bounding volumes and the OS
abstractions.

System: the central library, containing the main scenegraph, all the nodes
and higher-level objects.

WindowGLUT: a little library that contains the OpenSG-GLUT
interface object

WindowX: a little library that contains the OpenSG-X interface
object

WindowWIN32: a little library that contains the OpenSG-WIN32
interface object

WindowQT: a little library that contains the OpenSG-QT interface
object


After the libraries are built install them by calling make install. The
libraries will be installed in the directory hierarchy defined by the --prefix
option given to configure, per default /usr/local. Include files will go into
prefix/include/OpenSG, libs into prefix/lib/dbg or prefix/lib/opt. The
osg-config script, which can be used to simplify OpenSG makefiles, goes into
prefix/bin.

One useful variant is to install into the system-dependent directory in
Builds by calling make INSTALL_DIR=`pwd` install.

To run OpenSG programs, make sure that the directory where the libraries are
installed is in your LD_LIBRARY_PATH. 

For bash/ksh users do a 

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:<prefix>/lib/{dbg,opt}

For csh/tcsh users do a 

setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:<prefix>/lib/{dbg,opt}

while replacing <prefix> with your install prefix and {dbg,opt} with dbg or
opt, depending on which kind of library you created.

After making the libraries you should make the tutorial examples. They are
in OpenSG/tutorials. For Unix systems a simple make should do, 
for Windows it's probably easier to download a binary release and start with 
that.

As a somewhat bigger example program there's OpenSG/examples/SceneViewer. It
needs QT 3.0, and it needs QTDIR to be set to directory where QT is installed.
Given that, a simple make should be enough to create it.

There are also a bunch of tests that can be created in the *Test directory
for each library. These are internal tests to see if the system does what it's
supposed to do and not tutorials, thus they don't necessarily show the right way
of doing things. Use them just if you can't find an example for what you want to
do in the tutorials.



Now the platform-specific requirements:

IRIX
====

Compiler : > MIPS Pro 7.3.*
Make     : > gmake 3.78.1
glut     : 3.7


Linux
=====

Compiler : gcc 2.95.>=3 or 2.96.x; 3.0.x not yet

Standard systems:
RH 7.0: needs patches gcc/RHBA-2000-132, glibc/RHBA-2000-079
RH 7.1: out of the box
SuSe 7.1: out of the box


Windows
=======

During this first dynamic developments, where only infrequent builds  are done
on NT, we do not use VisualStudio or some other IDE (of course only if you do
not count emacs to be one :-)). So we  actually use gmake in combination with
cygwin. So when you get a new gmake PLEASE DO NOT try to build it with native
windows dev tools, use the gcc provided by cygwin instead. You can download and
build the usual unix distribution using the cygwin environment. For OpenSG, 
please do not try to use a microsoft compiler, even if there are config files
available. Believe us, it will fail and we are working on it to find all the
ways around their interpretation of doing C++ compilations.

Compiler : Intel C++ > 4.5 + latest patchset
Cygwin   : >= 1.1.4
gmake    : > 3.78.1
glut     : 3.7
autoconf : 2.13 (only needed when you want to work on the configure scripts)
STL      : The current default is the original Microsoft 
           implementation. Since there where some problems using
           other implementations and the MSVC runtime libraries.



Documentation :
===============

And last, if you like it and want to get a deeper insight build the
documentation to get an overview over the different parts of the system. 
But be aware that the docuentation is by far not complete, it is ok to give
you an overview and browse through the structure but nothing more (currently).

    make doc

This uses doxygen to create documentation in Doc/Code/html. We use
version 1.2.11, which is pretty new, but 1.2.X should be ok, too. The
default configuration uses dot, so you need that, too, or you have turn
off the HAVE_DOT option.

There is a workaround for typedefed templates not showing up as classes.
It tricks doxygen into seeing classes that aren't there. So don't be
surprised if you see classes in the documentation that are not in the
code.

We have a starter guide which explains the OpenSG specifics. It's in
Doc/starter, but you need LyX, convert from ImageMagick and fig2dev from
transfig to make it. It's probably easier to download it from the website at
http://www.opensg.org/documentation.EN.html.


Question/Comments? 

Mail to feedback@opensg.org.

   
