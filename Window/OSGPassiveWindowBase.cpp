/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PassiveWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPASSIVEWINDOWINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGPassiveWindowBase.h"
#include "OSGPassiveWindow.h"


OSG_USING_NAMESPACE



//! PassiveWindow type

FieldContainerType PassiveWindowBase::_type(
    "PassiveWindow",
    "Window",
    NULL,
    (PrototypeCreateF) &PassiveWindowBase::createEmpty,
    PassiveWindow::initMethod,
    NULL,
    0);

//OSG_FIELD_CONTAINER_DEF(PassiveWindowBase, PassiveWindowPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &PassiveWindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PassiveWindowBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr PassiveWindowBase::shallowCopy(void) const 
{ 
    PassiveWindowPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PassiveWindow *>(this)); 

    return returnValue; 
}

UInt32 PassiveWindowBase::getContainerSize(void) const 
{ 
    return sizeof(PassiveWindow); 
}


void PassiveWindowBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((PassiveWindowBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

PassiveWindowBase::PassiveWindowBase(void) :
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

PassiveWindowBase::PassiveWindowBase(const PassiveWindowBase &source) :
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

PassiveWindowBase::~PassiveWindowBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 PassiveWindowBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void PassiveWindowBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);


}

void PassiveWindowBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);


}

void PassiveWindowBase::executeSyncImpl(      PassiveWindowBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);


}



OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<PassiveWindowPtr>::_type("PassiveWindowPtr", "WindowPtr");

#if defined(OSG_SGI_EXPLICIT_INSTANTIATION)

#pragma instantiate SField<PassiveWindowPtr>::_fieldType
#pragma instantiate MField<PassiveWindowPtr>::_fieldType

#else

OSG_DLLEXPORT_SFIELD_DEF1(PassiveWindowPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);
OSG_DLLEXPORT_MFIELD_DEF1(PassiveWindowPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING);

#endif

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGPassiveWindowBase.cpp,v 1.10 2002/05/21 11:50:16 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGPASSIVEWINDOWBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPASSIVEWINDOWBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPASSIVEWINDOWFIELDS_HEADER_CVSID;
}

