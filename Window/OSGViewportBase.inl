/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ViewportBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ViewportBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
ViewportPtr ViewportBase::create(void) 
{
    ViewportPtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = ViewportPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
ViewportPtr ViewportBase::createEmpty(void) 
{ 
    ViewportPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
SFReal32 *ViewportBase::getSFLeft(void)
{
    return &_sfLeft;
}

inline
SFReal32 *ViewportBase::getSFRight(void)
{
    return &_sfRight;
}

inline
SFReal32 *ViewportBase::getSFBottom(void)
{
    return &_sfBottom;
}

inline
SFReal32 *ViewportBase::getSFTop(void)
{
    return &_sfTop;
}

inline
SFWindowPtr *ViewportBase::getSFParent(void)
{
    return &_sfParent;
}

inline
SFCameraPtr *ViewportBase::getSFCamera(void)
{
    return &_sfCamera;
}

inline
SFNodePtr *ViewportBase::getSFRoot(void)
{
    return &_sfRoot;
}

inline
SFBackgroundPtr *ViewportBase::getSFBackground(void)
{
    return &_sfBackground;
}

inline
MFForegroundPtr *ViewportBase::getMFForegrounds(void)
{
    return &_mfForegrounds;
}


inline
Real32 &ViewportBase::getLeft(void)
{
    return _sfLeft.getValue();
}

inline
const Real32 &ViewportBase::getLeft(void) const
{
    return _sfLeft.getValue();
}

inline
void ViewportBase::setLeft(const Real32 &value)
{
    _sfLeft.setValue(value);
}

inline
Real32 &ViewportBase::getRight(void)
{
    return _sfRight.getValue();
}

inline
const Real32 &ViewportBase::getRight(void) const
{
    return _sfRight.getValue();
}

inline
void ViewportBase::setRight(const Real32 &value)
{
    _sfRight.setValue(value);
}

inline
Real32 &ViewportBase::getBottom(void)
{
    return _sfBottom.getValue();
}

inline
const Real32 &ViewportBase::getBottom(void) const
{
    return _sfBottom.getValue();
}

inline
void ViewportBase::setBottom(const Real32 &value)
{
    _sfBottom.setValue(value);
}

inline
Real32 &ViewportBase::getTop(void)
{
    return _sfTop.getValue();
}

inline
const Real32 &ViewportBase::getTop(void) const
{
    return _sfTop.getValue();
}

inline
void ViewportBase::setTop(const Real32 &value)
{
    _sfTop.setValue(value);
}

inline
WindowPtr &ViewportBase::getParent(void)
{
    return _sfParent.getValue();
}

inline
const WindowPtr &ViewportBase::getParent(void) const
{
    return _sfParent.getValue();
}

inline
void ViewportBase::setParent(const WindowPtr &value)
{
    _sfParent.setValue(value);
}

inline
CameraPtr &ViewportBase::getCamera(void)
{
    return _sfCamera.getValue();
}

inline
const CameraPtr &ViewportBase::getCamera(void) const
{
    return _sfCamera.getValue();
}

inline
void ViewportBase::setCamera(const CameraPtr &value)
{
    _sfCamera.setValue(value);
}

inline
NodePtr &ViewportBase::getRoot(void)
{
    return _sfRoot.getValue();
}

inline
const NodePtr &ViewportBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

inline
void ViewportBase::setRoot(const NodePtr &value)
{
    _sfRoot.setValue(value);
}

inline
BackgroundPtr &ViewportBase::getBackground(void)
{
    return _sfBackground.getValue();
}

inline
const BackgroundPtr &ViewportBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

inline
void ViewportBase::setBackground(const BackgroundPtr &value)
{
    _sfBackground.setValue(value);
}


inline
ForegroundPtr &ViewportBase::getForegrounds(UInt32 index)
{
    return _mfForegrounds.getValue( index );
}

inline
MFForegroundPtr &ViewportBase::getForegrounds(void)
{
    return _mfForegrounds;
}

inline
const MFForegroundPtr &ViewportBase::getForegrounds(void) const
{
    return _mfForegrounds;
}


OSG_END_NAMESPACE

#define OSGVIEWPORTBASE_INLINE_CVSID "@(#)$Id: OSGViewportBase.inl,v 1.12 2002/03/25 01:26:00 vossg Exp $"

