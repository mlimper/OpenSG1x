/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Camera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILEWINDOW
#define OSG_COMPILECAMERAINST

#include "OSGCameraBase.h"
#include "OSGCamera.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<CameraPtr>::_fieldType
#pragma instantiate MField<CameraPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, CameraPtr, OSG_WINDOW_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, CameraPtr, OSG_WINDOW_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		CameraBase::BeaconFieldId;
const OSG::BitVector	CameraBase::BeaconFieldMask;

const OSG::UInt32		CameraBase::NearFieldId;
const OSG::BitVector	CameraBase::NearFieldMask;

const OSG::UInt32		CameraBase::FarFieldId;
const OSG::BitVector	CameraBase::FarFieldMask;


const OSG::UInt32    	CameraBase::NextFieldId; 
const OSG::BitVector 	CameraBase::NextFieldMask;


char CameraBase::cvsid[] = "@(#)$Id: OSGCameraBase.cpp,v 1.4 2001/05/30 16:25:24 vossg Exp $";

/** \brief Group field description
 */

FieldDescription CameraBase::_desc[] = 
{
    FieldDescription(SFNodePtr::getClassType(), 
                     "beacon", 
                     BeaconFieldId, BeaconFieldMask,
                     false,
                     (FieldAccessMethod) &CameraBase::getSFBeacon),
    FieldDescription(SFReal32::getClassType(), 
                     "near", 
                     NearFieldId, NearFieldMask,
                     false,
                     (FieldAccessMethod) &CameraBase::getSFNear),
    FieldDescription(SFReal32::getClassType(), 
                     "far", 
                     FarFieldId, FarFieldMask,
                     false,
                     (FieldAccessMethod) &CameraBase::getSFFar)
};

/** \brief Camera type
 */

FieldContainerType CameraBase::_type(
    "Camera",
    "FieldContainer",
    NULL,
    NULL, 
    Camera::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(CameraBase, CameraPtr)

FieldContainerType &CameraBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CameraBase::getType(void) const 
{
    return _type;
} 

UInt32 CameraBase::getSize(void) const 
{ 
    return sizeof(CameraBase); 
}


void CameraBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((CameraBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

CameraBase::CameraBase(void) :
	_beacon	(), 
	_near	(), 
	_far	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

CameraBase::CameraBase(const CameraBase &source) :
	_beacon		(source._beacon), 
	_near		(source._near), 
	_far		(source._far), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

CameraBase::~CameraBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void CameraBase::executeSyncImpl(CameraBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _beacon.syncWith(pOther->_beacon);
    }

    if(FieldBits::NoField != (NearFieldMask & whichField))
    {
        _near.syncWith(pOther->_near);
    }

    if(FieldBits::NoField != (FarFieldMask & whichField))
    {
        _far.syncWith(pOther->_far);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

