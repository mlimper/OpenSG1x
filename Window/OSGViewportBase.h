/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGVIEWPORTBASE_H_
#define _OSGVIEWPORTBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGConfig.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>
#include <OSGSystemDef.h>
#include <OSGFieldContainer.h>
#include <OSGReal32Fields.h>	// Left type
#include <OSGReal32Fields.h>	// Right type
#include <OSGReal32Fields.h>	// Bottom type
#include <OSGReal32Fields.h>	// Top type
#include <OSGWindowFields.h>	// Parent type
#include <OSGCameraFields.h>	// Camera type
#include <OSGNodeFields.h>	// Root type
#include <OSGBackgroundFields.h>	// Background type

#include <OSGViewportFields.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class Viewport;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! Viewport Base Class. */

class OSG_SYSTEMLIB_DLLMAPPING ViewportBase : public FieldContainer
{
  private:

    typedef FieldContainer Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
    enum
    {
        LeftFieldId = Inherited::NextFieldId,
        RightFieldId = LeftFieldId + 1,
        BottomFieldId = RightFieldId + 1,
        TopFieldId = BottomFieldId + 1,
        ParentFieldId = TopFieldId + 1,
        CameraFieldId = ParentFieldId + 1,
        RootFieldId = CameraFieldId + 1,
        BackgroundFieldId = RootFieldId + 1
    };

    static const osg::BitVector LeftFieldMask;
    static const osg::BitVector RightFieldMask;
    static const osg::BitVector BottomFieldMask;
    static const osg::BitVector TopFieldMask;
    static const osg::BitVector ParentFieldMask;
    static const osg::BitVector CameraFieldMask;
    static const osg::BitVector RootFieldMask;
    static const osg::BitVector BackgroundFieldMask;

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "ViewportBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType(void); 
    virtual const OSG::FieldContainerType &getType(void) const; 
    
    static OSG::FieldContainerType &getClassType  (void); 
    static OSG::UInt32              getClassTypeId(void); 
    static ViewportPtr         create        (void); 
    static ViewportPtr         createEmpty   (void); 

    virtual OSG::FieldContainerPtr shallowCopy(void) const; 
    virtual OSG::UInt32            getSize    (void) const;

    virtual void                   executeSync(      FieldContainer &other,
                                               const BitVector      &whichField);


    virtual UInt32       getBinSize (const BitVector    &whichField);
    virtual MemoryHandle copyToBin  (      MemoryHandle  pMem,
                                     const BitVector    &whichField);
    virtual MemoryHandle copyFromBin(      MemoryHandle  pMem,
                                     const BitVector    &whichField);

    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFReal32	*getSFLeft(void);
    inline SFReal32	*getSFRight(void);
    inline SFReal32	*getSFBottom(void);
    inline SFReal32	*getSFTop(void);
    inline SFWindowPtr	*getSFParent(void);
    inline SFCameraPtr	*getSFCamera(void);
    inline SFNodePtr	*getSFRoot(void);
    inline SFBackgroundPtr	*getSFBackground(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       Real32	&getLeft(void);
    inline const Real32	&getLeft(void) const;
    inline       void	             setLeft( Real32 value );
    inline       Real32	&getRight(void);
    inline const Real32	&getRight(void) const;
    inline       void	             setRight( Real32 value );
    inline       Real32	&getBottom(void);
    inline const Real32	&getBottom(void) const;
    inline       void	             setBottom( Real32 value );
    inline       Real32	&getTop(void);
    inline const Real32	&getTop(void) const;
    inline       void	             setTop( Real32 value );
    inline       WindowPtr	&getParent(void);
    inline const WindowPtr	&getParent(void) const;
    inline       void	             setParent( WindowPtr value );
    inline       CameraPtr	&getCamera(void);
    inline const CameraPtr	&getCamera(void) const;
    inline       void	             setCamera( CameraPtr value );
    inline       NodePtr	&getRoot(void);
    inline const NodePtr	&getRoot(void) const;
    inline       void	             setRoot( NodePtr value );
    inline       BackgroundPtr	&getBackground(void);
    inline const BackgroundPtr	&getBackground(void) const;
    inline       void	             setBackground( BackgroundPtr value );


    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! The left edge of the viewport. Values between 0 and 1 are relative to the size of 	the Window, values &gt; 1 are absolute pixel coordinates, value == -1 means the  	left border. All other values are illegal.
     */
    SFReal32	_sfLeft;
    /*! The right edge of the viewport. Values between 0 and 1 are relative to the size of 	the Window, values &gt; 1 are absolute pixel coordinates, value == -1 means the  	right border. All other values are illegal.
     */
    SFReal32	_sfRight;
    /*! The bottom edge of the viewport. Values between 0 and 1 are relative to the size of 	the Window, values &gt; 1 are absolute pixel coordinates, value == -1 means the  	bottom border. All other values are illegal.
     */
    SFReal32	_sfBottom;
    /*! The top edge of the viewport. Values between 0 and 1 are relative to the size of 	the Window, values &gt; 1 are absolute pixel coordinates, value == -1 means the  	top border. All other values are illegal.
     */
    SFReal32	_sfTop;
    /*! The Window this viewport is contained in.
     */
    SFWindowPtr	_sfParent;
    /*! The Camera used to render the viewport.
     */
    SFCameraPtr	_sfCamera;
    /*! The root of the tree that is displayed in this viewport.
     */
    SFNodePtr	_sfRoot;
    /*! The background used to clear this viewport.
     */
    SFBackgroundPtr	_sfBackground;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    ViewportBase(void);
    ViewportBase(const ViewportBase &source);
    virtual ~ViewportBase(void); 
    

    void executeSyncImpl(      ViewportBase *pOther,
                         const BitVector         &whichField);

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   _desc[];

    static FieldContainerType _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const Viewport &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef ViewportBase *ViewportBaseP;

OSG_END_NAMESPACE

#endif /* _OSGVIEWPORTBASE_H_ */
