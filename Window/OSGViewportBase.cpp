/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILEWINDOW
#define OSG_COMPILEVIEWPORTINST

#include "OSGViewportBase.h"
#include "OSGViewport.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<ViewportPtr>::_fieldType
#pragma instantiate MField<ViewportPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, ViewportPtr, OSG_WINDOW_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, ViewportPtr, OSG_WINDOW_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		ViewportBase::LeftFieldId;
const OSG::BitVector	ViewportBase::LeftFieldMask;

const OSG::UInt32		ViewportBase::RightFieldId;
const OSG::BitVector	ViewportBase::RightFieldMask;

const OSG::UInt32		ViewportBase::BottomFieldId;
const OSG::BitVector	ViewportBase::BottomFieldMask;

const OSG::UInt32		ViewportBase::TopFieldId;
const OSG::BitVector	ViewportBase::TopFieldMask;

const OSG::UInt32		ViewportBase::ParentFieldId;
const OSG::BitVector	ViewportBase::ParentFieldMask;

const OSG::UInt32		ViewportBase::CameraFieldId;
const OSG::BitVector	ViewportBase::CameraFieldMask;

const OSG::UInt32		ViewportBase::RootFieldId;
const OSG::BitVector	ViewportBase::RootFieldMask;

const OSG::UInt32		ViewportBase::BackgroundFieldId;
const OSG::BitVector	ViewportBase::BackgroundFieldMask;


const OSG::UInt32    	ViewportBase::NextFieldId; 
const OSG::BitVector 	ViewportBase::NextFieldMask;


char ViewportBase::cvsid[] = "@(#)$Id: OSGViewportBase.cpp,v 1.4 2001/05/30 16:25:24 vossg Exp $";

/** \brief Group field description
 */

FieldDescription ViewportBase::_desc[] = 
{
    FieldDescription(SFReal32::getClassType(), 
                     "left", 
                     LeftFieldId, LeftFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFLeft),
    FieldDescription(SFReal32::getClassType(), 
                     "right", 
                     RightFieldId, RightFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFRight),
    FieldDescription(SFReal32::getClassType(), 
                     "bottom", 
                     BottomFieldId, BottomFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFBottom),
    FieldDescription(SFReal32::getClassType(), 
                     "top", 
                     TopFieldId, TopFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFTop),
    FieldDescription(SFWindowPtr::getClassType(), 
                     "parent", 
                     ParentFieldId, ParentFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFParent),
    FieldDescription(SFCameraPtr::getClassType(), 
                     "camera", 
                     CameraFieldId, CameraFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFCamera),
    FieldDescription(SFNodePtr::getClassType(), 
                     "root", 
                     RootFieldId, RootFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFRoot),
    FieldDescription(SFBackgroundPtr::getClassType(), 
                     "background", 
                     BackgroundFieldId, BackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFBackground)
};

/** \brief Viewport type
 */

FieldContainerType ViewportBase::_type(
    "Viewport",
    "FieldContainer",
    NULL,
    (PrototypeCreateF) &ViewportBase::createEmpty,
    Viewport::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(ViewportBase, ViewportPtr)

FieldContainerType &ViewportBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ViewportBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr ViewportBase::shallowCopy(void) const 
{ 
    ViewportPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Viewport *>(this)); 

    return returnValue; 
}

UInt32 ViewportBase::getSize(void) const 
{ 
    return sizeof(ViewportBase); 
}


void ViewportBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((ViewportBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

ViewportBase::ViewportBase(void) :
	_left	(), 
	_right	(), 
	_bottom	(), 
	_top	(), 
	_parent	(), 
	_camera	(), 
	_root	(), 
	_background	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

ViewportBase::ViewportBase(const ViewportBase &source) :
	_left		(source._left), 
	_right		(source._right), 
	_bottom		(source._bottom), 
	_top		(source._top), 
	_parent		(source._parent), 
	_camera		(source._camera), 
	_root		(source._root), 
	_background		(source._background), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

ViewportBase::~ViewportBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void ViewportBase::executeSyncImpl(ViewportBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _left.syncWith(pOther->_left);
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        _right.syncWith(pOther->_right);
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _bottom.syncWith(pOther->_bottom);
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        _top.syncWith(pOther->_top);
    }

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _parent.syncWith(pOther->_parent);
    }

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _camera.syncWith(pOther->_camera);
    }

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _root.syncWith(pOther->_root);
    }

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _background.syncWith(pOther->_background);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

