/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEVIEWPORTINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGViewportBase.h"
#include "OSGViewport.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<ViewportPtr>::_fieldType
#pragma instantiate MField<ViewportPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, ViewportPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, ViewportPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	ViewportBase::LeftFieldMask = 
    (1 << ViewportBase::LeftFieldId);

const OSG::BitVector	ViewportBase::RightFieldMask = 
    (1 << ViewportBase::RightFieldId);

const OSG::BitVector	ViewportBase::BottomFieldMask = 
    (1 << ViewportBase::BottomFieldId);

const OSG::BitVector	ViewportBase::TopFieldMask = 
    (1 << ViewportBase::TopFieldId);

const OSG::BitVector	ViewportBase::ParentFieldMask = 
    (1 << ViewportBase::ParentFieldId);

const OSG::BitVector	ViewportBase::CameraFieldMask = 
    (1 << ViewportBase::CameraFieldId);

const OSG::BitVector	ViewportBase::RootFieldMask = 
    (1 << ViewportBase::RootFieldId);

const OSG::BitVector	ViewportBase::BackgroundFieldMask = 
    (1 << ViewportBase::BackgroundFieldId);



char ViewportBase::cvsid[] = "@(#)$Id: OSGViewportBase.cpp,v 1.6 2001/07/03 14:16:32 vossg Exp $";

/** \brief Group field description
 */

FieldDescription ViewportBase::_desc[] = 
{
    FieldDescription(SFReal32::getClassType(), 
                     "sfLeft", 
                     LeftFieldId, LeftFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFLeft),
    FieldDescription(SFReal32::getClassType(), 
                     "sfRight", 
                     RightFieldId, RightFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFRight),
    FieldDescription(SFReal32::getClassType(), 
                     "sfBottom", 
                     BottomFieldId, BottomFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFBottom),
    FieldDescription(SFReal32::getClassType(), 
                     "sfTop", 
                     TopFieldId, TopFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFTop),
    FieldDescription(SFWindowPtr::getClassType(), 
                     "sfParent", 
                     ParentFieldId, ParentFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFParent),
    FieldDescription(SFCameraPtr::getClassType(), 
                     "sfCamera", 
                     CameraFieldId, CameraFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFCamera),
    FieldDescription(SFNodePtr::getClassType(), 
                     "sfRoot", 
                     RootFieldId, RootFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFRoot),
    FieldDescription(SFBackgroundPtr::getClassType(), 
                     "sfBackground", 
                     BackgroundFieldId, BackgroundFieldMask,
                     false,
                     (FieldAccessMethod) &ViewportBase::getSFBackground)
};

/** \brief Viewport type
 */

FieldContainerType ViewportBase::_type(
    "Viewport",
    "FieldContainer",
    NULL,
    (PrototypeCreateF) &ViewportBase::createEmpty,
    Viewport::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(ViewportBase, ViewportPtr)

FieldContainerType &ViewportBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ViewportBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr ViewportBase::shallowCopy(void) const 
{ 
    ViewportPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Viewport *>(this)); 

    return returnValue; 
}

UInt32 ViewportBase::getSize(void) const 
{ 
    return sizeof(ViewportBase); 
}


void ViewportBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((ViewportBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

ViewportBase::ViewportBase(void) :
	_sfLeft	(), 
	_sfRight	(), 
	_sfBottom	(), 
	_sfTop	(), 
	_sfParent	(), 
	_sfCamera	(), 
	_sfRoot	(), 
	_sfBackground	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

ViewportBase::ViewportBase(const ViewportBase &source) :
	_sfLeft		(source._sfLeft), 
	_sfRight		(source._sfRight), 
	_sfBottom		(source._sfBottom), 
	_sfTop		(source._sfTop), 
	_sfParent		(source._sfParent), 
	_sfCamera		(source._sfCamera), 
	_sfRoot		(source._sfRoot), 
	_sfBackground		(source._sfBackground), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

ViewportBase::~ViewportBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void ViewportBase::executeSyncImpl(ViewportBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _sfLeft.syncWith(pOther->_sfLeft);
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        _sfRight.syncWith(pOther->_sfRight);
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _sfBottom.syncWith(pOther->_sfBottom);
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        _sfTop.syncWith(pOther->_sfTop);
    }

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.syncWith(pOther->_sfParent);
    }

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.syncWith(pOther->_sfCamera);
    }

    if(FieldBits::NoField != (RootFieldMask & whichField))
    {
        _sfRoot.syncWith(pOther->_sfRoot);
    }

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.syncWith(pOther->_sfBackground);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

