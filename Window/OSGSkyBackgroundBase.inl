/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                     Copyright 2000,2001 by OpenSG Forum                   *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SkyBackgroundBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 SkyBackgroundBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

//! create a new instance of the class
inline
SkyBackgroundPtr SkyBackgroundBase::create(void) 
{
    SkyBackgroundPtr fc; 

    if(getClassType().getPrototype() != osg::NullFC) 
    {
        fc = SkyBackgroundPtr::dcast(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

//! create an empty new instance of the class, do not copy the prototype
inline
SkyBackgroundPtr SkyBackgroundBase::createEmpty(void) 
{ 
    SkyBackgroundPtr returnValue; 
    
    newPtr(returnValue); 

    return returnValue; 
}


/*------------------------------ get -----------------------------------*/

inline
MFColor3f *SkyBackgroundBase::getMFSkyColor(void)
{
    return &_mfSkyColor;
}

inline
MFReal32 *SkyBackgroundBase::getMFSkyAngle(void)
{
    return &_mfSkyAngle;
}

inline
MFColor3f *SkyBackgroundBase::getMFGroundColor(void)
{
    return &_mfGroundColor;
}

inline
MFReal32 *SkyBackgroundBase::getMFGroundAngle(void)
{
    return &_mfGroundAngle;
}

inline
SFUInt32 *SkyBackgroundBase::getSFSphereRes(void)
{
    return &_sfSphereRes;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFBackTexture(void)
{
    return &_sfBackTexture;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFBottomTexture(void)
{
    return &_sfBottomTexture;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFFrontTexture(void)
{
    return &_sfFrontTexture;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFLeftTexture(void)
{
    return &_sfLeftTexture;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFRightTexture(void)
{
    return &_sfRightTexture;
}

inline
SFTextureChunkPtr *SkyBackgroundBase::getSFTopTexture(void)
{
    return &_sfTopTexture;
}


inline
UInt32 &SkyBackgroundBase::getSphereRes(void)
{
    return _sfSphereRes.getValue();
}

inline
const UInt32 &SkyBackgroundBase::getSphereRes(void) const
{
    return _sfSphereRes.getValue();
}

inline
void SkyBackgroundBase::setSphereRes(const UInt32 &value)
{
    _sfSphereRes.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getBackTexture(void)
{
    return _sfBackTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getBackTexture(void) const
{
    return _sfBackTexture.getValue();
}

inline
void SkyBackgroundBase::setBackTexture(const TextureChunkPtr &value)
{
    _sfBackTexture.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getBottomTexture(void)
{
    return _sfBottomTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getBottomTexture(void) const
{
    return _sfBottomTexture.getValue();
}

inline
void SkyBackgroundBase::setBottomTexture(const TextureChunkPtr &value)
{
    _sfBottomTexture.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getFrontTexture(void)
{
    return _sfFrontTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getFrontTexture(void) const
{
    return _sfFrontTexture.getValue();
}

inline
void SkyBackgroundBase::setFrontTexture(const TextureChunkPtr &value)
{
    _sfFrontTexture.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getLeftTexture(void)
{
    return _sfLeftTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getLeftTexture(void) const
{
    return _sfLeftTexture.getValue();
}

inline
void SkyBackgroundBase::setLeftTexture(const TextureChunkPtr &value)
{
    _sfLeftTexture.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getRightTexture(void)
{
    return _sfRightTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getRightTexture(void) const
{
    return _sfRightTexture.getValue();
}

inline
void SkyBackgroundBase::setRightTexture(const TextureChunkPtr &value)
{
    _sfRightTexture.setValue(value);
}

inline
TextureChunkPtr &SkyBackgroundBase::getTopTexture(void)
{
    return _sfTopTexture.getValue();
}

inline
const TextureChunkPtr &SkyBackgroundBase::getTopTexture(void) const
{
    return _sfTopTexture.getValue();
}

inline
void SkyBackgroundBase::setTopTexture(const TextureChunkPtr &value)
{
    _sfTopTexture.setValue(value);
}


inline
Color3f &SkyBackgroundBase::getSkyColor(const UInt32 index)
{
    return _mfSkyColor[index];
}

inline
MFColor3f &SkyBackgroundBase::getSkyColor(void)
{
    return _mfSkyColor;
}

inline
const MFColor3f &SkyBackgroundBase::getSkyColor(void) const
{
    return _mfSkyColor;
}

inline
Real32 &SkyBackgroundBase::getSkyAngle(const UInt32 index)
{
    return _mfSkyAngle[index];
}

inline
MFReal32 &SkyBackgroundBase::getSkyAngle(void)
{
    return _mfSkyAngle;
}

inline
const MFReal32 &SkyBackgroundBase::getSkyAngle(void) const
{
    return _mfSkyAngle;
}

inline
Color3f &SkyBackgroundBase::getGroundColor(const UInt32 index)
{
    return _mfGroundColor[index];
}

inline
MFColor3f &SkyBackgroundBase::getGroundColor(void)
{
    return _mfGroundColor;
}

inline
const MFColor3f &SkyBackgroundBase::getGroundColor(void) const
{
    return _mfGroundColor;
}

inline
Real32 &SkyBackgroundBase::getGroundAngle(const UInt32 index)
{
    return _mfGroundAngle[index];
}

inline
MFReal32 &SkyBackgroundBase::getGroundAngle(void)
{
    return _mfGroundAngle;
}

inline
const MFReal32 &SkyBackgroundBase::getGroundAngle(void) const
{
    return _mfGroundAngle;
}

OSG_END_NAMESPACE

#define OSGSKYBACKGROUNDBASE_INLINE_CVSID "@(#)$Id: OSGSkyBackgroundBase.inl,v 1.4 2002/06/20 13:02:17 vossg Exp $"

