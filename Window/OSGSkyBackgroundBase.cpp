/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESKYBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGSkyBackgroundBase.h"
#include "OSGSkyBackground.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<SkyBackgroundPtr>::_type("SkyBackgroundPtr", "BackgroundPtr");

#if defined(__sgi)

#pragma instantiate MField<SkyBackgroundPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(MField, SkyBackgroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGSkyBackgroundBase.cpp,v 1.2 2002/02/11 03:46:28 vossg Exp $";
    static Char8 cvsid_hpp       [] = OSGSKYBACKGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSKYBACKGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSKYBACKGROUNDFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  SkyBackgroundBase::SkyColorFieldMask = 
    (1 << SkyBackgroundBase::SkyColorFieldId);

const OSG::BitVector  SkyBackgroundBase::SkyAngleFieldMask = 
    (1 << SkyBackgroundBase::SkyAngleFieldId);

const OSG::BitVector  SkyBackgroundBase::GroundColorFieldMask = 
    (1 << SkyBackgroundBase::GroundColorFieldId);

const OSG::BitVector  SkyBackgroundBase::GroundAngleFieldMask = 
    (1 << SkyBackgroundBase::GroundAngleFieldId);

const OSG::BitVector  SkyBackgroundBase::SphereResFieldMask = 
    (1 << SkyBackgroundBase::SphereResFieldId);

const OSG::BitVector  SkyBackgroundBase::BackTextureFieldMask = 
    (1 << SkyBackgroundBase::BackTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::BottomTextureFieldMask = 
    (1 << SkyBackgroundBase::BottomTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::FrontTextureFieldMask = 
    (1 << SkyBackgroundBase::FrontTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::LeftTextureFieldMask = 
    (1 << SkyBackgroundBase::LeftTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::RightTextureFieldMask = 
    (1 << SkyBackgroundBase::RightTextureFieldId);

const OSG::BitVector  SkyBackgroundBase::TopTextureFieldMask = 
    (1 << SkyBackgroundBase::TopTextureFieldId);



// Field descriptions

/*! \var Color3f         SkyBackgroundBase::_mfSkyColor
    
*/
/*! \var Real32          SkyBackgroundBase::_mfSkyAngle
    
*/
/*! \var Color3f         SkyBackgroundBase::_mfGroundColor
    
*/
/*! \var Real32          SkyBackgroundBase::_mfGroundAngle
    
*/
/*! \var UInt32          SkyBackgroundBase::_sfSphereRes
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfBackTexture
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfBottomTexture
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfFrontTexture
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfLeftTexture
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfRightTexture
    
*/
/*! \var TextureChunkPtr SkyBackgroundBase::_sfTopTexture
    
*/
//! SkyBackground description

FieldDescription *SkyBackgroundBase::_desc[] = 
{
    new FieldDescription(MFColor3f::getClassType(), 
                     "skyColor", 
                     SkyColorFieldId, SkyColorFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFSkyColor),
    new FieldDescription(MFReal32::getClassType(), 
                     "skyAngle", 
                     SkyAngleFieldId, SkyAngleFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFSkyAngle),
    new FieldDescription(MFColor3f::getClassType(), 
                     "groundColor", 
                     GroundColorFieldId, GroundColorFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFGroundColor),
    new FieldDescription(MFReal32::getClassType(), 
                     "groundAngle", 
                     GroundAngleFieldId, GroundAngleFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getMFGroundAngle),
    new FieldDescription(SFUInt32::getClassType(), 
                     "sphereRes", 
                     SphereResFieldId, SphereResFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFSphereRes),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "backTexture", 
                     BackTextureFieldId, BackTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFBackTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "bottomTexture", 
                     BottomTextureFieldId, BottomTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFBottomTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "frontTexture", 
                     FrontTextureFieldId, FrontTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFFrontTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "leftTexture", 
                     LeftTextureFieldId, LeftTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFLeftTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "rightTexture", 
                     RightTextureFieldId, RightTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFRightTexture),
    new FieldDescription(SFTextureChunkPtr::getClassType(), 
                     "topTexture", 
                     TopTextureFieldId, TopTextureFieldMask,
                     false,
                     (FieldAccessMethod) &SkyBackgroundBase::getSFTopTexture)
};

//! SkyBackground type

FieldContainerType SkyBackgroundBase::_type(
    "SkyBackground",
    "Background",
    NULL,
    (PrototypeCreateF) &SkyBackgroundBase::createEmpty,
    SkyBackground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(SkyBackgroundBase, SkyBackgroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkyBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SkyBackgroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr SkyBackgroundBase::shallowCopy(void) const 
{ 
    SkyBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SkyBackground *>(this)); 

    return returnValue; 
}

UInt32 SkyBackgroundBase::getContainerSize(void) const 
{ 
    return sizeof(SkyBackgroundBase); 
}


void SkyBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((SkyBackgroundBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

SkyBackgroundBase::SkyBackgroundBase(void) :
    _mfSkyColor               (), 
    _mfSkyAngle               (), 
    _mfGroundColor            (), 
    _mfGroundAngle            (), 
    _sfSphereRes              (UInt32(8)), 
    _sfBackTexture            (TextureChunkPtr(NullFC)), 
    _sfBottomTexture          (TextureChunkPtr(NullFC)), 
    _sfFrontTexture           (TextureChunkPtr(NullFC)), 
    _sfLeftTexture            (TextureChunkPtr(NullFC)), 
    _sfRightTexture           (TextureChunkPtr(NullFC)), 
    _sfTopTexture             (TextureChunkPtr(NullFC)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

SkyBackgroundBase::SkyBackgroundBase(const SkyBackgroundBase &source) :
    _mfSkyColor               (source._mfSkyColor               ), 
    _mfSkyAngle               (source._mfSkyAngle               ), 
    _mfGroundColor            (source._mfGroundColor            ), 
    _mfGroundAngle            (source._mfGroundAngle            ), 
    _sfSphereRes              (source._sfSphereRes              ), 
    _sfBackTexture            (source._sfBackTexture            ), 
    _sfBottomTexture          (source._sfBottomTexture          ), 
    _sfFrontTexture           (source._sfFrontTexture           ), 
    _sfLeftTexture            (source._sfLeftTexture            ), 
    _sfRightTexture           (source._sfRightTexture           ), 
    _sfTopTexture             (source._sfTopTexture             ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

SkyBackgroundBase::~SkyBackgroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 SkyBackgroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        returnValue += _mfSkyColor.getBinSize();
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        returnValue += _mfSkyAngle.getBinSize();
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        returnValue += _mfGroundColor.getBinSize();
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        returnValue += _mfGroundAngle.getBinSize();
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        returnValue += _sfSphereRes.getBinSize();
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        returnValue += _sfBackTexture.getBinSize();
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        returnValue += _sfBottomTexture.getBinSize();
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        returnValue += _sfFrontTexture.getBinSize();
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        returnValue += _sfLeftTexture.getBinSize();
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        returnValue += _sfRightTexture.getBinSize();
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        returnValue += _sfTopTexture.getBinSize();
    }


    return returnValue;
}

void SkyBackgroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyToBin(pMem);
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyToBin(pMem);
    }


}

void SkyBackgroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyFromBin(pMem);
    }


}

void SkyBackgroundBase::executeSyncImpl(      SkyBackgroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
        _mfSkyColor.syncWith(pOther->_mfSkyColor);

    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
        _mfSkyAngle.syncWith(pOther->_mfSkyAngle);

    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
        _mfGroundColor.syncWith(pOther->_mfGroundColor);

    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
        _mfGroundAngle.syncWith(pOther->_mfGroundAngle);

    if(FieldBits::NoField != (SphereResFieldMask & whichField))
        _sfSphereRes.syncWith(pOther->_sfSphereRes);

    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
        _sfBackTexture.syncWith(pOther->_sfBackTexture);

    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
        _sfBottomTexture.syncWith(pOther->_sfBottomTexture);

    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
        _sfFrontTexture.syncWith(pOther->_sfFrontTexture);

    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
        _sfLeftTexture.syncWith(pOther->_sfLeftTexture);

    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
        _sfRightTexture.syncWith(pOther->_sfRightTexture);

    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
        _sfTopTexture.syncWith(pOther->_sfTopTexture);


}

