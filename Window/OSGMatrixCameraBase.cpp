/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MatrixCamera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILEMATRIXCAMERAINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGMatrixCameraBase.h"
#include "OSGMatrixCamera.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<MatrixCameraPtr>::_type("MatrixCameraPtr", "CameraPtr", true);

#if defined(__sgi)

#pragma instantiate SField<OSG::MatrixCameraPtr>::_fieldType
#pragma instantiate MField<OSG::MatrixCameraPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, OSG::MatrixCameraPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, OSG::MatrixCameraPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	MatrixCameraBase::ProjectionMatrixFieldMask = 
    (1 << MatrixCameraBase::ProjectionMatrixFieldId);

const OSG::BitVector	MatrixCameraBase::ModelviewMatrixFieldMask = 
    (1 << MatrixCameraBase::ModelviewMatrixFieldId);



char MatrixCameraBase::cvsid[] = "@(#)$Id: OSGMatrixCameraBase.cpp,v 1.1 2002/01/29 17:50:57 dirk Exp $";

/** \brief Group field description
 */

FieldDescription *MatrixCameraBase::_desc[] = 
{
    new FieldDescription(::SFMatrix::getClassType(), 
                     "ProjectionMatrix", 
                     ProjectionMatrixFieldId, ProjectionMatrixFieldMask,
                     false,
                     (FieldAccessMethod) &MatrixCameraBase::getSFProjectionMatrix),
    new FieldDescription(::SFMatrix::getClassType(), 
                     "ModelviewMatrix", 
                     ModelviewMatrixFieldId, ModelviewMatrixFieldMask,
                     false,
                     (FieldAccessMethod) &MatrixCameraBase::getSFModelviewMatrix)
};

/** \brief MatrixCamera type
 */

FieldContainerType MatrixCameraBase::_type(
    "MatrixCamera",
    "Camera",
    NULL,
    (PrototypeCreateF) &MatrixCameraBase::createEmpty,
    MatrixCamera::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(MatrixCameraBase, MatrixCameraPtr)

FieldContainerType &MatrixCameraBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &MatrixCameraBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr MatrixCameraBase::shallowCopy(void) const 
{ 
    MatrixCameraPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const MatrixCamera *>(this)); 

    return returnValue; 
}

UInt32 MatrixCameraBase::getContainerSize(void) const 
{ 
    return sizeof(MatrixCameraBase); 
}


void MatrixCameraBase::executeSync(OSG::FieldContainer &other,
                                    const OSG::BitVector &whichField)
{
    this->executeSyncImpl((MatrixCameraBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

MatrixCameraBase::MatrixCameraBase(void) :
	_sfProjectionMatrix	(), 
	_sfModelviewMatrix	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

MatrixCameraBase::MatrixCameraBase(const MatrixCameraBase &source) :
	_sfProjectionMatrix		(source._sfProjectionMatrix), 
	_sfModelviewMatrix		(source._sfModelviewMatrix), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

MatrixCameraBase::~MatrixCameraBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 MatrixCameraBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        returnValue += _sfProjectionMatrix.getBinSize();
    }

    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        returnValue += _sfModelviewMatrix.getBinSize();
    }


    return returnValue;
}

void MatrixCameraBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        _sfModelviewMatrix.copyToBin(pMem);
    }


}

void MatrixCameraBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        _sfModelviewMatrix.copyFromBin(pMem);
    }


}

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void MatrixCameraBase::executeSyncImpl(      MatrixCameraBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.syncWith(pOther->_sfProjectionMatrix);
    }

    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        _sfModelviewMatrix.syncWith(pOther->_sfModelviewMatrix);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

