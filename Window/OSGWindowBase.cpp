/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEWINDOWINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGWindowBase.h"
#include "OSGWindow.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<WindowPtr>::_type("WindowPtr", "AttachmentContainerPtr", true);

#if defined(__sgi)

#pragma instantiate SField<WindowPtr>::_fieldType
#pragma instantiate MField<WindowPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, WindowPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, WindowPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: OSGWindowBase.cpp,v 1.26 2002/02/05 20:38:31 dirk Exp $";
    static Char8 cvsid_hpp       [] = OSGWINDOWBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGWINDOWBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGWINDOWFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  WindowBase::WidthFieldMask = 
    (1 << WindowBase::WidthFieldId);

const OSG::BitVector  WindowBase::HeightFieldMask = 
    (1 << WindowBase::HeightFieldId);

const OSG::BitVector  WindowBase::PortFieldMask = 
    (1 << WindowBase::PortFieldId);

const OSG::BitVector  WindowBase::ResizePendingFieldMask = 
    (1 << WindowBase::ResizePendingFieldId);

const OSG::BitVector  WindowBase::GlObjectStatusFieldMask = 
    (1 << WindowBase::GlObjectStatusFieldId);

const OSG::BitVector  WindowBase::GlObjectInvalidateCounterFieldMask = 
    (1 << WindowBase::GlObjectInvalidateCounterFieldId);

const OSG::BitVector  WindowBase::GlObjectLastRefreshFieldMask = 
    (1 << WindowBase::GlObjectLastRefreshFieldId);

const OSG::BitVector  WindowBase::GlObjectLastReinitializeFieldMask = 
    (1 << WindowBase::GlObjectLastReinitializeFieldId);



// Field descriptions

/*! \var UInt16          WindowBase::_sfWidth
    
*/
/*! \var UInt16          WindowBase::_sfHeight
    
*/
/*! \var ViewportPtr     WindowBase::_mfPort
    
*/
/*! \var bool            WindowBase::_sfResizePending
    
*/
/*! \var UInt32          WindowBase::_mfGlObjectStatus
    The GL object's status in this window.
*/
/*! \var UInt32          WindowBase::_sfGlObjectInvalidateCounter
    Counter for GL object invalidations. Needed for multi-aspect updates.
*/
/*! \var UInt32          WindowBase::_mfGlObjectLastRefresh
    indicates the last refresh for the GL object
*/
/*! \var UInt32          WindowBase::_mfGlObjectLastReinitialize
    indicates the last reinit for the GL object
*/
//! Window description

FieldDescription *WindowBase::_desc[] = 
{
    new FieldDescription(SFUInt16::getClassType(), 
                     "width", 
                     WidthFieldId, WidthFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getSFWidth),
    new FieldDescription(SFUInt16::getClassType(), 
                     "height", 
                     HeightFieldId, HeightFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getSFHeight),
    new FieldDescription(MFViewportPtr::getClassType(), 
                     "port", 
                     PortFieldId, PortFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getMFPort),
    new FieldDescription(SFBool::getClassType(), 
                     "resizePending", 
                     ResizePendingFieldId, ResizePendingFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getSFResizePending),
    new FieldDescription(MFUInt32::getClassType(), 
                     "glObjectStatus", 
                     GlObjectStatusFieldId, GlObjectStatusFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getMFGlObjectStatus),
    new FieldDescription(SFUInt32::getClassType(), 
                     "glObjectInvalidateCounter", 
                     GlObjectInvalidateCounterFieldId, GlObjectInvalidateCounterFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getSFGlObjectInvalidateCounter),
    new FieldDescription(MFUInt32::getClassType(), 
                     "glObjectLastRefresh", 
                     GlObjectLastRefreshFieldId, GlObjectLastRefreshFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getMFGlObjectLastRefresh),
    new FieldDescription(MFUInt32::getClassType(), 
                     "glObjectLastReinitialize", 
                     GlObjectLastReinitializeFieldId, GlObjectLastReinitializeFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getMFGlObjectLastReinitialize)
};

//! Window type

FieldContainerType WindowBase::_type(
    "Window",
    "AttachmentContainer",
    NULL,
    NULL, 
    Window::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(WindowBase, WindowPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &WindowBase::getType(void) const 
{
    return _type;
} 


UInt32 WindowBase::getContainerSize(void) const 
{ 
    return sizeof(WindowBase); 
}


void WindowBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((WindowBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

WindowBase::WindowBase(void) :
    _sfWidth                  (), 
    _sfHeight                 (), 
    _mfPort                   (), 
    _sfResizePending          (), 
    _mfGlObjectStatus         (), 
    _sfGlObjectInvalidateCounter(UInt32(1)), 
    _mfGlObjectLastRefresh    (), 
    _mfGlObjectLastReinitialize(), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

WindowBase::WindowBase(const WindowBase &source) :
    _sfWidth                  (source._sfWidth                  ), 
    _sfHeight                 (source._sfHeight                 ), 
    _mfPort                   (source._mfPort                   ), 
    _sfResizePending          (source._sfResizePending          ), 
    _mfGlObjectStatus         (source._mfGlObjectStatus         ), 
    _sfGlObjectInvalidateCounter(source._sfGlObjectInvalidateCounter), 
    _mfGlObjectLastRefresh    (source._mfGlObjectLastRefresh    ), 
    _mfGlObjectLastReinitialize(source._mfGlObjectLastReinitialize), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

WindowBase::~WindowBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 WindowBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }

    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        returnValue += _mfPort.getBinSize();
    }

    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        returnValue += _sfResizePending.getBinSize();
    }

    if(FieldBits::NoField != (GlObjectStatusFieldMask & whichField))
    {
        returnValue += _mfGlObjectStatus.getBinSize();
    }

    if(FieldBits::NoField != (GlObjectInvalidateCounterFieldMask & whichField))
    {
        returnValue += _sfGlObjectInvalidateCounter.getBinSize();
    }

    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastRefresh.getBinSize();
    }

    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastReinitialize.getBinSize();
    }


    return returnValue;
}

void WindowBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _mfPort.copyToBin(pMem);
    }

    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        _sfResizePending.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectStatusFieldMask & whichField))
    {
        _mfGlObjectStatus.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectInvalidateCounterFieldMask & whichField))
    {
        _sfGlObjectInvalidateCounter.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        _mfGlObjectLastRefresh.copyToBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        _mfGlObjectLastReinitialize.copyToBin(pMem);
    }


}

void WindowBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _mfPort.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        _sfResizePending.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectStatusFieldMask & whichField))
    {
        _mfGlObjectStatus.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectInvalidateCounterFieldMask & whichField))
    {
        _sfGlObjectInvalidateCounter.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        _mfGlObjectLastRefresh.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        _mfGlObjectLastReinitialize.copyFromBin(pMem);
    }


}

void WindowBase::executeSyncImpl(      WindowBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pOther->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pOther->_sfHeight);

    if(FieldBits::NoField != (PortFieldMask & whichField))
        _mfPort.syncWith(pOther->_mfPort);

    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
        _sfResizePending.syncWith(pOther->_sfResizePending);

    if(FieldBits::NoField != (GlObjectStatusFieldMask & whichField))
        _mfGlObjectStatus.syncWith(pOther->_mfGlObjectStatus);

    if(FieldBits::NoField != (GlObjectInvalidateCounterFieldMask & whichField))
        _sfGlObjectInvalidateCounter.syncWith(pOther->_sfGlObjectInvalidateCounter);

    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
        _mfGlObjectLastRefresh.syncWith(pOther->_mfGlObjectLastRefresh);

    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
        _mfGlObjectLastReinitialize.syncWith(pOther->_mfGlObjectLastReinitialize);


}

