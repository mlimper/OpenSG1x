/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#ifdef OSG_STREAM_IN_STD_NAMESPACE
#include <iostream>
#else
#include <iostream.h>
#endif

#define OSG_COMPILEWINDOW
#define OSG_COMPILEWINDOWINST

#include "OSGWindowBase.h"
#include "OSGWindow.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<WindowPtr>::_fieldType
#pragma instantiate MField<WindowPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, WindowPtr, OSG_WINDOW_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, WindowPtr, OSG_WINDOW_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::UInt32		WindowBase::WidthFieldId;
const OSG::BitVector	WindowBase::WidthFieldMask;

const OSG::UInt32		WindowBase::HeightFieldId;
const OSG::BitVector	WindowBase::HeightFieldMask;

const OSG::UInt32		WindowBase::PortFieldId;
const OSG::BitVector	WindowBase::PortFieldMask;

const OSG::UInt32		WindowBase::ResizePendingFieldId;
const OSG::BitVector	WindowBase::ResizePendingFieldMask;

const OSG::UInt32		WindowBase::GlObjectFlagsFieldId;
const OSG::BitVector	WindowBase::GlObjectFlagsFieldMask;


const OSG::UInt32    	WindowBase::NextFieldId; 
const OSG::BitVector 	WindowBase::NextFieldMask;


char WindowBase::cvsid[] = "@(#)$Id: OSGWindowBase.cpp,v 1.4 2001/05/30 16:25:24 vossg Exp $";

/** \brief Group field description
 */

FieldDescription WindowBase::_desc[] = 
{
    FieldDescription(SFUInt16::getClassType(), 
                     "width", 
                     WidthFieldId, WidthFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getSFWidth),
    FieldDescription(SFUInt16::getClassType(), 
                     "height", 
                     HeightFieldId, HeightFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getSFHeight),
    FieldDescription(MFViewportPtr::getClassType(), 
                     "port", 
                     PortFieldId, PortFieldMask,
                     false,
                     (FieldAccessMethod) &WindowBase::getMFPort),
    FieldDescription(SFBool::getClassType(), 
                     "resizePending", 
                     ResizePendingFieldId, ResizePendingFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getSFResizePending),
    FieldDescription(MFUInt32::getClassType(), 
                     "glObjectFlags", 
                     GlObjectFlagsFieldId, GlObjectFlagsFieldMask,
                     true,
                     (FieldAccessMethod) &WindowBase::getMFGlObjectFlags)
};

/** \brief Window type
 */

FieldContainerType WindowBase::_type(
    "Window",
    "FieldContainer",
    NULL,
    NULL, 
    Window::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(WindowBase, WindowPtr)

FieldContainerType &WindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &WindowBase::getType(void) const 
{
    return _type;
} 

UInt32 WindowBase::getSize(void) const 
{ 
    return sizeof(WindowBase); 
}


void WindowBase::executeSync(FieldContainer &other,
                                    BitVector       whichField)
{
    this->executeSyncImpl((WindowBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

WindowBase::WindowBase(void) :
	_width	(), 
	_height	(), 
	_port	(), 
	_resizePending	(), 
	_glObjectFlags	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

WindowBase::WindowBase(const WindowBase &source) :
	_width		(source._width), 
	_height		(source._height), 
	_port		(source._port), 
	_resizePending		(source._resizePending), 
	_glObjectFlags		(source._glObjectFlags), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

WindowBase::~WindowBase(void)
{
}

/*------------------------------ access -----------------------------------*/

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void WindowBase::executeSyncImpl(WindowBase *pOther,
                                        BitVector          whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _width.syncWith(pOther->_width);
    }

    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _height.syncWith(pOther->_height);
    }

    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _port.syncWith(pOther->_port);
    }

    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        _resizePending.syncWith(pOther->_resizePending);
    }

    if(FieldBits::NoField != (GlObjectFlagsFieldMask & whichField))
    {
        _glObjectFlags.syncWith(pOther->_glObjectFlags);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

