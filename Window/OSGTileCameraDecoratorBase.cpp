/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TileCameraDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILETILECAMERADECORATORINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGTileCameraDecoratorBase.h"
#include "OSGTileCameraDecorator.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate SField<TileCameraDecoratorPtr>::_fieldType
#pragma instantiate MField<TileCameraDecoratorPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, TileCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, TileCameraDecoratorPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	TileCameraDecoratorBase::LeftFieldMask = 
    (1 << TileCameraDecoratorBase::LeftFieldId);

const OSG::BitVector	TileCameraDecoratorBase::RightFieldMask = 
    (1 << TileCameraDecoratorBase::RightFieldId);

const OSG::BitVector	TileCameraDecoratorBase::BottomFieldMask = 
    (1 << TileCameraDecoratorBase::BottomFieldId);

const OSG::BitVector	TileCameraDecoratorBase::TopFieldMask = 
    (1 << TileCameraDecoratorBase::TopFieldId);



char TileCameraDecoratorBase::cvsid[] = "@(#)$Id: OSGTileCameraDecoratorBase.cpp,v 1.6 2001/07/31 13:39:05 vossg Exp $";

/** \brief Group field description
 */

FieldDescription *TileCameraDecoratorBase::_desc[] = 
{
    new FieldDescription(SFReal32::getClassType(), 
                     "left", 
                     LeftFieldId, LeftFieldMask,
                     false,
                     (FieldAccessMethod) &TileCameraDecoratorBase::getSFLeft),
    new FieldDescription(SFReal32::getClassType(), 
                     "right", 
                     RightFieldId, RightFieldMask,
                     false,
                     (FieldAccessMethod) &TileCameraDecoratorBase::getSFRight),
    new FieldDescription(SFReal32::getClassType(), 
                     "bottom", 
                     BottomFieldId, BottomFieldMask,
                     false,
                     (FieldAccessMethod) &TileCameraDecoratorBase::getSFBottom),
    new FieldDescription(SFReal32::getClassType(), 
                     "top", 
                     TopFieldId, TopFieldMask,
                     true,
                     (FieldAccessMethod) &TileCameraDecoratorBase::getSFTop)
};

/** \brief TileCameraDecorator type
 */

FieldContainerType TileCameraDecoratorBase::_type(
    "TileCameraDecorator",
    "CameraDecorator",
    NULL,
    (PrototypeCreateF) &TileCameraDecoratorBase::createEmpty,
    TileCameraDecorator::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(TileCameraDecoratorBase, TileCameraDecoratorPtr)

FieldContainerType &TileCameraDecoratorBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &TileCameraDecoratorBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr TileCameraDecoratorBase::shallowCopy(void) const 
{ 
    TileCameraDecoratorPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const TileCameraDecorator *>(this)); 

    return returnValue; 
}

UInt32 TileCameraDecoratorBase::getContainerSize(void) const 
{ 
    return sizeof(TileCameraDecoratorBase); 
}


void TileCameraDecoratorBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((TileCameraDecoratorBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

TileCameraDecoratorBase::TileCameraDecoratorBase(void) :
	_sfLeft	(Real32(0)), 
	_sfRight	(Real32(1)), 
	_sfBottom	(Real32(0)), 
	_sfTop	(Real32(1)), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

TileCameraDecoratorBase::TileCameraDecoratorBase(const TileCameraDecoratorBase &source) :
	_sfLeft		(source._sfLeft), 
	_sfRight		(source._sfRight), 
	_sfBottom		(source._sfBottom), 
	_sfTop		(source._sfTop), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

TileCameraDecoratorBase::~TileCameraDecoratorBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 TileCameraDecoratorBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        returnValue += _sfLeft.getBinSize();
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        returnValue += _sfRight.getBinSize();
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        returnValue += _sfBottom.getBinSize();
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        returnValue += _sfTop.getBinSize();
    }


    return returnValue;
}

MemoryHandle TileCameraDecoratorBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        pMem = _sfLeft.copyToBin(pMem);
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        pMem = _sfRight.copyToBin(pMem);
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        pMem = _sfBottom.copyToBin(pMem);
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        pMem = _sfTop.copyToBin(pMem);
    }


    return pMem;
}

MemoryHandle TileCameraDecoratorBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        pMem = _sfLeft.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        pMem = _sfRight.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        pMem = _sfBottom.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        pMem = _sfTop.copyFromBin(pMem);
    }


    return pMem;
}

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void TileCameraDecoratorBase::executeSyncImpl(      TileCameraDecoratorBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _sfLeft.syncWith(pOther->_sfLeft);
    }

    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        _sfRight.syncWith(pOther->_sfRight);
    }

    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _sfBottom.syncWith(pOther->_sfBottom);
    }

    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        _sfTop.syncWith(pOther->_sfTop);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

