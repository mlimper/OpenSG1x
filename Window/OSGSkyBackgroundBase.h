/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSKYBACKGROUNDBASE_H_
#define _OSGSKYBACKGROUNDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGConfig.h>
#include <OSGSystemDef.h>

#include <OSGBaseTypes.h>
#include <OSGFieldDescription.h>
#include <OSGFieldContainer.h>

#include <OSGBackground.h> // Parent

#include <OSGColor3fFields.h> // SkyColor type
#include <OSGReal32Fields.h> // SkyAngle type
#include <OSGColor3fFields.h> // GroundColor type
#include <OSGReal32Fields.h> // GroundAngle type
#include <OSGUInt32Fields.h> // SphereRes type
#include <OSGTextureChunkFields.h> // BackTexture type
#include <OSGTextureChunkFields.h> // BottomTexture type
#include <OSGTextureChunkFields.h> // FrontTexture type
#include <OSGTextureChunkFields.h> // LeftTexture type
#include <OSGTextureChunkFields.h> // RightTexture type
#include <OSGTextureChunkFields.h> // TopTexture type

#include <OSGSkyBackgroundFields.h>

OSG_BEGIN_NAMESPACE

class SkyBackground;
class BinaryDataHandler;

//! \brief SkyBackground Base Class.

class OSG_SYSTEMLIB_DLLMAPPING SkyBackgroundBase : public Background
{
  private:

    typedef Background Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    enum
    {
        SkyColorFieldId      = Inherited::NextFieldId,
        SkyAngleFieldId      = SkyColorFieldId      + 1,
        GroundColorFieldId   = SkyAngleFieldId      + 1,
        GroundAngleFieldId   = GroundColorFieldId   + 1,
        SphereResFieldId     = GroundAngleFieldId   + 1,
        BackTextureFieldId   = SphereResFieldId     + 1,
        BottomTextureFieldId = BackTextureFieldId   + 1,
        FrontTextureFieldId  = BottomTextureFieldId + 1,
        LeftTextureFieldId   = FrontTextureFieldId  + 1,
        RightTextureFieldId  = LeftTextureFieldId   + 1,
        TopTextureFieldId    = RightTextureFieldId  + 1,
        NextFieldId          = TopTextureFieldId    + 1
    };

    static const osg::BitVector SkyColorFieldMask;
    static const osg::BitVector SkyAngleFieldMask;
    static const osg::BitVector GroundColorFieldMask;
    static const osg::BitVector GroundAngleFieldMask;
    static const osg::BitVector SphereResFieldMask;
    static const osg::BitVector BackTextureFieldMask;
    static const osg::BitVector BottomTextureFieldMask;
    static const osg::BitVector FrontTextureFieldMask;
    static const osg::BitVector LeftTextureFieldMask;
    static const osg::BitVector RightTextureFieldMask;
    static const osg::BitVector TopTextureFieldMask;


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Get                                    */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

           MFColor3f           *getMFSkyColor       (void);
           MFReal32            *getMFSkyAngle       (void);
           MFColor3f           *getMFGroundColor    (void);
           MFReal32            *getMFGroundAngle    (void);
           SFUInt32            *getSFSphereRes      (void);
           SFTextureChunkPtr   *getSFBackTexture    (void);
           SFTextureChunkPtr   *getSFBottomTexture  (void);
           SFTextureChunkPtr   *getSFFrontTexture   (void);
           SFTextureChunkPtr   *getSFLeftTexture    (void);
           SFTextureChunkPtr   *getSFRightTexture   (void);
           SFTextureChunkPtr   *getSFTopTexture     (void);

           UInt32              &getSphereRes      (void);
     const UInt32              &getSphereRes      (void) const;
           TextureChunkPtr     &getBackTexture    (void);
     const TextureChunkPtr     &getBackTexture    (void) const;
           TextureChunkPtr     &getBottomTexture  (void);
     const TextureChunkPtr     &getBottomTexture  (void) const;
           TextureChunkPtr     &getFrontTexture   (void);
     const TextureChunkPtr     &getFrontTexture   (void) const;
           TextureChunkPtr     &getLeftTexture    (void);
     const TextureChunkPtr     &getLeftTexture    (void) const;
           TextureChunkPtr     &getRightTexture   (void);
     const TextureChunkPtr     &getRightTexture   (void) const;
           TextureChunkPtr     &getTopTexture     (void);
     const TextureChunkPtr     &getTopTexture     (void) const;
           Color3f             &getSkyColor       (UInt32 index);
           MFColor3f           &getSkyColor       (void);
     const MFColor3f           &getSkyColor       (void) const;
           Real32              &getSkyAngle       (UInt32 index);
           MFReal32            &getSkyAngle       (void);
     const MFReal32            &getSkyAngle       (void) const;
           Color3f             &getGroundColor    (UInt32 index);
           MFColor3f           &getGroundColor    (void);
     const MFColor3f           &getGroundColor    (void) const;
           Real32              &getGroundAngle    (UInt32 index);
           MFReal32            &getGroundAngle    (void);
     const MFReal32            &getGroundAngle    (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setSphereRes      ( const UInt32 &value );
     void setBackTexture    ( const TextureChunkPtr &value );
     void setBottomTexture  ( const TextureChunkPtr &value );
     void setFrontTexture   ( const TextureChunkPtr &value );
     void setLeftTexture    ( const TextureChunkPtr &value );
     void setRightTexture   ( const TextureChunkPtr &value );
     void setTopTexture     ( const TextureChunkPtr &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SkyBackgroundPtr      create          (void); 
    static  SkyBackgroundPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFColor3f           _mfSkyColor;
    MFReal32            _mfSkyAngle;
    MFColor3f           _mfGroundColor;
    MFReal32            _mfGroundAngle;
    SFUInt32            _sfSphereRes;
    SFTextureChunkPtr   _sfBackTexture;
    SFTextureChunkPtr   _sfBottomTexture;
    SFTextureChunkPtr   _sfFrontTexture;
    SFTextureChunkPtr   _sfLeftTexture;
    SFTextureChunkPtr   _sfRightTexture;
    SFTextureChunkPtr   _sfTopTexture;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SkyBackgroundBase(void);
    SkyBackgroundBase(const SkyBackgroundBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SkyBackgroundBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    void executeSyncImpl(      SkyBackgroundBase *pOther,
                         const BitVector         &whichField);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SkyBackgroundBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef SkyBackgroundBase *SkyBackgroundBaseP;

OSG_END_NAMESPACE

#define OSGSKYBACKGROUNDBASE_HEADER_CVSID "@(#)$Id: OSGSkyBackgroundBase.h,v 1.3 2002/03/25 01:26:00 vossg Exp $"

#endif /* _OSGSKYBACKGROUNDBASE_H_ */
