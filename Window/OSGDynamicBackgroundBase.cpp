/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DynamicBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDYNAMICBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGDynamicBackgroundBase.h"
#include "OSGDynamicBackground.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<DynamicBackgroundPtr>::_type("DynamicBackgroundPtr", "BackgroundPtr", true);

#if defined(__sgi)

#pragma instantiate MField<DynamicBackgroundPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(MField, DynamicBackgroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

namespace
{
    static char cvsid_cpp       [] = "@(#)$Id: OSGDynamicBackgroundBase.cpp,v 1.21 2001/11/01 05:55:09 vossg Exp $";
    static char cvsid_hpp       [] = OSGDYNAMICBACKGROUNDBASE_HEADER_CVSID;
    static char cvsid_inl       [] = OSGDYNAMICBACKGROUNDBASE_INLINE_CVSID;

    static char cvsid_fields_hpp[] = OSGDYNAMICBACKGROUNDFIELDS_HEADER_CVSID;
}

#ifdef __sgi
#pragma reset woff 1174
#endif

const OSG::BitVector  DynamicBackgroundBase::ColorFieldMask = 
    (1 << DynamicBackgroundBase::ColorFieldId);

const OSG::BitVector  DynamicBackgroundBase::AngleFieldMask = 
    (1 << DynamicBackgroundBase::AngleFieldId);



// Field descriptions

/*! \var Color3f         DynamicBackgroundBase::_mfColor
    The colors of the sphere's rings.
*/
/*! \var Real32          DynamicBackgroundBase::_mfAngle
    The angles for the colors in degrees, from 0 (top) to 180 (bottom).
*/
//! DynamicBackground description

FieldDescription *DynamicBackgroundBase::_desc[] = 
{
    new FieldDescription(MFColor3f::getClassType(), 
                     "color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &DynamicBackgroundBase::getMFColor),
    new FieldDescription(MFReal32::getClassType(), 
                     "angle", 
                     AngleFieldId, AngleFieldMask,
                     false,
                     (FieldAccessMethod) &DynamicBackgroundBase::getMFAngle)
};

//! DynamicBackground type

FieldContainerType DynamicBackgroundBase::_type(
    "DynamicBackground",
    "Background",
    NULL,
    (PrototypeCreateF) &DynamicBackgroundBase::createEmpty,
    DynamicBackground::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(DynamicBackgroundBase, DynamicBackgroundPtr)

/*------------------------------ get -----------------------------------*/

FieldContainerType &DynamicBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &DynamicBackgroundBase::getType(void) const 
{
    return _type;
} 


FieldContainerPtr DynamicBackgroundBase::shallowCopy(void) const 
{ 
    DynamicBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const DynamicBackground *>(this)); 

    return returnValue; 
}

UInt32 DynamicBackgroundBase::getContainerSize(void) const 
{ 
    return sizeof(DynamicBackgroundBase); 
}


void DynamicBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((DynamicBackgroundBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

DynamicBackgroundBase::DynamicBackgroundBase(void) :
    _mfColor                  (), 
    _mfAngle                  (), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

DynamicBackgroundBase::DynamicBackgroundBase(const DynamicBackgroundBase &source) :
    _mfColor                  (source._mfColor                  ), 
    _mfAngle                  (source._mfAngle                  ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

DynamicBackgroundBase::~DynamicBackgroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 DynamicBackgroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _mfColor.getBinSize();
    }

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        returnValue += _mfAngle.getBinSize();
    }


    return returnValue;
}

void DynamicBackgroundBase::copyToBin(      BinaryDataHandler &pMem,
                                  const BitVector         &whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        _mfAngle.copyToBin(pMem);
    }


}

void DynamicBackgroundBase::copyFromBin(      BinaryDataHandler &pMem,
                                    const BitVector    &whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        _mfAngle.copyFromBin(pMem);
    }


}

void DynamicBackgroundBase::executeSyncImpl(      DynamicBackgroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _mfColor.syncWith(pOther->_mfColor);

    if(FieldBits::NoField != (AngleFieldMask & whichField))
        _mfAngle.syncWith(pOther->_mfAngle);


}

