/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GradientBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------


#define OSG_COMPILESYSTEMLIB
#define OSG_COMPILEGRADIENTBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGGradientBackgroundBase.h"
#include "OSGGradientBackground.h"


OSG_USING_NAMESPACE

/***************************************************************************\
 *                               Types                                     *
\***************************************************************************/

OSG_BEGIN_NAMESPACE

#if defined(__sgi)

#pragma instantiate MField<GradientBackgroundPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(MField, GradientBackgroundPtr, OSG_SYSTEMLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

/***************************************************************************\
 *                           Class variables                               *
\***************************************************************************/

const OSG::BitVector	GradientBackgroundBase::ColorFieldMask = 
    (1 << GradientBackgroundBase::ColorFieldId);

const OSG::BitVector	GradientBackgroundBase::PositionFieldMask = 
    (1 << GradientBackgroundBase::PositionFieldId);



char GradientBackgroundBase::cvsid[] = "@(#)$Id: OSGGradientBackgroundBase.cpp,v 1.7 2001/07/09 07:50:58 vossg Exp $";

/** \brief Group field description
 */

FieldDescription GradientBackgroundBase::_desc[] = 
{
    FieldDescription(MFColor3f::getClassType(), 
                     "mfColor", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &GradientBackgroundBase::getMFColor),
    FieldDescription(MFReal32::getClassType(), 
                     "mfPosition", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     (FieldAccessMethod) &GradientBackgroundBase::getMFPosition)
};

/** \brief GradientBackground type
 */

FieldContainerType GradientBackgroundBase::_type(
    "GradientBackground",
    "Background",
    NULL,
    (PrototypeCreateF) &GradientBackgroundBase::createEmpty,
    GradientBackground::initMethod,
    _desc,
    sizeof(_desc));


/***************************************************************************\
 *                           Class methods                                 *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

/***************************************************************************\
 *                           Instance methods                              *
\***************************************************************************/

/*-------------------------------------------------------------------------*\
 -  public                                                                 -
\*-------------------------------------------------------------------------*/

//OSG_FIELD_CONTAINER_DEF(GradientBackgroundBase, GradientBackgroundPtr)

FieldContainerType &GradientBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GradientBackgroundBase::getType(void) const 
{
    return _type;
} 

FieldContainerPtr GradientBackgroundBase::shallowCopy(void) const 
{ 
    GradientBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GradientBackground *>(this)); 

    return returnValue; 
}

UInt32 GradientBackgroundBase::getSize(void) const 
{ 
    return sizeof(GradientBackgroundBase); 
}


void GradientBackgroundBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((GradientBackgroundBase *) &other, whichField);
}

/*------------- constructors & destructors --------------------------------*/

/** \brief Constructor
 */

GradientBackgroundBase::GradientBackgroundBase(void) :
	_mfColor	(), 
	_mfPosition	(), 
	Inherited() 
{
}

/** \brief Copy Constructor
 */

GradientBackgroundBase::GradientBackgroundBase(const GradientBackgroundBase &source) :
	_mfColor		(source._mfColor), 
	_mfPosition		(source._mfPosition), 
	Inherited        (source)
{
}

/** \brief Destructor
 */

GradientBackgroundBase::~GradientBackgroundBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 GradientBackgroundBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _mfColor.getBinSize();
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _mfPosition.getBinSize();
    }


    return returnValue;
}

MemoryHandle GradientBackgroundBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        pMem = _mfColor.copyToBin(pMem);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        pMem = _mfPosition.copyToBin(pMem);
    }


    return pMem;
}

MemoryHandle GradientBackgroundBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        pMem = _mfColor.copyFromBin(pMem);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        pMem = _mfPosition.copyFromBin(pMem);
    }


    return pMem;
}

/*------------------------------- dump ----------------------------------*/

/*-------------------------------------------------------------------------*\
 -  protected                                                              -
\*-------------------------------------------------------------------------*/


void GradientBackgroundBase::executeSyncImpl(      GradientBackgroundBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.syncWith(pOther->_mfColor);
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _mfPosition.syncWith(pOther->_mfPosition);
    }


}

/*-------------------------------------------------------------------------*\
 -  private                                                                -
\*-------------------------------------------------------------------------*/

