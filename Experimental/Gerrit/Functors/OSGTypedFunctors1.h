/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2002 by the OpenSG Forum                        *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

#ifndef _OSGTYPEDFUNCTORS1_H_
#define _OSGTYPEDFUNCTORS1_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OSGTypedFunctorBase.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief Typed1Traits
 */

template <class RetT, 
          class CallArgT> 
struct TypedTraits1
{
    typedef typename CallArgT::ObjType ObjType;
    typedef typename CallArgT::ArgType ArgType;

    typedef typename
        FunctorBuildFuncType1<RetT, CallArgT>::FuncFunctionType FunctionF;

    typedef typename
        FunctorBuildFuncType1<RetT, CallArgT>::ObjFuncType      ObjMethodF;

    static void callObjectMethodVoid(UInt8 *pData2, ArgType arg1)
    {
        ObjMethodF  pFunc = *((ObjMethodF *) pData2);
        ObjType    *pObj  = CallArgT::getPtr(arg1); 

        (pObj->*pFunc)();
    }

    static RetT callObjectMethod(UInt8 *pData2, ArgType arg1)
    {
        ObjMethodF  pFunc = *((ObjMethodF *) pData2);
        ObjType    *pObj  = CallArgT::getPtr(arg1); 

        return (pObj->*pFunc)();
    }
};

/*! \ingroup BaseTypedFunctors
 *  \brief Typed1Traits
 */

template <class RetT, 
          class StoredObjCallArgT,
          class ArgsT> 
struct TypedSOTraits1
{
    typedef typename StoredObjCallArgT::ObjType  ObjType;

    typedef typename ArgsT::ArgType              ArgType;

    typedef typename ObjType                    *SetObjectT;
    typedef typename ObjType                    *StoredObjectT;

    typedef typename
        FunctorBuildObjFuncType1<RetT, 
                                 StoredObjCallArgT,
                                 ArgsT            >::ObjFuncType ObjMethodF;


    static void setCalledObject(Char8 *pData, SetObjectT obj)
    {
        *((ObjType **) pData) = obj;
    }

    static void callObjectMethodVoid(UInt8   *pData1, 
                                     UInt8   *pData2, 
                                     ArgType  arg1  )
    {
        StoredObjectT pObj  = *((StoredObjectT *) pData1);

        ObjMethodF    pFunc = *((ObjMethodF     *) pData2);
        
        (pObj->*pFunc)(arg1);
    }

    static RetT callObjectMethod(UInt8   *pData1, 
                                 UInt8   *pData2, 
                                 ArgType  arg1  )
    {
        StoredObjectT pObj  = *((StoredObjectT *) pData1);

        ObjMethodF    pFunc = *((ObjMethodF     *) pData2);
        
        return (pObj->*pFunc)(arg1);
    }
};


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief TypedFunctor1Base
 */

template <class RetT,
          class CallArgT,
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedFunctor1Base : public TypedFunctorBase<SizeTraitsT>
{
  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedFunctorBase<SizeTraitsT> Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedFunctor1Base(void);
    TypedFunctor1Base(const TypedFunctor1Base &source);
    virtual ~TypedFunctor1Base(void); 

    /*------------------------- your_category -------------------------------*/

    virtual RetT call(CallArgType obj);

    void operator =(const TypedFunctor1Base &source);
};



//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief Brief TypedFunctor1Base
 */

template <class CallArgT, class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedVoidFunctor1Base : public TypedFunctorBase<SizeTraitsT>
{
  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedFunctorBase<SizeTraitsT> Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedVoidFunctor1Base(void);
    TypedVoidFunctor1Base(const TypedVoidFunctor1Base &source);
    virtual ~TypedVoidFunctor1Base(void); 

    /*------------------------- your_category -------------------------------*/

    virtual void call(CallArgType obj);

    void operator =(const TypedVoidFunctor1Base &source);
};

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief Brief TypedFunctionFunctor1
 */

template <class RetT, 
          class CallArgT, 
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedFunctionFunctor1 : 
    public TypedFunctionFunctorBase<TypedFunctor1Base<RetT,  
                                                      CallArgT,
                                                      SizeTraitsT>,
                                    TypedTraits1<     RetT, 
                                                      CallArgT> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef 
        TypedFunctionFunctorBase<TypedFunctor1Base<RetT, 
                                                   CallArgT,
                                                   SizeTraitsT>,
                                 TypedTraits1     <RetT, 
                                                   CallArgT>  > Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedFunctionFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedFunctionFunctor1(void);
    TypedFunctionFunctor1(const TypedFunctionFunctor1 &source);
    
    virtual ~TypedFunctionFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual RetT call(CallArgType pObj);
};




//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief Brief TypedFunctionFunctor1
 */

template <class CallArgT, 
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedFunctionVoidFunctor1 : 
    public TypedFunctionFunctorBase<TypedVoidFunctor1Base<CallArgT,
                                                          SizeTraitsT>,
                                    TypedTraits1         <void, 
                                                          CallArgT> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef 
        TypedFunctionFunctorBase<TypedVoidFunctor1Base<CallArgT,
                                                       SizeTraitsT>,
                                 TypedTraits1         <void, 
                                                       CallArgT>  > Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedFunctionVoidFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedFunctionVoidFunctor1(void);
    TypedFunctionVoidFunctor1(const TypedFunctionVoidFunctor1 &source);
    
    virtual ~TypedFunctionVoidFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual void call(CallArgType pObj);
};


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseAnonFunctors
 *  \brief Brief AnonObjectFunctor1
 */

template <class RetT, 
          class CallArgT,
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedObjectFunctor1 : 
    public TypedObjectFunctorBase<TypedFunctor1Base<RetT, 
                                                    CallArgT,
                                                    SizeTraitsT>,
                                   TypedTraits1<    RetT, 
                                                    CallArgT> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedTraits1<RetT, CallArgT> TypeTraits;

    typedef 
        TypedObjectFunctorBase<
            TypedFunctor1Base<RetT, 
                              CallArgT,
                              SizeTraitsT>,
            TypedTraits1<     RetT, 
                              CallArgT   > > Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedObjectFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedObjectFunctor1(void);
    TypedObjectFunctor1(const TypedObjectFunctor1 &source);
    
    virtual ~TypedObjectFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual RetT call(CallArgType pObj);
};




//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseAnonFunctors
 *  \brief Brief AnonObjectFunctor1
 */

template <class CallArgT, 
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedObjectVoidFunctor1 : 
    public TypedObjectFunctorBase<TypedVoidFunctor1Base<CallArgT,
                                                        SizeTraitsT>,
                                  TypedTraits1         <void, 
                                                        CallArgT> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename CallArgT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedTraits1<void, CallArgT> TypeTraits;

    typedef 
        TypedObjectFunctorBase<
            TypedVoidFunctor1Base<CallArgT,
                                  SizeTraitsT>,
            TypedTraits1         <void, 
                                  CallArgT> > Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedObjectVoidFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedObjectVoidFunctor1(void);
    TypedObjectVoidFunctor1(const TypedObjectVoidFunctor1 &source);
    
    virtual ~TypedObjectVoidFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual void call(CallArgType obj);
};


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseTypedFunctors
 *  \brief TypedStoredObjectFunctor1
 */

template <class RetT, 
          class StoredObjectT,
          class ArgsT,
          class SizeTraitsT = DefaultFunctorSizeTraits>
class TypedStoredObjectFunctor1 : 
    public TypedStoredObjectFunctorBase<
        TypedFunctor1Base<RetT, 
                          ArgsT,
                          SizeTraitsT>,
        TypedSOTraits1   <RetT, 
                          StoredObjectT,
                          ArgsT::ArgsC> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename ArgsT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedSOTraits1<RetT, StoredObjectT, ArgsT::ArgsC> TypeTraits;

    typedef 
        TypedStoredObjectFunctorBase<
            TypedFunctor1Base<RetT, 
                              ArgsT,
                              SizeTraitsT>,
            TypedSOTraits1   <RetT, 
                              StoredObjectT,
                              ArgsT::ArgsC> >Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedStoredObjectFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedStoredObjectFunctor1(void);
    TypedStoredObjectFunctor1(const TypedStoredObjectFunctor1 &source);
    
    virtual ~TypedStoredObjectFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual RetT call(CallArgType obj);
};


//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! \ingroup BaseAnonFunctors
 *  \brief AnonStoredObjectFunctor1
 */

template <class StoredObjectT, 
          class ArgsT,
          class SizeTraitsT  = DefaultFunctorSizeTraits>
class TypedStoredObjectVoidFunctor1 : 
    public TypedStoredObjectFunctorBase<TypedVoidFunctor1Base<ArgsT,
                                                              SizeTraitsT>,
                                        TypedSOTraits1       <void, 
                                                              StoredObjectT,
                                                              ArgsT::ArgsC> >
{
  public:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef typename ArgsT::ArgType CallArgType;

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    typedef TypedSOTraits1<void, StoredObjectT, ArgsT::ArgsC> TypeTraits;

    typedef 
        TypedStoredObjectFunctorBase<
            TypedVoidFunctor1Base<ArgsT,
                                  SizeTraitsT>,
            TypedSOTraits1       <void, 
                                  StoredObjectT,
                                  ArgsT::ArgsC> >Inherited;

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    void operator =(const TypedStoredObjectVoidFunctor1 &source);

  public :

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    TypedStoredObjectVoidFunctor1(void);
    TypedStoredObjectVoidFunctor1(const TypedStoredObjectVoidFunctor1 &source);
    
    virtual ~TypedStoredObjectVoidFunctor1(void); 

    /*------------------------- your_category -------------------------------*/

    virtual void call(CallArgType pObj);
};

OSG_END_NAMESPACE

#include <OSGTypedFunctors1.inl>

#endif /* _OSGANONFUNCTORS1_H_ */





