#define yy_create_buffer fhs__create_buffer
#define yy_delete_buffer fhs__delete_buffer
#define yy_scan_buffer fhs__scan_buffer
#define yy_scan_string fhs__scan_string
#define yy_scan_bytes fhs__scan_bytes
#define yy_flex_debug fhs__flex_debug
#define yy_init_buffer fhs__init_buffer
#define yy_flush_buffer fhs__flush_buffer
#define yy_load_buffer_state fhs__load_buffer_state
#define yy_switch_to_buffer fhs__switch_to_buffer
#define yyin fhs_in
#define yyleng fhs_leng
#define yylex fhs_lex
#define yyout fhs_out
#define yyrestart fhs_restart
#define yytext fhs_text
#define yylineno fhs_lineno
#define yywrap fhs_wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, fhs_text_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;
extern char yytext[];


static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	fhs_text_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + yy_more_offset >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[yy_more_offset], fhs_text_ptr, yyleng + 1 ); \
	yyleng += yy_more_offset; \
	yy_prev_more_offset = yy_more_offset; \
	yy_more_offset = 0; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 323
#define YY_END_OF_BUFFER 324
static yyconst short int yy_acclist[1289] =
    {   0,
        6,    6,  324,  323,    1,  323,    2,  323,  322,  323,
      323,    3,  322,  323,  322,  323,  109,  323,  110,  323,
      323,  106,  323,  322,  323,  322,  323,  320,  323,  322,
      323,  322,  323,  322,  323,  322,  323,  322,  323,  322,
      323,  322,  323,  322,  323,  322,  323,  322,  323,  322,
      323,  322,  323,  322,  323,  322,  323,  322,  323,  322,
      323,  322,  323,  322,  323,  322,  323,  322,  323,  322,
      323,  322,  323,  322,  323,  107,  323,  108,  323,    6,
      323,    8,  323,    7,  323,    1,  322,  319,    3,    3,
      322,   70,  322,  320,  320,  322,    5,    4,  322,  320,

      320,  321,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  112,  322,  322,  322,  322,  322,
      322,  322,  317,  322,  322,  322,  322,  322,  322,  322,
      322,  111,  322,  322,  322,  322,  322,  117,  322,   99,
      322,  322,  322,  322,  276,  322,  322,  280,  322,  281,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  113,
      322,  322,  322,  322,  322,  322,  322,  116,  322,  322,
      322,  322,  322,  118,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  114,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,    6,    7,

        7,    9,  319,  320,  321,  322,  322,    4,    4,  322,
      320,  320,  322,  322,  304,  322,  322,  322,  322,  322,
      322,  322,  322,  322,   69,  322,  322,  318,  322,  322,
      120,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,   82,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      125,  322,  322,  322,  127,  322,  322,  322,  285,  322,
      322,  128,  322,  322,  322,  322,  322,  322,  322,   62,
      322,   18,  322,  313,  322,  322,  322,  322,  294,  322,
      322,  322,  322,  322,  322,  322,  122,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  287,  322,  322,  322,  322,  322,  322,
      322,   80,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  115,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  123,  322,  322,  322,  322,  322,  119,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  320,  322,  322,  322,  322,  322,  322,  322,
      322,  105,  322,  322,   97,  322,  322,  322,  286,  322,
      322,  146,  322,  322,  147,  322,  322,  322,  322,  130,
      322,  322,  322,  322,   66,  322,  322,  322,  322,  131,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,   95,  322,  322,   11,  322,  322,   72,
      322,   41,  322,  322,  312,  322,  162,  322,  322,  163,
      322,  322,  322,  170,  322,  322,  176,  322,  322,  129,
      322,  322,  171,  322,  322,  168,  322,  322,  322,  322,
      322,   56,  322,  322,  322,  322,  322,   73,  322,  322,
       94,  322,  322,  322,  322,   12,  322,  138,  322,  322,
      322,  322,  154,  322,  322,  160,  322,  322,  322,  322,
      322,  144,  322,  322,  322,  322,  322,  322,  322,  291,
      322,  322,  322,  322,  322,   37,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  124,  322,  322,  322,  322,  139,
      322,  322,  322,   74,  322,  322,   36,  322,  322,  322,
      322,   68,  322,  322,  155,  322,  322,  152,  322,  322,
      322,  136,  322,  322,  322,  322,  322,  322,  322,  322,
       53,  322,   71,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  282,  322,  322,  322,  322,  322,
      302,  322,  322,  322,  206,  148,  322,  202,  310,  322,
      322,  322,  322,  194,  322,  182,  274,  322,  322,  132,
      322,  322,  190,  178,  121,  322,  322,  322,  322,  322,

      322,  322,  301,  322,  322,   91,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  218,  164,  322,  214,
      126,  322,  322,   19,  322,  322,  222,  322,  177,  322,
      224,  322,  322,  172,  322,  322,  169,  322,  216,  322,
      220,  322,  322,  322,  322,   20,  322,  322,   58,  322,
      322,  322,  322,  322,  322,  322,  322,   10,  322,  322,
      322,  198,  322,  186,  322,  322,  322,  210,  322,  161,
      322,  212,  322,  322,  322,  145,  322,  188,  322,  200,
      322,  322,   40,  322,  322,  322,  322,  322,  322,  322,
       93,  322,  322,   63,  322,   92,  322,   52,  322,  322,

      322,  322,  322,  322,  322,   87,  322,  322,  322,  322,
      322,  322,  322,  322,   79,  322,  140,  322,  322,  322,
      156,  322,  322,  153,  322,  322,  322,  137,  322,  192,
      180,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      204,  322,  208,  322,  184,  322,  196,  322,   67,  322,
      322,  322,  322,  322,  322,  322,  322,  322,   61,  322,
      322,  101,  322,  102,  322,  103,  322,   77,  322,   78,
      322,  322,  322,  322,  322,  322,  322,  104,  322,  207,
      203,  322,  322,  195,  183,  322,  191,  179,  149,  322,
      322,  150,  322,  133,  322,  322,  322,  322,  322,  134,

      322,  322,   42,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  219,  215,  165,  322,  322,  166,  322,  223,
      173,  322,  225,  322,  322,  322,  217,  322,  221,  322,
      174,  322,  322,  322,  322,  322,   96,  322,  306,  322,
      322,  322,  322,  322,  322,  322,   81,  322,  307,  322,
      322,  199,  187,  141,  322,  322,  322,  211,  157,  322,
      213,  322,  322,  189,  322,  201,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  309,  322,  322,  322,  322,   86,  322,  311,
      322,  322,  322,  322,   65,  322,  322,   83,  322,  193,

      181,  322,  322,  205,  322,  209,  322,  185,  322,  197,
      322,  142,  322,  322,   39,  322,  322,  322,  322,  322,
      322,  322,  158,  322,  322,  322,  322,  322,  322,  322,
      322,   47,  322,  322,  322,  322,  322,  322,   43,  322,
      322,  322,  278,  322,  322,  322,  322,  322,  322,  322,
      322,  254,  151,  322,  250,  322,  242,  322,  230,  135,
      322,  322,  238,  226,  275,  322,  322,  322,   84,  322,
      322,  322,   75,  322,  322,  322,  322,  266,  167,  322,
      262,  322,  270,  322,  272,  322,  175,  322,  322,  264,
      268,  322,   38,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  246,  322,  234,  322,  258,  322,  260,
      322,  322,  236,  248,   90,  322,  322,  288,  322,  322,
      322,  322,  322,  322,   44,  322,  322,  322,  322,  322,
      303,  322,  322,  322,  308,  322,  322,  322,  322,  143,
      322,  322,  159,  322,  322,  322,  322,  240,  228,  322,
      322,  322,  322,   60,  322,  296,  322,  252,  256,  232,
      244,  322,  322,  322,  322,  322,  322,  322,  322,  289,
      322,   33,  322,  290,  322,   16,  322,  322,  322,  322,
      322,  322,  255,  251,  243,  231,  239,  227,  322,  322,
      279,  322,  322,  322,   13,  322,  267,  263,  271,  273,

      322,  265,  269,  322,  322,  322,  322,  322,  322,   26,
      322,  322,  300,  322,  247,  235,  259,  261,  237,  249,
      322,  305,  322,  322,  322,  322,  322,   64,  322,  292,
      322,  322,  322,  322,   76,  322,  322,  277,  322,  322,
      241,  229,  253,  257,  233,  245,  298,  322,  322,  322,
      322,  322,  322,  322,  322,   45,  322,   28,  322,  322,
      322,  322,  100,  322,  315,  322,  322,  322,  293,  322,
      322,  322,  322,   34,  322,  322,  322,   55,  322,  322,
      322,  322,   27,  322,  322,  322,  322,   59,  322,   89,
      322,   50,  322,  322,  322,  284,  322,   24,  322,  295,

      322,  322,  322,   85,  322,  322,  322,   49,  322,  322,
       29,  322,  322,   25,  322,   54,  322,  322,  322,  322,
      322,   35,  322,   30,  322,   57,  322,  322,  322,  322,
       22,  322,  314,  322,   51,  322,   98,  322,  297,  322,
      322,  322,  322,  322,  322,  322,  322,   23,  322,   21,
      322,  322,   17,  322,   14,  322,   88,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,   32,  322,  283,
      322,   48,  322,  322,   15,  322,  322,   31,  322,  299,
      322,  322,  322,   46,  322,  322,  316,  322
    } ;

static yyconst short int yy_accept[1278] =
    {   0,
        1,    1,    1,    2,    3,    4,    5,    7,    9,   11,
       12,   15,   17,   19,   21,   22,   24,   26,   28,   30,
       32,   34,   36,   38,   40,   42,   44,   46,   48,   50,
       52,   54,   56,   58,   60,   62,   64,   66,   68,   70,
       72,   74,   76,   78,   80,   82,   84,   86,   87,   88,
       88,   89,   89,   90,   92,   92,   93,   94,   94,   95,
       97,   98,  100,  101,  102,  103,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  125,  126,
      127,  128,  129,  130,  131,  132,  132,  133,  134,  135,

      136,  137,  138,  138,  139,  140,  142,  143,  144,  145,
      147,  148,  150,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  168,  169,  170,  171,  172,  173,  174,  174,  175,
      176,  177,  178,  179,  180,  181,  182,  183,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  203,
      204,  205,  207,  208,  209,  211,  212,  212,  213,  214,
      215,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      227,  228,  230,  231,  231,  232,  233,  234,  235,  236,

      237,  238,  239,  240,  241,  242,  243,  244,  245,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  261,  262,  263,  264,  265,  265,
      266,  267,  268,  269,  271,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  282,  284,  286,  287,  288,
      289,  291,  292,  293,  294,  295,  296,  297,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
      309,  310,  311,  312,  313,  314,  316,  317,  318,  319,
      320,  321,  322,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  332,  333,  334,  335,  336,  337,  338,  339,

      340,  341,  342,  343,  343,  344,  345,  346,  347,  348,
      349,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      358,  359,  360,  361,  362,  362,  363,  365,  366,  367,
      368,  369,  370,  371,  372,  374,  375,  377,  378,  379,
      381,  382,  382,  383,  384,  384,  385,  386,  387,  388,
      389,  390,  390,  391,  392,  393,  394,  395,  397,  398,
      399,  400,  400,  401,  402,  403,  404,  405,  406,  407,
      408,  409,  410,  411,  412,  413,  414,  416,  417,  419,
      420,  422,  424,  425,  427,  427,  428,  429,  429,  430,
      431,  432,  433,  434,  434,  435,  436,  436,  437,  438,

      439,  440,  440,  441,  442,  443,  443,  444,  445,  446,
      446,  447,  448,  449,  450,  451,  452,  454,  455,  456,
      457,  458,  460,  461,  463,  464,  465,  466,  468,  468,
      469,  470,  471,  472,  473,  473,  474,  475,  475,  476,
      477,  478,  479,  480,  481,  482,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  492,  493,  494,  495,  496,
      498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
      508,  509,  510,  511,  512,  513,  514,  515,  515,  516,
      517,  518,  519,  520,  520,  521,  522,  523,  524,  526,
      527,  529,  530,  531,  532,  534,  535,  535,  536,  537,

      538,  538,  539,  540,  541,  542,  542,  543,  544,  545,
      546,  547,  548,  549,  550,  551,  553,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  567,  568,
      569,  570,  571,  573,  574,  574,  575,  576,  576,  577,
      578,  578,  579,  581,  582,  583,  583,  584,  585,  586,
      586,  587,  589,  590,  590,  591,  592,  593,  593,  594,
      594,  595,  595,  596,  597,  598,  599,  600,  601,  602,
      603,  605,  606,  608,  609,  610,  611,  612,  613,  614,
      615,  616,  616,  617,  618,  618,  619,  620,  620,  621,
      621,  622,  623,  624,  626,  626,  627,  628,  629,  629,

      630,  631,  631,  632,  633,  634,  634,  635,  636,  637,
      637,  638,  639,  639,  640,  641,  641,  642,  643,  644,
      645,  646,  648,  649,  651,  652,  653,  654,  655,  656,
      657,  658,  660,  661,  661,  662,  663,  664,  664,  665,
      666,  667,  667,  668,  669,  670,  670,  671,  672,  672,
      673,  674,  675,  676,  676,  677,  678,  678,  679,  680,
      680,  681,  682,  683,  685,  686,  687,  688,  689,  690,
      691,  693,  694,  696,  698,  700,  701,  702,  703,  704,
      705,  706,  708,  709,  710,  711,  712,  713,  714,  715,
      717,  717,  718,  719,  720,  721,  721,  722,  723,  724,

      724,  725,  726,  727,  728,  728,  729,  730,  730,  731,
      731,  732,  733,  734,  735,  736,  737,  738,  739,  740,
      741,  741,  742,  743,  743,  744,  745,  745,  746,  747,
      747,  748,  749,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  761,  762,  764,  766,  768,  770,  772,  773,
      774,  775,  776,  777,  778,  780,  780,  781,  781,  782,
      783,  784,  784,  785,  785,  786,  787,  787,  788,  788,
      789,  789,  790,  791,  791,  792,  793,  794,  794,  795,
      796,  797,  798,  799,  800,  800,  801,  802,  803,  805,
      806,  807,  808,  809,  810,  811,  812,  813,  813,  814,

      814,  815,  815,  816,  817,  817,  818,  819,  820,  820,
      821,  821,  822,  823,  823,  824,  825,  826,  827,  827,
      828,  829,  829,  830,  831,  831,  832,  833,  834,  835,
      836,  837,  839,  841,  842,  843,  844,  845,  846,  847,
      849,  851,  852,  852,  853,  853,  854,  854,  855,  856,
      857,  858,  858,  859,  859,  860,  861,  861,  862,  863,
      864,  864,  865,  866,  866,  867,  868,  869,  870,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  880,  881,
      882,  883,  885,  886,  887,  888,  890,  892,  893,  894,
      895,  897,  898,  900,  900,  901,  901,  902,  903,  904,

      904,  905,  906,  906,  907,  908,  908,  909,  910,  910,
      911,  912,  912,  913,  914,  915,  917,  918,  919,  920,
      921,  922,  923,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  934,  935,  936,  937,  938,  939,  941,
      942,  943,  945,  946,  947,  948,  949,  950,  951,  951,
      952,  953,  953,  954,  955,  955,  956,  956,  957,  958,
      959,  959,  960,  960,  961,  962,  963,  963,  964,  964,
      965,  967,  968,  969,  971,  972,  973,  975,  976,  977,
      977,  978,  979,  979,  980,  981,  981,  982,  982,  983,
      984,  985,  985,  986,  987,  987,  988,  989,  990,  990,

      991,  991,  992,  993,  995,  996,  997,  998,  999, 1000,
     1001, 1002, 1003, 1003, 1004, 1005, 1006, 1006, 1007, 1007,
     1008, 1009, 1010, 1010, 1011, 1012, 1013, 1013, 1014, 1014,
     1015, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1027,
     1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039,
     1040, 1040, 1041, 1042, 1043, 1043, 1044, 1045, 1046, 1047,
     1048, 1048, 1049, 1049, 1050, 1051, 1052, 1053, 1054, 1056,
     1058, 1058, 1059, 1059, 1060, 1060, 1061, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1074, 1076,
     1078, 1079, 1080, 1081, 1082, 1083, 1083, 1084, 1084, 1085,

     1085, 1086, 1086, 1087, 1087, 1088, 1088, 1089, 1090, 1091,
     1093, 1094, 1095, 1097, 1097, 1098, 1098, 1099, 1099, 1100,
     1100, 1101, 1102, 1102, 1103, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1112, 1113, 1115, 1115, 1116, 1116, 1117,
     1117, 1118, 1118, 1119, 1119, 1120, 1120, 1121, 1122, 1124,
     1125, 1126, 1127, 1128, 1130, 1132, 1133, 1134, 1135, 1137,
     1138, 1140, 1141, 1141, 1142, 1142, 1143, 1143, 1144, 1144,
     1145, 1145, 1146, 1146, 1147, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1158, 1160, 1161, 1162, 1163, 1165, 1167,
     1168, 1169, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1180,

     1181, 1182, 1183, 1185, 1186, 1187, 1188, 1190, 1192, 1194,
     1195, 1196, 1198, 1200, 1202, 1203, 1204, 1206, 1207, 1208,
     1210, 1211, 1213, 1214, 1216, 1218, 1219, 1220, 1221, 1222,
     1224, 1226, 1228, 1229, 1230, 1231, 1233, 1235, 1237, 1239,
     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1252,
     1253, 1255, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1270, 1272, 1274, 1275, 1277, 1278, 1280,
     1282, 1283, 1284, 1286, 1287, 1289, 1289
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    4,    4,    4,    8,
        9,   10,   11,   12,   11,   13,   14,   15,   15,   15,
       16,   15,   15,   15,   15,   15,   15,    4,    4,    4,
       17,    4,    4,    4,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
        4,   44,    4,    4,   45,    1,    4,    4,    4,   46,

       47,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   48,    4,   49,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    3,    1,    3,    3,    1,    1,    4,
        3,    1,    3,    3,    3,    3,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[1288] =
    {   0,
        0,    0,   47,   48, 1775, 1776, 1772, 1776,    0,   47,
       91,  140, 1776, 1776,   40, 1776,   44,   51,   51,   49,
       86,  188,   60,   46,   93, 1751, 1746,  134,   88,   91,
       57,  142,  118,  159, 1733,  165,  176,  227,   38, 1752,
     1751, 1750, 1776, 1776,    0, 1776,   74, 1765,    0,   89,
      111,  126,    0,  269, 1763, 1776,  318,   47,  220,  268,
     1776,  367,  278,  290, 1776,  158, 1729,  154, 1731, 1744,
     1726, 1735, 1740, 1727, 1729, 1735, 1715, 1734,  109, 1776,
     1714, 1722,  201,  146,  121,  164,  195,    0, 1716,  204,
      177, 1720, 1724, 1710, 1711,  205, 1776, 1718, 1728, 1713,

     1712, 1719,  214, 1776,  270, 1720,  271, 1706,  244,    0,
      108, 1709,    0,  261,  159,  183, 1716, 1710, 1700, 1703,
     1714,  235, 1776, 1704,  197,  314,  313, 1706, 1695, 1705,
      237, 1776, 1693,  219, 1697, 1702, 1709,  278, 1776, 1705,
      314, 1688,  145, 1695,  250,  316,   36,  280,  354, 1776,
      318,  329,  361,  230, 1688,  371,  281, 1703, 1688,  314,
     1698, 1678, 1677, 1676,    0,  332,  344, 1776,  388,  393,
      384,    0,  371,    0,  437,  386,   91,  388,  388, 1683,
        0, 1690, 1688, 1691, 1676, 1683, 1669, 1680, 1677,    0,
     1684,    0, 1669,  410, 1776,  411,  419, 1675,  325,  424,

      403, 1672, 1681, 1671,  326,  438, 1675,  425,    0, 1682,
     1669, 1678, 1674, 1674, 1677, 1658,  417, 1658, 1670,  396,
     1661, 1660, 1664,  442, 1776,  450,  458, 1670,  451, 1776,
      455,  462, 1665,    0,  463,  471, 1776,  481,  488, 1655,
     1652, 1666, 1658, 1660,    0,  399,    0, 1655, 1651, 1642,
        0,  435, 1648,  462, 1655,  492,  480,  493, 1776,  497,
      505,  451,  357,  499, 1654, 1657, 1652, 1653, 1641, 1629,
     1641, 1643, 1636, 1637, 1645,    0, 1636,  475, 1632, 1631,
     1644, 1632,    0, 1638, 1624, 1627, 1637, 1634, 1618, 1617,
     1631,  509, 1776,  501,  511,  497,  518, 1626, 1616, 1617,

     1613, 1605,  514,  522, 1776,  528,  538,  510,  544, 1609,
      539, 1776, 1615,  534, 1619, 1615, 1621, 1620, 1618, 1614,
     1609, 1612, 1611, 1610,  564,  170,  547, 1594, 1604, 1598,
     1595, 1613, 1608, 1599,    0, 1604,    0, 1608, 1605,    0,
     1603,  558, 1776,  569,  570,  571, 1776,  572, 1591, 1595,
     1600,  574, 1776,  578, 1595,  575, 1585,    0, 1582,  579,
     1592,  580, 1776,  581,  582,  588,  574,  587, 1588, 1598,
     1574, 1576, 1593, 1582, 1575, 1575,    0, 1571,    0, 1588,
        0,    0, 1585,    0,  599, 1776,  604,  605,  607, 1776,
      610,  612, 1577,  613, 1776,  615,  624,  631, 1776,  635,

     1570,  637, 1776,  638,  640,  642, 1776,  644, 1569,  645,
     1776,  651, 1560, 1573, 1581, 1563,  638, 1563, 1576, 1562,
     1578,    0, 1569,    0, 1576, 1564, 1563,    0,  656, 1776,
      661, 1565,  662,  597,  663, 1776,  665,  668,  669, 1776,
      674,  658,  685,  690, 1555,  691, 1776,  692, 1569, 1549,
     1556, 1561, 1548,  677,    0, 1547, 1554, 1541,  508,    0,
     1563, 1562, 1550, 1549, 1540, 1554, 1555, 1541, 1547, 1534,
     1536, 1541, 1543, 1530,  695, 1541, 1531,  696, 1776,  702,
      704,  677,  714,  713, 1776,  715,  718,  696,    0, 1533,
        0, 1535, 1537, 1524,  428, 1526,  721, 1776,  723, 1525,

      726, 1776,  734,  735, 1524,  739, 1776,  740, 1522, 1521,
     1525, 1537, 1517, 1518, 1534, 1527,    0, 1518, 1512, 1530,
     1511, 1510, 1509, 1511, 1510, 1524, 1515,    0, 1509, 1520,
     1503, 1505,    0, 1501,  742,  743, 1776,  744, 1776,  745,
      746, 1776,    0, 1495, 1513,  747,  748, 1776,  751,  752,
     1776,    0, 1511,  753, 1776,  756,  764,  765, 1776,  770,
     1776,  772, 1776,  773,  776,  774,  619,  753,  778, 1506,
        0, 1494,    0, 1494, 1492, 1502, 1501, 1494, 1504, 1499,
     1486,  781,  783, 1776,  784, 1776,  786,  795, 1776,  797,
     1776,  800,  802,    0,  803,  804, 1776,  806,  811, 1776,

      813,  814, 1776, 1487, 1492,  822, 1776,  823, 1485,  824,
     1776,  825,  827, 1776,  830,  832, 1776, 1484, 1492, 1495,
     1491, 1474, 1479,    0,  514, 1477, 1480, 1489, 1479, 1468,
     1475,    0, 1489,  834,  836, 1776,  843,  846, 1776,  850,
      830,  852,  853, 1776,  855,  856, 1776,  857,  862, 1776,
     1471,  863, 1470,  864, 1776,  866,  869, 1776, 1478,  873,
     1776, 1468, 1465,    0, 1464, 1478,  853, 1470, 1466, 1465,
        0, 1470,    0,    0, 1458, 1458, 1456, 1472, 1453, 1452,
     1467,    0, 1451, 1465, 1455, 1456, 1462, 1457, 1462,    0,
      876, 1776,  882,  889,  869,  894, 1776,  895, 1446,  896,

     1776,  899,  900, 1445,  902, 1776,  903,  905, 1776,  906,
     1776,  907, 1453, 1443, 1455, 1447, 1457, 1456, 1438, 1454,
      908, 1776,  912,  913, 1776, 1436,  916, 1776, 1444,  924,
     1776, 1434,    0,  898, 1444, 1436, 1431, 1443, 1433, 1441,
     1427,    0, 1424,    0,    0,    0,    0,    0, 1435, 1420,
     1421, 1428, 1424, 1437,    0,  930, 1776,  932, 1776, 1428,
     1424,  933, 1776,  935, 1776, 1417,  937, 1776,  940, 1776,
      942, 1776,  944,  946,  949, 1776,  951,  953, 1776,  956,
     1425,  954,  960, 1424,  962, 1776,  965,  967,    0, 1427,
      949, 1428, 1415, 1415, 1423, 1422, 1408,  972, 1776,  979,

     1776,  981, 1776,  983,  984,  985, 1776,  986,  988, 1776,
      990, 1776,  992,  993, 1776, 1407,  995, 1403, 1002, 1776,
     1004, 1009, 1776, 1405, 1011, 1776, 1012, 1013, 1418, 1397,
     1412,    0,    0, 1404, 1398, 1412, 1403, 1404, 1403,    0,
        0, 1393, 1015, 1776, 1016, 1776, 1020, 1776, 1022, 1403,
     1023, 1025, 1776, 1029, 1776, 1032, 1034, 1776, 1393, 1039,
     1041, 1776, 1401, 1042, 1776, 1391, 1043, 1045, 1384, 1406,
     1387, 1397, 1395, 1385, 1396, 1396, 1386, 1384, 1383, 1379,
     1376,    0, 1390, 1374, 1373,    0,    0, 1378, 1386, 1389,
        0, 1382,    0, 1048, 1776, 1050, 1776, 1051, 1379, 1052,

     1776, 1053, 1055, 1776, 1369, 1059, 1776, 1377, 1061, 1776,
     1367, 1062, 1776, 1064, 1069,    0, 1370, 1363, 1370, 1367,
     1375, 1363, 1071, 1776, 1072, 1073, 1075, 1078, 1377, 1368,
     1375, 1363,    0, 1365, 1362, 1361, 1356, 1357,    0, 1357,
     1363,    0, 1342, 1345, 1347, 1345, 1354, 1359, 1081, 1083,
     1776, 1085, 1776, 1089, 1091, 1776, 1092, 1094, 1776, 1095,
     1097, 1776, 1099, 1776, 1101, 1102, 1103, 1776, 1105, 1776,
        0, 1346, 1351,    0, 1345, 1345,    0, 1343, 1331, 1108,
     1111, 1776, 1113, 1776, 1115, 1119, 1776, 1121, 1122, 1776,
     1124, 1125, 1776, 1336, 1127, 1776, 1129, 1131, 1132, 1776,

     1133, 1776, 1349,    0, 1352, 1337, 1333, 1337, 1344, 1328,
     1342, 1341, 1135, 1138, 1776, 1141, 1143, 1776, 1145, 1149,
     1776, 1151, 1152, 1776, 1154, 1155, 1157, 1776, 1159, 1776,
        0, 1325,    0, 1325, 1336, 1338, 1333, 1327,    0, 1327,
     1324, 1328, 1318,    0, 1326, 1329,    0, 1314, 1314, 1323,
     1161, 1776, 1162, 1163, 1165, 1776, 1168, 1171, 1173, 1175,
     1179, 1776, 1181, 1776, 1326, 1324, 1319, 1308,    0,    0,
     1182, 1776, 1184, 1776, 1185, 1776, 1187, 1776, 1306, 1306,
     1306, 1318, 1306, 1301, 1315, 1306,    0,    0,    0,    0,
     1304, 1313, 1311, 1301, 1302, 1189, 1776, 1191, 1776, 1192,

     1776, 1193, 1776, 1195, 1776, 1198, 1776, 1299, 1305,    0,
     1306, 1297,    0, 1201, 1776, 1203, 1776, 1205, 1776, 1209,
     1776, 1289, 1211, 1776, 1212, 1776, 1294, 1295, 1290, 1296,
     1302, 1283,    0, 1288,    0, 1214, 1776, 1215, 1776, 1217,
     1776, 1219, 1776, 1221, 1776, 1222, 1776, 1292,    0, 1292,
     1294, 1279, 1273,    0,    0, 1280, 1286, 1279,    0, 1274,
        0, 1272, 1223, 1776, 1225, 1776, 1228, 1776, 1231, 1776,
     1233, 1776, 1235, 1776,    0, 1273, 1270, 1286, 1283, 1268,
     1281, 1208,    0,    0, 1271, 1279, 1279,    0,    0, 1277,
     1266,    0, 1272, 1265, 1277,    0, 1251, 1264,    0, 1257,

     1257, 1243,    0, 1242, 1234, 1228,    0,    0,    0, 1218,
     1218,    0,    0,    0, 1205, 1214,    0, 1217, 1210,    0,
      273,    0,  986,    0,    0, 1000,  956,  939,   45,    0,
        0,    0,   90,  114,  184,    0,    0,    0,    0,    0,
      228,  290,  345,  404,  387,  468,  550,    0,    0,  543,
        0,    0,    0,  572,  597,  594,  635,  655,  654,  754,
      774,  787,    0,    0,    0,  809,    0,  851,    0,    0,
      855,  885,    0,  923,    0, 1776, 1253,  962, 1257, 1261,
     1265, 1269, 1272, 1276, 1280, 1284, 1288
    } ;

static yyconst short int yy_def[1288] =
    {   0,
     1276,    1, 1277, 1277, 1276, 1276, 1276, 1276, 1278, 1279,
     1280, 1281, 1276, 1276, 1276, 1276, 1278, 1278, 1276, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1276, 1276, 1282, 1276, 1283, 1276, 1278, 1279,
     1276, 1279, 1284, 1280, 1285, 1276, 1281, 1276, 1276, 1278,
     1276, 1286, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278,

     1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1278, 1276,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1282, 1283, 1283, 1276, 1276, 1279,
     1276, 1278, 1278, 1287, 1286, 1276, 1276, 1276, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1276, 1276,
     1278, 1278, 1278, 1278, 1276, 1278, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1279, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1276, 1276, 1278, 1276, 1278, 1276, 1278, 1278, 1278,
     1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1276, 1276, 1278, 1276, 1278, 1276,
     1278, 1278, 1278, 1276, 1276, 1278, 1276, 1278, 1276, 1278,

     1278, 1276, 1276, 1278, 1278, 1276, 1276, 1278, 1278, 1276,
     1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276,
     1278, 1278, 1278, 1278, 1276, 1276, 1278, 1276, 1278, 1276,
     1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278,
     1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276, 1278, 1278,

     1276, 1276, 1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1276, 1278, 1276, 1276, 1276, 1278,
     1276, 1276, 1278, 1278, 1278, 1276, 1278, 1276, 1278, 1276,
     1276, 1278, 1278, 1276, 1276, 1278, 1278, 1276, 1276, 1276,
     1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1276, 1278, 1276, 1276, 1276, 1278, 1276, 1276, 1276,
     1276, 1278, 1278, 1278, 1276, 1278, 1276, 1278, 1276, 1276,

     1278, 1276, 1276, 1278, 1278, 1276, 1276, 1278, 1278, 1276,
     1276, 1278, 1276, 1276, 1278, 1276, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1276, 1278, 1276, 1278, 1276, 1276, 1278,
     1278, 1276, 1278, 1276, 1278, 1276, 1276, 1278, 1276, 1276,
     1278, 1278, 1278, 1276, 1276, 1278, 1276, 1276, 1278, 1276,
     1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1278, 1278, 1278, 1276, 1276, 1278, 1278, 1276,

     1276, 1278, 1278, 1278, 1276, 1276, 1278, 1276, 1276, 1276,
     1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1278, 1276, 1276, 1278, 1276, 1276, 1278, 1276,
     1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1276, 1276, 1276, 1276, 1278,
     1278, 1276, 1276, 1276, 1276, 1278, 1276, 1276, 1276, 1276,
     1276, 1276, 1278, 1276, 1278, 1276, 1278, 1276, 1276, 1278,
     1278, 1278, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1276, 1276,

     1276, 1276, 1276, 1278, 1276, 1278, 1276, 1278, 1276, 1276,
     1276, 1276, 1278, 1276, 1276, 1278, 1278, 1278, 1276, 1276,
     1278, 1276, 1276, 1278, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278,
     1278, 1276, 1276, 1276, 1276, 1278, 1276, 1276, 1278, 1278,
     1276, 1276, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1276, 1276, 1276, 1276, 1278, 1278, 1276,

     1276, 1278, 1276, 1276, 1278, 1276, 1276, 1278, 1276, 1276,
     1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276, 1278,
     1276, 1276, 1276, 1278, 1276, 1276, 1276, 1278, 1276, 1278,
     1276, 1276, 1276, 1276, 1278, 1278, 1276, 1276, 1276, 1276,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1276,
     1278, 1276, 1276, 1276, 1278, 1276, 1276, 1276, 1278, 1276,
     1278, 1276, 1276, 1278, 1276, 1276, 1278, 1278, 1276, 1276,

     1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1276, 1278, 1276, 1278, 1276, 1276, 1276, 1278,
     1276, 1278, 1276, 1276, 1278, 1278, 1276, 1276, 1276, 1276,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1278, 1278, 1276, 1276, 1278, 1278, 1278, 1278,
     1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1276, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1278, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,

     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278,    0, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276
    } ;

static yyconst short int yy_nxt[1826] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,    9,
       15,   16,   17,   18,   19,   19,    9,   20,   21,   22,
       23,   24,   25,   26,   27,   28,    9,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,    9,    9,
       40,   41,   42,    6,    9,    9,    9,   43,   44,   46,
       46,   51,   58,  290,   59,   59,   47,   47,   60,   60,
       61,  171,  171,   63,   62,   64,   64,   67,  160,   68,
      291,   65,   66,  161,  119,   93,   94,   69,   70,   89,
     1250,   90,  120,  167,   71,   91,   95,  168,  121,   72,
       52,   53,   53,   51,   96,   53,   65,   66,   53,   53,

       53,   92,   53,   73,   74,  178,  178,   53,  110,   97,
       79,   75,  169,  169,   76,   50,  114,   77,   98,  111,
       78,   99,  115,  112,  113,   80,  116,  100,  117,  118,
      170, 1251,   52,  240,   53,  103,  128,  241,   53,   53,
       55,   55,   56,  122,   55,  129,  200,   55,   55,   55,
      104,   55,  130,  105,  106, 1252,   55,  201,  123,  124,
      131,  125,  282,  198,  107,  108,  138,  126,  177,   52,
      109,  180,  178,  178,  181,  132,  133,  199,  127,  246,
      283,  139,  140,   55,  327,  327,  141,   55,   55,   79,
      134,  135,  202,  136,  203,  143,  142,  144,  247,  213,

      145,  204,  194,  248,   80,  249,   96,   81,  146,   82,
      205,  214,  147,   83, 1253,  103,   84,  195,   85,   86,
      206,   97,  256,  210,   87,  207,  211,   88,  148,  208,
      104,  196,   63,  257,   64,   64,  122,  197,  131,  212,
       65,   66,  149,  150,  269,  235,  151,  270,  152,  308,
      271,  123,  153,  132,  272,  309, 1254,  154,  155,  236,
      237,  156,  157,  238,  158,   65,   66,  285,  159,   53,
       53,  224,  229,   53,  239,  286,   53,   53,   53,  138,
       53,  148,   60,   60,  243,   53,  225,  230,  172,  173,
      231,  244,  176,  176,  139, 1244,  150,  245,   65,   66,

      226,  315,   63,  316,   64,   64,  227,  232, 1245,  233,
       65,   66,   53,  172,  173,  258,   53,   53,   55,   55,
       56, 1255,   55,   65,   66,   55,   55,   55,  262,   55,
      259,  277,  263,  260,   55,   65,   66,  287,  264,  319,
      288, 1276,  320,  297,  350, 1276,  278,  289,  298,  279,
      261,  360,  280,  167,  299,  292,  361,  168,  300,  301,
      351,   55,  304,  302, 1256,   55,   55,  174,  174,  303,
      293,  174,  311,  294,  174,  174,  174,  305,  174,  295,
      306,  326,  444,  174,  296,  327,  327,  312,  313,  169,
      169,  307,   50,  445,  325,  325,  314,  170,  171,  171,

      176,  176,  178,  178,   65,   66,   65,   66,   65,  328,
      174,  194,  342,  329,  174,  174,  418,  380,  355,  381,
      345, 1257,  419, 1258,  330,  352,  195,  343,  356,   65,
       66,   65,   66,   65,  346,  347,   52,  174,  174,  362,
      353,  174,  376,  224,  174,  174,  174,  344,  174,  348,
      366,  385,  229,  174,  363,  367,  394,  377,  225,  388,
      354,  368,  718,  397,  235,  719,  386,  230,  364,  423,
      442,  395,  402,  389,  390,  424,  443,  398,  399,  237,
      174,  400,  406,  426,  174,  174,  387,  403,  391,  410,
      404,  396,  392,  429,  258,  432,  461,  407,  435,  427,

      446,  405, 1259,  462,  411,  433,  438,  412,  430,  259,
      292,  408,  478,  436,  434,  447,  482,  409,  448,  484,
      439,  440,  483,  304,  441,  293,  475,  479,  431,  497,
      480,  476,  492,  437,  485,  504,  493,  477,  305,  501,
      311,  481,  834,  675,  498,  506,  505,  494,  486,  835,
      495,  511,  676,  496,  502,  312,  512,  503,  499,  342,
      507,  327,  327,  508,  500,  325,  325,  172,  170,  513,
      535,  345,  538,  541,  343,  352,  550, 1260, 1261,  546,
      554,  362,  558,  560,  536,  537,  347,  539,  542,  562,
      353,  551,  172,  547,  548,  555,  363,  559,  561,  566,

      385,  540,  568, 1262,  563,  582,  388,   52,  585,  556,
      567,  588,  569,  590,  394,  386,  595,  570,  564,  583,
      584,  390,  640,  586,  565,  397,  589, 1263,  591,  395,
      596,  597,  599,  641,  781, 1264,  602,  587,  402,  606,
      399,  610,  592,  406,  782,  613,  410,  600,  593,  598,
      601,  603,  616,  403,  607,  623,  611,  429,  407,  612,
      614,  411,  634,  638,  435, 1265,  642,  617,  608,  438,
      646,  604,  430,  624,  609,  649,  635,  636,  639,  436,
      643,  644,  625,  652,  440,  647,  654,  618,  648, 1266,
      650,  657,  446,  660,  653, 1267,  691,  478,  668,  645,

      669,  655,  703,  696,  656,  700,  658,  447,  661,  670,
      651,  692,  479,  704,  484,  705,  708,  671,  697,  710,
      701,  712,  497,  702,  721,  693,  713,  501,  662,  485,
      706,  709,  698,  707,  711,  724,  727,  498,  699,  722,
      506,  730,  502,  535,  756,  538,  758,  541,  546,  762,
      725,  728,  764,  550,  554,  507,  731,  767,  537,  757,
      539,  759,  542,  548,  763,  769,  558,  765,  551,  555,
      726,  560,  768,  562,  771,  778,  732,  774,  783,  785,
      770,  559,  582,  784,  798,  585,  561,  800,  563,  772,
      779,  775,  776, 1268,  786, 1269,  588,  584,  590,  799,

      586,  802,  801,  805,  595,  809,  777,  811,  787,  773,
      780,  589,  599,  591,  814,  602,  803,  806,  807,  597,
      810, 1270,  812,  606,  819,  610,  822,  600,  613,  815,
      603,  825,  808,  616, 1271,  634,  804,  843,  607,  820,
      611,  823,  813,  614,  845,  850,  826,  638,  617,  816,
      636,  847,  844,  642,  852,  851,  854,  646,  857,  846,
      827,  824,  639,  649,  861,  654,  848,  864,  644,  853,
      657,  855,  647,  858,  660,  872, 1272,  691,  650,  862,
      655,  873,  865,  894,  874,  658,  849, 1273,  875,  661,
      896,  856,  692,  859,  898,  696,  900,  700,  895,  899,

      903,  906,  866,  705,  909,  897,  708,  710,  912,  721,
      697,  901,  701,  923,  724,  904,  907,  727,  706,  910,
     1274,  709,  711,  913,  722,  730,  929,  930,  924,  725,
      931,  756,  728,  758,  762,  905,  764,  914,  767,  911,
      731,  769,  925,  771, 1275,  949,  757,  774,  759,  763,
      952,  765,  955,  768,  778,  961,  770,  957,  772,  950,
      951,  963,  776,  785,   49,  953,  967,  956,  969,  779,
      962,  958,  959,  798,  972, 1249,  964,  973,  786,  954,
      800,  968,  802,  970,  980,  805,  983,  986,  799,  809,
      965,  811, 1248,  988,  814,  801,  992,  803,  981,  982,

      807,  984,  987,  819,  810,  995,  812,  989,  990,  815,
      822,  993,  825,  999, 1001,  985,  843,  845,  820, 1247,
      996,  847, 1246, 1013, 1017,  823,  852,  826, 1000, 1002,
      854,  844,  846, 1019,  997,  857,  848, 1014, 1015, 1018,
     1023,  853,  861,  864, 1027,  855, 1029, 1020, 1021,  894,
      858,  896, 1051,  900, 1055, 1024,  903,  862,  865, 1028,
      906, 1030,  909,  912,  895, 1061,  897, 1052,  901, 1056,
     1063,  904,  923, 1071, 1073,  907, 1075,  910,  913, 1077,
     1062, 1053,  949, 1057, 1096, 1064,  952,  924, 1072, 1074,
     1098, 1076,  955,  957, 1078, 1100, 1102,  951,  961, 1097,

      963,  953, 1104, 1106,  967, 1099,  969,  956,  959,  980,
     1101, 1103, 1114,  962,  983,  964, 1116, 1105, 1107,  968,
      986,  970,  988, 1118,  982, 1120,  992, 1115,  995,  984,
     1123, 1117, 1125,  999, 1001,  987, 1013,  990, 1119, 1136,
     1121,  993, 1138,  996, 1017, 1124, 1019, 1126, 1000, 1002,
     1140, 1015, 1142, 1023, 1137, 1144, 1146, 1139, 1027, 1018,
     1029, 1021, 1051, 1163, 1165, 1141, 1055, 1143, 1024, 1167,
     1145, 1147, 1169, 1028, 1171, 1030, 1173, 1052, 1164, 1166,
     1061, 1056, 1063, 1071, 1168, 1073, 1075, 1170, 1077, 1172,
     1096, 1174, 1098, 1100, 1102, 1062, 1104, 1064, 1072, 1106,

     1074, 1076, 1114, 1078, 1116, 1097, 1118, 1099, 1101, 1103,
     1120, 1105, 1123, 1125, 1107, 1136, 1138, 1115, 1140, 1117,
     1142, 1119, 1144, 1146, 1163, 1121, 1165, 1124, 1126, 1167,
     1137, 1139, 1169, 1141, 1171, 1143, 1173, 1145, 1147, 1164,
     1243, 1166, 1242, 1220, 1168, 1241, 1240, 1170, 1239, 1172,
     1238, 1174, 1221,   45,   45,   45,   45,   50,   50,   50,
       50,   54, 1237,   54,   54,   57,   57,   57,   57,  165,
     1236,  165,  166, 1235,  166,  166,   53, 1234,   53,   53,
       55,   55,   55,   55,  175, 1233,  175,  175,  174, 1232,
      174,  174, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224,

     1223, 1222, 1219, 1218, 1217, 1216, 1215, 1214, 1213, 1212,
     1211, 1210, 1209, 1208, 1207, 1206, 1205, 1204, 1203, 1202,
     1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192,
     1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182,
     1181, 1180, 1179, 1178, 1177, 1176, 1175, 1162, 1161, 1160,
     1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150,
     1149, 1148, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128,
     1127, 1122, 1113, 1112, 1111, 1110, 1109, 1108, 1095, 1094,
     1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084,
     1083, 1082, 1081, 1080, 1079, 1070, 1069, 1068, 1067, 1066,

     1065, 1060, 1059, 1058, 1054, 1050, 1049, 1048, 1047, 1046,
     1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036,
     1035, 1034, 1033, 1032, 1031, 1026, 1025, 1022, 1016, 1012,
     1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003,  998,
      994,  991,  979,  978,  977,  976,  975,  974,  971,  966,
      960,  948,  947,  946,  945,  944,  943,  942,  941,  940,
      939,  938,  937,  936,  935,  934,  933,  932,  928,  927,
      926,  922,  921,  920,  919,  918,  917,  916,  915,  908,
      902,  893,  892,  891,  890,  889,  888,  887,  886,  885,
      884,  883,  882,  881,  880,  879,  878,  877,  876,  871,

      870,  869,  868,  867,  863,  860,  842,  841,  840,  839,
      838,  837,  836,  833,  832,  831,  830,  829,  828,  821,
      818,  817,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  788,  766,  761,  760,  755,  754,  753,  752,  751,
      750,  749,  748,  747,  746,  745,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  729,  723,
      720,  717,  716,  715,  714,  695,  694,  690,  689,  688,
      687,  686,  685,  684,  683,  682,  681,  680,  679,  678,
      677,  674,  673,  672,  667,  666,  665,  664,  663,  659,
      637,  633,  632,  631,  630,  629,  628,  627,  626,  622,

      621,  620,  619,  615,  605,  594,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  557,  553,  552,
      549,  545,  544,  543,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  510,  509,  491,  490,  489,
      488,  487,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  428,  425,  422,  421,
      420,  417,  416,  415,  414,  413,  401,  393,  384,  383,
      382,  379,  378,  375,  374,  373,  372,  371,  370,  369,

      365,  359,  358,  357,  349,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  324,  323,  322,  321,
      318,  317,  310,  284,  281,  276,  275,  274,  273,  268,
      267,  266,  265,  255,  254,  253,  252,  251,  250,  242,
      234,  228,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  209,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  179,   56,   48,  164,  163,  162,
      137,  102,  101,   48, 1276,    5, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276
    } ;

static yyconst short int yy_chk[1826] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   10,   15,  147,   15,   15,    3,    4,   17,   17,
       18,   58,   58,   19,   18,   19,   19,   20,   39,   20,
      147,   19,   19,   39,   31,   24,   24,   20,   20,   23,
     1229,   23,   31,   47,   20,   23,   24,   47,   31,   20,
       10,   11,   11,   50,   25,   11,   19,   19,   11,   11,

       11,   23,   11,   21,   21,  177,  177,   11,   29,   25,
       79,   21,   51,   51,   21,   51,   30,   21,   25,   29,
       21,   25,   30,   29,   29,   79,   30,   25,   30,   30,
       52, 1233,   50,  111,   11,   28,   33,  111,   11,   11,
       12,   12,   12,   32,   12,   33,   85,   12,   12,   12,
       28,   12,   33,   28,   28, 1234,   12,   85,   32,   32,
       34,   32,  143,   84,   28,   28,   36,   32,   66,   52,
       28,   68,   66,   66,   68,   34,   34,   84,   32,  115,
      143,   36,   36,   12,  326,  326,   36,   12,   12,   22,
       34,   34,   86,   34,   86,   37,   36,   37,  115,   91,

       37,   86,   83,  116,   22,  116,   96,   22,   37,   22,
       87,   91,   37,   22, 1235,  103,   22,   83,   22,   22,
       87,   96,  125,   90,   22,   87,   90,   22,   38,   87,
      103,   83,   59,  125,   59,   59,  122,   83,  131,   90,
       59,   59,   38,   38,  134,  109,   38,  134,   38,  154,
      134,  122,   38,  131,  134,  154, 1241,   38,   38,  109,
      109,   38,   38,  109,   38,   59,   59,  145,   38,   54,
       54,  105,  107,   54,  109,  145,   54,   54,   54,  138,
       54,  148,   60,   60,  114,   54,  105,  107,   60,   60,
      107,  114,   63,   63,  138, 1221,  148,  114,   63,   63,

      105,  157,   64,  157,   64,   64,  105,  107, 1221,  107,
       64,   64,   54,   60,   60,  126,   54,   54,   57,   57,
       57, 1242,   57,   63,   63,   57,   57,   57,  127,   57,
      126,  141,  127,  126,   57,   64,   64,  146,  127,  160,
      146,  166,  160,  151,  199,  166,  141,  146,  151,  141,
      126,  205,  141,  167,  151,  149,  205,  167,  152,  152,
      199,   57,  153,  152, 1243,   57,   57,   62,   62,  152,
      149,   62,  156,  149,   62,   62,   62,  153,   62,  149,
      153,  173,  263,   62,  149,  173,  173,  156,  156,  169,
      169,  153,  169,  263,  170,  170,  156,  170,  171,  171,

      176,  176,  178,  178,  171,  171,  176,  176,  178,  179,
       62,  194,  196,  179,   62,   62,  246,  220,  201,  220,
      197, 1244,  246, 1245,  179,  200,  194,  196,  201,  171,
      171,  176,  176,  178,  197,  197,  170,  175,  175,  206,
      200,  175,  217,  224,  175,  175,  175,  196,  175,  197,
      208,  226,  229,  175,  206,  208,  231,  217,  224,  227,
      200,  208,  495,  232,  235,  495,  226,  229,  206,  252,
      262,  231,  236,  227,  227,  252,  262,  232,  232,  235,
      175,  232,  238,  254,  175,  175,  226,  236,  227,  239,
      236,  231,  227,  256,  258,  257,  278,  238,  260,  254,

      264,  236, 1246,  278,  239,  257,  261,  239,  256,  258,
      292,  238,  295,  260,  257,  264,  296,  238,  264,  297,
      261,  261,  296,  304,  261,  292,  294,  295,  256,  306,
      295,  294,  303,  260,  297,  308,  303,  294,  304,  307,
      311,  295,  625,  459,  306,  309,  308,  303,  297,  625,
      303,  314,  459,  303,  307,  311,  314,  307,  306,  342,
      309,  327,  327,  309,  306,  325,  325,  327,  325,  314,
      344,  345,  346,  348,  342,  352,  356, 1247, 1250,  354,
      360,  362,  364,  365,  344,  344,  345,  346,  348,  366,
      352,  356,  327,  354,  354,  360,  362,  364,  365,  367,

      385,  346,  368, 1254,  366,  387,  388,  325,  389,  360,
      367,  391,  368,  392,  394,  385,  396,  368,  366,  387,
      387,  388,  434,  389,  366,  397,  391, 1255,  392,  394,
      396,  396,  398,  434,  567, 1256,  400,  389,  402,  404,
      397,  405,  392,  406,  567,  408,  410,  398,  392,  396,
      398,  400,  412,  402,  404,  417,  405,  429,  406,  405,
      408,  410,  431,  433,  435, 1257,  437,  412,  404,  438,
      439,  400,  429,  417,  404,  441,  431,  431,  433,  435,
      437,  437,  417,  442,  438,  439,  443,  412,  439, 1258,
      441,  444,  446,  448,  442, 1259,  475,  478,  454,  437,

      454,  443,  482,  480,  443,  481,  444,  446,  448,  454,
      441,  475,  478,  482,  484,  483,  486,  454,  480,  487,
      481,  488,  497,  481,  499,  475,  488,  501,  448,  484,
      483,  486,  480,  483,  487,  503,  504,  497,  480,  499,
      506,  508,  501,  535,  536,  538,  540,  541,  546,  547,
      503,  504,  549,  550,  554,  506,  508,  556,  535,  536,
      538,  540,  541,  546,  547,  557,  558,  549,  550,  554,
      503,  560,  556,  562,  564,  566,  508,  565,  568,  569,
      557,  558,  582,  568,  583,  585,  560,  587,  562,  564,
      566,  565,  565, 1260,  569, 1261,  588,  582,  590,  583,

      585,  592,  587,  593,  595,  596,  565,  598,  569,  564,
      566,  588,  599,  590,  601,  602,  592,  593,  593,  595,
      596, 1262,  598,  606,  608,  610,  612,  599,  613,  601,
      602,  615,  593,  616, 1266,  634,  592,  635,  606,  608,
      610,  612,  598,  613,  637,  641,  615,  638,  616,  601,
      634,  640,  635,  642,  643,  641,  645,  646,  648,  637,
      615,  612,  638,  649,  652,  654,  640,  656,  642,  643,
      657,  645,  646,  648,  660,  667, 1268,  691,  649,  652,
      654,  667,  656,  693,  667,  657,  640, 1271,  667,  660,
      694,  645,  691,  648,  695,  696,  698,  700,  693,  695,

      702,  703,  656,  705,  707,  694,  708,  710,  712,  721,
      696,  698,  700,  723,  724,  702,  703,  727,  705,  707,
     1272,  708,  710,  712,  721,  730,  734,  734,  723,  724,
      734,  756,  727,  758,  762,  702,  764,  712,  767,  707,
      730,  769,  723,  771, 1274,  773,  756,  774,  758,  762,
      775,  764,  777,  767,  778,  782,  769,  780,  771,  773,
      773,  783,  774,  785, 1278,  775,  787,  777,  788,  778,
      782,  780,  780,  798,  791, 1228,  783,  791,  785,  775,
      800,  787,  802,  788,  804,  805,  806,  808,  798,  809,
      783,  811, 1227,  813,  814,  800,  817,  802,  804,  804,

      805,  806,  808,  819,  809,  821,  811,  813,  813,  814,
      822,  817,  825,  827,  828,  806,  843,  845,  819, 1226,
      821,  847, 1223,  849,  851,  822,  852,  825,  827,  828,
      854,  843,  845,  856,  821,  857,  847,  849,  849,  851,
      860,  852,  861,  864,  867,  854,  868,  856,  856,  894,
      857,  896,  898,  900,  902,  860,  903,  861,  864,  867,
      906,  868,  909,  912,  894,  914,  896,  898,  900,  902,
      915,  903,  923,  925,  926,  906,  927,  909,  912,  928,
      914,  898,  949,  902,  950,  915,  952,  923,  925,  926,
      954,  927,  955,  957,  928,  958,  960,  949,  961,  950,

      963,  952,  965,  966,  967,  954,  969,  955,  957,  980,
      958,  960,  981,  961,  983,  963,  985,  965,  966,  967,
      986,  969,  988,  989,  980,  991,  992,  981,  995,  983,
      997,  985,  998,  999, 1001,  986, 1013,  988,  989, 1014,
      991,  992, 1016,  995, 1017,  997, 1019,  998,  999, 1001,
     1020, 1013, 1022, 1023, 1014, 1025, 1026, 1016, 1027, 1017,
     1029, 1019, 1051, 1053, 1054, 1020, 1055, 1022, 1023, 1057,
     1025, 1026, 1058, 1027, 1059, 1029, 1060, 1051, 1053, 1054,
     1061, 1055, 1063, 1071, 1057, 1073, 1075, 1058, 1077, 1059,
     1096, 1060, 1098, 1100, 1102, 1061, 1104, 1063, 1071, 1106,

     1073, 1075, 1114, 1077, 1116, 1096, 1118, 1098, 1100, 1102,
     1120, 1104, 1123, 1125, 1106, 1136, 1138, 1114, 1140, 1116,
     1142, 1118, 1144, 1146, 1163, 1120, 1165, 1123, 1125, 1167,
     1136, 1138, 1169, 1140, 1171, 1142, 1173, 1144, 1146, 1163,
     1219, 1165, 1218, 1182, 1167, 1216, 1215, 1169, 1211, 1171,
     1210, 1173, 1182, 1277, 1277, 1277, 1277, 1279, 1279, 1279,
     1279, 1280, 1206, 1280, 1280, 1281, 1281, 1281, 1281, 1282,
     1205, 1282, 1283, 1204, 1283, 1283, 1284, 1202, 1284, 1284,
     1285, 1285, 1285, 1285, 1286, 1201, 1286, 1286, 1287, 1200,
     1287, 1287, 1198, 1197, 1195, 1194, 1193, 1191, 1190, 1187,

     1186, 1185, 1181, 1180, 1179, 1178, 1177, 1176, 1162, 1160,
     1158, 1157, 1156, 1153, 1152, 1151, 1150, 1148, 1134, 1132,
     1131, 1130, 1129, 1128, 1127, 1122, 1112, 1111, 1109, 1108,
     1095, 1094, 1093, 1092, 1091, 1086, 1085, 1084, 1083, 1082,
     1081, 1080, 1079, 1068, 1067, 1066, 1065, 1050, 1049, 1048,
     1046, 1045, 1043, 1042, 1041, 1040, 1038, 1037, 1036, 1035,
     1034, 1032, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005,
     1003,  994,  979,  978,  976,  975,  973,  972,  948,  947,
      946,  945,  944,  943,  941,  940,  938,  937,  936,  935,
      934,  932,  931,  930,  929,  922,  921,  920,  919,  918,

      917,  911,  908,  905,  899,  892,  890,  889,  888,  885,
      884,  883,  881,  880,  879,  878,  877,  876,  875,  874,
      873,  872,  871,  870,  869,  866,  863,  859,  850,  842,
      839,  838,  837,  836,  835,  834,  831,  830,  829,  824,
      818,  816,  797,  796,  795,  794,  793,  792,  790,  784,
      781,  766,  761,  760,  754,  753,  752,  751,  750,  749,
      743,  741,  740,  739,  738,  737,  736,  735,  732,  729,
      726,  720,  719,  718,  717,  716,  715,  714,  713,  704,
      699,  689,  688,  687,  686,  685,  684,  683,  681,  680,
      679,  678,  677,  676,  675,  672,  670,  669,  668,  666,

      665,  663,  662,  659,  653,  651,  633,  631,  630,  629,
      628,  627,  626,  623,  622,  621,  620,  619,  618,  609,
      605,  604,  581,  580,  579,  578,  577,  576,  575,  574,
      572,  570,  553,  545,  544,  534,  532,  531,  530,  529,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      516,  515,  514,  513,  512,  511,  510,  509,  505,  500,
      496,  494,  493,  492,  490,  477,  476,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  458,  457,  456,  453,  452,  451,  450,  449,  445,
      432,  427,  426,  425,  423,  421,  420,  419,  418,  416,

      415,  414,  413,  409,  401,  393,  383,  380,  378,  376,
      375,  374,  373,  372,  371,  370,  369,  361,  359,  357,
      355,  351,  350,  349,  341,  339,  338,  336,  334,  333,
      332,  331,  330,  329,  328,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  313,  310,  302,  301,  300,
      299,  298,  291,  290,  289,  288,  287,  286,  285,  284,
      282,  281,  280,  279,  277,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  255,  253,  250,  249,
      248,  244,  243,  242,  241,  240,  233,  228,  223,  222,
      221,  219,  218,  216,  215,  214,  213,  212,  211,  210,

      207,  204,  203,  202,  198,  193,  191,  189,  188,  187,
      186,  185,  184,  183,  182,  180,  164,  163,  162,  161,
      159,  158,  155,  144,  142,  140,  137,  136,  135,  133,
      130,  129,  128,  124,  121,  120,  119,  118,  117,  112,
      108,  106,  102,  101,  100,   99,   98,   95,   94,   93,
       92,   89,   82,   81,   78,   77,   76,   75,   74,   73,
       72,   71,   70,   69,   67,   55,   48,   42,   41,   40,
       35,   27,   26,    7,    5, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() (yy_more_offset = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	yy_more_offset = yy_prev_more_offset; \
	yyleng -= yy_more_offset; \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *fhs_text_ptr;
#line 1 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
#define INITIAL 0
/************************************************************************/
/***   Lexikalische Analyse der Baumstruktur                          ***/
/***   20.12.93 Version 0.8a                                          ***/
/***                                                                  ***/
/************************************************************************/
#line 7 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
#define YY_NEVER_INTERACTIVE 1
#define OSG_COMPILESYSTEMLIB

#ifdef WIN32                        
#include <io.h>                     /* For open, close */
#else
#include <unistd.h>                 /* For close (!) */
#endif
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include "fhs.tab.h"
#include "OSGFhsComm.h"

#include <OSGConfig.h>

using OSG::zeilennr;
using OSG::fhs_data;

#define min(a, b)               ((a)<(b)?(a):(b))
#define max(a, b)               ((a)>(b)?(a):(b))

#ifdef __sgi
#pragma set woff 1174,1110,1209,1552
#endif

static char *tmpChar = yy_full_match;

#define DEBUG_ONx

/************************************************************************/
/***                                                                  ***/
/************************************************************************/

#undef fhs_wrap

#ifdef DEBUG_ON
#define oprompt fprintf(fhs_out," obj:   ")
#define prompt fprintf(fhs_out,"%s ",fhs_text)
#else
#define oprompt
#define prompt
#endif

extern "C"
{
int fhs_wrap()
{
#ifdef DEBUG_ON
  fprintf(fhs_out,"\n Ende. \n");
#endif
  return(1);
}
}
/************************************************************************/
/***                                                                  ***/
/************************************************************************/
#define comment 1

#line 1441 "lex.fhs_.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef fhs_text_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 72 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"

#line 1594 "lex.fhs_.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1277 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1776 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 73 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 74 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{
#ifdef DEBUG_ON
			fprintf(fhs_out,"  :%04d:  \n ",zeilennr);
#endif
			zeilennr++;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; BEGIN(comment); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 83 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
/* eat anything that's not a '*' */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
/* eat up '*'s not followed by '/'s */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
++zeilennr;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (MODEL);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (EXTFILE);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 89 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (NAME);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 90 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (GEOMETRY);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 91 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (LODGEOMETRY);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 92 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (TUBEGEOMETRY);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 93 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (ASSEMBLY);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 94 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); oprompt; return (LODASSEMBLY);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 95 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (LOD);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 96 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (IDEAL);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); fhs_data.index=0; oprompt; return (LIGHT);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 98 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); fhs_data.index=0; oprompt; return (ENVIRONMENT);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (POINTLIGHT);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (DIRECTLIGHT);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (SPOTLIGHT);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (BACKGROUND);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 103 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LSDIREKT);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LSFLANKEN);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TSDIREKT);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 106 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TSFLANKEN);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 107 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (KSNACHHALL);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 108 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (FLAECHENMASSE);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 109 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRANSMISSION);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 110 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (ABSTRAHL);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 111 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (INVERLUST);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 112 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (KOINZIDENZ);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TERZ);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 114 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (REAL);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 115 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (KOMPLEX);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 116 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TENSOR);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 117 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (OKTAV);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 118 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (FROM);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 119 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (DEFMAT);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 120 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (USEMAT);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 121 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (POLYGON);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 122 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRISTRIP);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 123 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRISTRIP);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 124 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRIFAN);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 125 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRIFAN);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 126 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TRIANGLES);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 127 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (QUADSTRIP);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 128 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (QUADSTRIP);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 129 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (QUADS);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 130 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TUBE);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 131 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (CLOSEDLINE);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 132 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (CLOSEDLINE);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 133 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LINE);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 134 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LINE);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 135 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LINES);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (POINTSFHS);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 137 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TEXTURE);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 138 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (UNLIT);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 139 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (LIT);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 140 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (PPOOL);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 141 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (POLYPOOL);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (SPHERE);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 143 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CONE);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 144 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TORUS);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 145 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (TEXTFHS);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 146 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (BOX);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; zeilennr++; 
					 strncpy(fhs_data.data.string,fhs_text, MAX_STRING-1);
					 fhs_data.data.string[MAX_STRING-1]=0;
					 return (SCRIPT);
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 152 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TYPE);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 153 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (FLAG);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 154 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (LUFT);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 155 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TEMP);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 156 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (EXTRUDE);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 157 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (REVOLUTE);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 158 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (ABSEXP);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 159 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (ABSIMP);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 160 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (STREU);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 161 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (SCS);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 162 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (MATRIX);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 163 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (DCS);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 164 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (STATIC);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 165 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (DYNAMIC);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 166 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (TRANSLATE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 167 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (ROTATE);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 168 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (SCALE);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (ORIENTATION);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 170 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (POLYELEMX);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 171 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (OBJECTX);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (DESCX);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 173 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (PRIMX);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 174 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (POLYX);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 175 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (MATX);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 176 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (ENVX);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 177 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (LIGHTX);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 178 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (BBOX);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 179 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (RESOLUTION);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 180 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return (ID);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 181 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; strcpy(fhs_data.data.string, "<unnamed>"); fhs_data.index=0; return (BILLBOARD);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 182 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[3] = XAXIS; fhs_data.index=0; 
						return (XAXIS);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 184 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[3] = YAXIS; fhs_data.index=0;
						return (YAXIS);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 186 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[3] = ZAXIS; fhs_data.index=0;
						return (ZAXIS);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[3] = CENTER; fhs_data.index=0;
						return (CENTER);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 190 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[3] = AXIS; fhs_data.index=0;
						return (AXIS);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 192 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (COLON);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 193 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (G_AUF);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 194 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (G_ZU);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 195 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (R_AUF);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 196 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; return (R_ZU);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 197 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (FONT);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 198 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (COL);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 199 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (NORM);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 200 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TEX);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 201 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TEX);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 202 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (POS);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 203 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (IND);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 204 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (RAD);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 205 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TRANSP);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 206 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CIND);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 207 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRIND);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 208 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (NIND);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 209 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TIND);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 210 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3IND);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 211 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CIND);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 212 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRIND);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 213 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (NIND);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 214 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TIND);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 215 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3IND);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 217 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 218 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 239 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 240 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 241 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 242 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 243 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 244 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 245 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 246 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 247 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 248 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 249 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 250 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 251 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 252 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 253 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 254 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 255 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 256 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CNIND);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 257 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTIND);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 258 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3IND);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 259 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRNIND);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 260 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTIND);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 261 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3IND);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 262 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (TNIND);}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 263 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (T3NIND);}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 264 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 265 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 266 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 267 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 268 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 269 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 270 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 271 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 272 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 273 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 274 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 275 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 276 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 278 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 279 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 280 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 281 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 282 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 283 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 284 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 285 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 286 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 287 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 288 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 289 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 290 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 291 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 292 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 293 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 294 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 295 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 296 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 297 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 298 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 299 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 300 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 301 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 302 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 303 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 304 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 305 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 306 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 307 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 308 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 309 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 310 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTNIND);}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 311 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CT3NIND);}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 312 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 313 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 314 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 315 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 316 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 317 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 318 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 319 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 320 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 321 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 322 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 323 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 324 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 325 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 326 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 327 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 328 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 329 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 330 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 331 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 332 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 333 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 334 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 335 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 336 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 337 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 338 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 339 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 340 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 341 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 342 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 343 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 344 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 345 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 346 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 347 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 348 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 349 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 350 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 351 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 352 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 353 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 354 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 355 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 356 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 357 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 358 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRTNIND);}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 359 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return (CTRT3NIND);}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 360 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(COLOR);}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 361 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(DIFFUSE);}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 362 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(KD);}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 363 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(SPECULAR);}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 364 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(AMBIENT);}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 365 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(EMISSION);}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 366 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(KS);}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 367 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(KT);}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 368 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(ALPHA);}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 369 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TRANSPARENCY);}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 370 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(SHININESS);}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 371 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(IOR);}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 372 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(BRDF);}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 373 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(RAD);}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 374 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(PATCHES);}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 375 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(UNIFORM);}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 376 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(ADAPTIVE);}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 377 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(POOL);}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 378 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(POSITION);}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 379 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(DIRECTION);}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 380 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(LVK);}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 381 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TEXFILTER);}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 382 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TEXWRAP);}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 383 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TEXQUALITY);}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 384 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TEXBLEND);}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 385 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0;return(TEXTRANSCOLOR);}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 386 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = MODULATE;
						return(MODULATE);}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 388 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = DECAL;
						return(DECAL);}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 390 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = BLEND;
						return(BLEND);}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 392 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = REPLACE;
						return(REPLACE);}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 394 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = ADD;
						return(ADD);}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 396 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = POINTFHS;
						return (POINTFHS);}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 398 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = LINEAR; 
						return (LINEAR);}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 400 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = MIPMAP; 
						return (MIPMAP);}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 402 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = SHARPEN; 
						return (SHARPEN);}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 404 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = REPEAT; 
						return (REPEAT);}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 406 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = CLAMP; 
						return (CLAMP);}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 408 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = SELECT; 
						return (SELECT);}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 410 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = HIGH; 
						return (HIGH);}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 412 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = LOW; 
						return (LOW);}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 414 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.index=0; return(POINTORDER);}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 415 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = CLOCKWISE;
						return(CLOCKWISE);}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 417 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = COUNTERCLOCKWISE;
						return(COUNTERCLOCKWISE);}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 419 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = CLOCKWISE;
						return(CLOCKWISE);}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 421 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{prompt; fhs_data.data.number[fhs_data.index++] = COUNTERCLOCKWISE;
						return(COUNTERCLOCKWISE);}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 425 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{
			 char *c;
			 int l;
			 prompt; 
			 strncpy(fhs_data.data.string,fhs_text+1, min(MAX_STRING-1, strlen(fhs_text+1)));
			 fhs_data.data.string[min(MAX_STRING-1, strlen(fhs_text+1))]='\0';

			 *(strchr(fhs_data.data.string, 0)-1)=0;
			 c=fhs_data.data.string; l=strlen(fhs_data.data.string);
			 while (strchr(c, '"'))
			 {
				 if (c[-1]=='\\')
				 {
					 memmove(c-1, c, l-(c-fhs_data.data.string));
					 l--;
				 }
				 else if (c[1]==' ' || c[1]=='\t' || c[1]=='\n')
				 {
					 char *d=strchr(c, '"')+1;
					 
					 memmove(c, d+1, l-(d-fhs_data.data.string));
					 l-=d-c;
				 }
			 }	 
			 return (STRING);}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 450 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{ prompt; 
			 fhs_data.data.number[fhs_data.index++] = atof(fhs_text);
			 return (NUMBER);
   			 }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 454 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{ prompt; 
			 fhs_data.data.dnumber[fhs_data.index++] = strtod(fhs_text, NULL);
			 return (NUMBER);
   			 }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 458 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
{
						prompt; 
						strncpy(fhs_data.data.string, fhs_text, min(MAX_STRING-1, strlen(fhs_text))); 
						fhs_data.data.string[min(MAX_STRING-1, strlen(fhs_text))]='\0'; 
						return (STRING);}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 463 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"
ECHO;
	YY_BREAK
#line 3366 "lex.fhs_.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(comment):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - fhs_text_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = fhs_text_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = fhs_text_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = fhs_text_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					fhs_text_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = fhs_text_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = fhs_text_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = fhs_text_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - fhs_text_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - fhs_text_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	fhs_text_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = fhs_text_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1277 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1277 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1276);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	fhs_text_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - fhs_text_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = fhs_text_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	fhs_text_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef fhs_text_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 463 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.l"


void fhsRestart(FILE *f)
{
	zeilennr=1;

	fhs_restart(f);
	
	BEGIN(INITIAL);
}

#ifdef __sgi
#pragma reset woff 1174,1110,1209,1552
#endif
