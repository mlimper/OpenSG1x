
/*  A Bison parser, made from /e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse fhs_parse
#define yylex fhs_lex
#define yyerror fhs_error
#define yylval fhs_lval
#define yychar fhs_char
#define yydebug fhs_debug
#define yynerrs fhs_nerrs
#define	MODEL	257
#define	GEOMETRY	258
#define	LODGEOMETRY	259
#define	ASSEMBLY	260
#define	LODASSEMBLY	261
#define	LOD	262
#define	ACOUSTIC	263
#define	TUBEGEOMETRY	264
#define	EXTFILE	265
#define	NAME	266
#define	SPHERE	267
#define	CONE	268
#define	TORUS	269
#define	TEXTFHS	270
#define	BOX	271
#define	POLYGON	272
#define	TRISTRIP	273
#define	QUADSTRIP	274
#define	LINE	275
#define	CLOSEDLINE	276
#define	TRIFAN	277
#define	TRIANGLES	278
#define	LINES	279
#define	QUADS	280
#define	POINTSFHS	281
#define	PPOOL	282
#define	POLYPOOL	283
#define	TUBE	284
#define	PATCHES	285
#define	UNIFORM	286
#define	ADAPTIVE	287
#define	POOL	288
#define	SCRIPT	289
#define	TYPE	290
#define	FROM	291
#define	IDEAL	292
#define	BBOX	293
#define	DCS	294
#define	SCS	295
#define	TRANSLATE	296
#define	ROTATE	297
#define	SCALE	298
#define	STATIC	299
#define	DYNAMIC	300
#define	MATRIX	301
#define	ORIENTATION	302
#define	TEXTURE	303
#define	TEXTRANSCOLOR	304
#define	RAD	305
#define	BRDF	306
#define	UNLIT	307
#define	LIT	308
#define	ID	309
#define	TEXFILTER	310
#define	POINTFHS	311
#define	LINEAR	312
#define	MIPMAP	313
#define	SHARPEN	314
#define	TEXWRAP	315
#define	REPEAT	316
#define	CLAMP	317
#define	SELECT	318
#define	TEXQUALITY	319
#define	HIGH	320
#define	LOW	321
#define	TEXBLEND	322
#define	MODULATE	323
#define	DECAL	324
#define	BLEND	325
#define	REPLACE	326
#define	ADD	327
#define	DIFFUSE	328
#define	SPECULAR	329
#define	EMISSION	330
#define	ALPHA	331
#define	TRANSPARENCY	332
#define	SHININESS	333
#define	IOR	334
#define	POSITION	335
#define	COLOR	336
#define	DIRECTION	337
#define	UP	338
#define	LUMEN	339
#define	LVK	340
#define	KD	341
#define	KS	342
#define	KT	343
#define	DEFMAT	344
#define	USEMAT	345
#define	G_AUF	346
#define	R_AUF	347
#define	COLON	348
#define	G_ZU	349
#define	R_ZU	350
#define	NUMBER	351
#define	STRING	352
#define	RESOLUTION	353
#define	LIGHT	354
#define	ENVIRONMENT	355
#define	AMBIENT	356
#define	POINTLIGHT	357
#define	DIRECTLIGHT	358
#define	SPOTLIGHT	359
#define	BACKGROUND	360
#define	COL	361
#define	TEX	362
#define	POS	363
#define	NORM	364
#define	IND	365
#define	CIND	366
#define	NIND	367
#define	TIND	368
#define	T3IND	369
#define	CNIND	370
#define	CTIND	371
#define	CT3IND	372
#define	TNIND	373
#define	T3NIND	374
#define	CTNIND	375
#define	CT3NIND	376
#define	CTRIND	377
#define	CTRNIND	378
#define	CTRTIND	379
#define	CTRT3IND	380
#define	CTRTNIND	381
#define	CTRT3NIND	382
#define	TRANSP	383
#define	BILLBOARD	384
#define	XAXIS	385
#define	YAXIS	386
#define	ZAXIS	387
#define	AXIS	388
#define	CENTER	389
#define	POLYELEMX	390
#define	OBJECTX	391
#define	DESCX	392
#define	PRIMX	393
#define	POLYX	394
#define	MATX	395
#define	ENVX	396
#define	LIGHTX	397
#define	POINTORDER	398
#define	CLOCKWISE	399
#define	COUNTERCLOCKWISE	400
#define	EXTRUDE	401
#define	REVOLUTE	402
#define	LSDIREKT	403
#define	LSFLANKEN	404
#define	TSDIREKT	405
#define	TSFLANKEN	406
#define	KSNACHHALL	407
#define	FLAECHENMASSE	408
#define	ABSTRAHL	409
#define	INVERLUST	410
#define	KOINZIDENZ	411
#define	OKTAV	412
#define	TERZ	413
#define	REAL	414
#define	KOMPLEX	415
#define	TENSOR	416
#define	FLAG	417
#define	LUFT	418
#define	TEMP	419
#define	ABSEXP	420
#define	ABSIMP	421
#define	STREU	422
#define	TRANSMISSION	423
#define	FONT	424

#line 13 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"

#ifdef __ksr__
#include <alloca.h>
#endif
#include <stdio.h>
#include <math.h>

#include "OSGFhsComm.h"

#ifdef __sgi
#pragma set woff 1174
#endif

#include <OSGConfig.h>

OSG_BEGIN_NAMESPACE
unsigned int zeilennr   =1;

#define YYDEBUG 1

FHSTYPE fhs_data;

OSG_END_NAMESPACE

using OSG::zeilennr;
using OSG::setfunctions;
using OSG::fhs_data;

extern FILE *fhs_out;
extern FILE *fhs_in;
extern void *flActiveObject;

/* prototyes to avoid warnings */
int fhs_lex(void);
static void __yy_memcpy (char *to, char *from, int count);


/************************************************************************/
/***                                                                  ***/
/************************************************************************/
void fhs_error (char *s)  /* Called by fhs_parse on error */
{
  printf ("-----> %s in Line %d \n", s, zeilennr);
#ifndef FHS2BIN
  flActiveObject=NULL;
#endif
}

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		846
#define	YYFLAG		-32768
#define	YYNTBASE	171

#define YYTRANSLATE(x) ((unsigned)(x) <= 424 ? yytranslate[x] : 300)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     8,     9,    12,    13,    16,    18,    20,
    22,    24,    26,    28,    30,    33,    36,    38,    40,    41,
    50,    51,    59,    60,    67,    73,    74,    80,    83,    85,
    88,    90,    92,    94,    96,    99,   102,   103,   106,   108,
   111,   114,   117,   120,   123,   126,   129,   132,   135,   139,
   142,   144,   146,   148,   150,   152,   154,   155,   158,   159,
   166,   167,   175,   176,   184,   185,   191,   192,   197,   198,
   204,   207,   209,   212,   214,   217,   219,   220,   225,   226,
   231,   234,   235,   238,   239,   242,   243,   244,   253,   254,
   255,   265,   266,   274,   275,   276,   284,   285,   292,   293,
   300,   311,   330,   351,   366,   367,   370,   373,   376,   378,
   380,   383,   385,   387,   389,   390,   396,   397,   403,   404,
   410,   411,   417,   418,   424,   425,   431,   432,   438,   439,
   445,   446,   452,   453,   459,   460,   466,   469,   471,   472,
   475,   478,   481,   484,   487,   490,   493,   496,   499,   502,
   505,   508,   511,   514,   517,   520,   523,   526,   529,   532,
   535,   538,   541,   544,   547,   550,   553,   556,   559,   562,
   565,   567,   569,   572,   573,   580,   583,   586,   587,   590,
   593,   596,   599,   602,   605,   608,   613,   616,   620,   624,
   625,   632,   633,   638,   642,   646,   647,   650,   651,   652,
   656,   658,   659,   667,   670,   674,   675,   682,   683,   689,
   690,   693,   711,   714,   717,   720,   723,   726,   729,   732,
   735,   738,   741,   744,   747,   750,   753,   756,   759,   762,
   766,   770,   773,   776,   779,   781,   783,   786,   789,   792,
   795,   798,   801,   804,   807,   810,   813,   816,   819,   822,
   825,   827,   829,   831,   833,   835,   837,   839,   841,   843,
   845,   847,   849,   851,   853,   858,   860,   862,   867,   869,
   871,   872,   873,   882,   883,   884,   892,   893,   896,   911,
   913,   928,   930,   955,   962,   971,   980,   989,   992,  1001,
  1002,  1016,  1025,  1028,  1029,  1036,  1037,  1043,  1044,  1047,
  1056,  1059,  1068,  1071,  1074,  1076,  1077,  1078,  1081,  1082,
  1085,  1093,  1103,  1109,  1110,  1111,  1117,  1118,  1122,  1128,
  1162,  1163,  1169,  1170,  1176,  1179,  1182,  1183,  1187,  1188,
  1192,  1193,  1197,  1198,  1204,  1205,  1208,  1210,  1212,  1214,
  1217,  1220,  1223,  1226,  1231,  1235,  1239,  1242,  1245,  1247,
  1249,  1251,  1253
};

static const short yyrhs[] = {   172,
   173,     0,     3,    98,     0,     3,     0,     0,   173,   175,
     0,     0,   174,   175,     0,   179,     0,   193,     0,   262,
     0,   270,     0,   177,     0,   247,     0,   231,     0,   144,
   176,     0,   137,    98,     0,   145,     0,   146,     0,     0,
    11,    98,   178,   185,    92,    12,    98,    95,     0,     0,
     7,    98,   180,   185,    92,   187,    95,     0,     0,     7,
   181,   185,    92,   187,    95,     0,   183,   185,    92,   174,
    95,     0,     0,   183,    37,    98,   182,   185,     0,     6,
    98,     0,     6,     0,   130,    98,     0,   130,     0,   131,
     0,   132,     0,   133,     0,   134,   278,     0,   135,   278,
     0,     0,   185,   186,     0,    35,     0,    55,    97,     0,
    36,    97,     0,   163,    97,     0,   164,    97,     0,   165,
    97,     0,   166,   287,     0,   167,   287,     0,   168,   287,
     0,    99,    97,     0,    99,    97,    97,     0,   138,    98,
     0,   298,     0,   256,     0,   259,     0,   246,     0,   236,
     0,   184,     0,     0,   187,   188,     0,     0,     8,    97,
    92,   189,   174,    95,     0,     0,     8,    97,    97,    92,
   190,   174,    95,     0,     0,    39,    97,   191,    92,   278,
   278,    95,     0,     0,    38,    92,   192,   174,    95,     0,
     0,   196,   185,   194,   197,     0,     0,   196,    37,    98,
   195,   185,     0,     4,    98,     0,     4,     0,     5,    98,
     0,     5,     0,    10,    98,     0,    10,     0,     0,    92,
   198,   201,    95,     0,     0,    92,   199,   210,    95,     0,
    92,    95,     0,     0,   200,   210,     0,     0,   201,   202,
     0,     0,     0,     8,    97,   203,   185,    92,   204,   210,
    95,     0,     0,     0,     8,    97,    97,   205,   185,    92,
   206,   210,    95,     0,     0,    39,    97,   207,    92,   278,
   278,    95,     0,     0,     0,    38,   208,   185,    92,   209,
   210,    95,     0,     0,   147,    97,   211,    92,   277,    95,
     0,     0,   148,    97,   212,    92,   277,    95,     0,    13,
    93,    97,   275,    97,   275,    97,   275,    97,    96,     0,
    14,    93,    97,   275,    97,   275,    97,   275,    97,   275,
    97,   275,    97,   275,    97,   275,    97,    96,     0,    15,
    93,    97,   275,    97,   275,    97,   275,    97,   275,    97,
   275,    97,   275,    97,   275,    97,   275,    97,    96,     0,
    17,    93,    97,   275,    97,   275,    97,   275,    97,   275,
    97,   275,    97,    96,     0,     0,   213,   214,     0,   210,
   237,     0,   139,    98,     0,   215,     0,   216,     0,   215,
   216,     0,   217,     0,   246,     0,   236,     0,     0,    18,
   218,    92,   229,    95,     0,     0,    19,   219,    92,   229,
    95,     0,     0,    23,   220,    92,   229,    95,     0,     0,
    20,   221,    92,   229,    95,     0,     0,    21,   222,    92,
   229,    95,     0,     0,    25,   223,    92,   229,    95,     0,
     0,    22,   224,    92,   229,    95,     0,     0,    27,   225,
    92,   229,    95,     0,     0,    24,   226,    92,   229,    95,
     0,     0,    26,   227,    92,   229,    95,     0,     0,    30,
   228,    92,   229,    95,     0,   140,    98,     0,   247,     0,
     0,   229,   230,     0,   109,   278,     0,   108,    97,     0,
   108,   280,     0,   108,   278,     0,   110,    97,     0,   110,
   278,     0,   107,    97,     0,   107,   278,     0,   129,    97,
     0,   107,   279,     0,   111,    97,     0,    51,    97,     0,
   112,    97,     0,   123,    97,     0,   113,    97,     0,   114,
    97,     0,   115,    97,     0,   116,    97,     0,   117,    97,
     0,   118,    97,     0,   124,    97,     0,   125,    97,     0,
   126,    97,     0,   119,    97,     0,   120,    97,     0,   121,
    97,     0,   122,    97,     0,   127,    97,     0,   128,    97,
     0,   169,   287,     0,   237,     0,   281,     0,   136,    98,
     0,     0,   233,   185,   232,    92,   234,    95,     0,    16,
    98,     0,   234,   235,     0,     0,   107,   278,     0,   109,
   278,     0,   170,    98,     0,   108,    98,     0,    51,    97,
     0,   111,    97,     0,   110,    97,     0,    31,    32,    97,
    97,     0,    31,    33,     0,    31,    33,    97,     0,    31,
    34,    98,     0,     0,    31,    32,    97,    97,   238,   240,
     0,     0,    31,    33,   239,   244,     0,    31,    33,    97,
     0,    92,   241,    95,     0,     0,   241,   242,     0,     0,
     0,   243,   278,   278,     0,   242,     0,     0,    92,   245,
   244,   244,   244,   244,    95,     0,    91,    98,     0,    91,
    37,    98,     0,     0,    90,    98,   248,    92,   250,    95,
     0,     0,    90,   249,    92,   250,    95,     0,     0,   250,
   251,     0,    93,    97,   275,    97,   275,    97,   275,    97,
   275,    97,   275,    97,   275,    97,   275,    97,    96,     0,
    82,   278,     0,    82,    98,     0,    74,    97,     0,    87,
    97,     0,    74,   278,     0,    75,    97,     0,    88,    97,
     0,    75,   278,     0,   102,    97,     0,   102,   278,     0,
    76,    97,     0,    76,   278,     0,    77,    97,     0,    78,
    97,     0,    89,    97,     0,    79,    97,     0,    49,    98,
     0,    56,   252,   252,     0,    61,   253,   253,     0,    65,
   254,     0,    68,   255,     0,    50,   278,     0,    53,     0,
    54,     0,   141,    98,     0,    80,    97,     0,    51,    97,
     0,    52,    98,     0,    36,    97,     0,   149,   287,     0,
   150,   287,     0,   151,   287,     0,   152,   287,     0,   153,
   287,     0,   154,    97,     0,   155,   287,     0,   157,    97,
     0,   156,   287,     0,    57,     0,    58,     0,    59,     0,
    60,     0,    62,     0,    63,     0,    64,     0,    66,     0,
    67,     0,    69,     0,    70,     0,    72,     0,    71,     0,
    73,     0,   257,    92,   258,    95,     0,    28,     0,   276,
     0,   260,    92,   261,    95,     0,    29,     0,   229,     0,
     0,     0,   100,    98,   263,   185,    92,   264,   267,    95,
     0,     0,     0,   100,   265,   185,    92,   266,   267,    95,
     0,     0,   267,   268,     0,   103,    93,    97,   275,    97,
   275,    97,   275,    97,   275,    97,   275,    97,    96,     0,
   103,     0,   104,    93,    97,   275,    97,   275,    97,   275,
    97,   275,    97,   275,    97,    96,     0,   104,     0,   105,
    93,    97,   275,    97,   275,    97,   275,    97,   275,    97,
   275,    97,   275,    97,   275,    97,   275,    97,   275,    97,
   275,    97,    96,     0,   105,    93,    97,   275,    97,    96,
     0,   102,    93,    97,   275,    97,   275,    97,    96,     0,
    81,    93,    97,   275,    97,   275,    97,    96,     0,    82,
    93,    97,   275,    97,   275,    97,    96,     0,    82,    98,
     0,    83,    93,    97,   275,    97,   275,    97,    96,     0,
     0,    86,    93,    98,   275,   269,    97,   275,    97,   275,
    97,   275,    97,    96,     0,   106,    93,    97,   275,    97,
   275,    97,    96,     0,   143,    98,     0,     0,   101,    98,
   271,    92,   273,    95,     0,     0,   101,   272,    92,   273,
    95,     0,     0,   273,   274,     0,   106,    93,    97,   275,
    97,   275,    97,    96,     0,   106,    98,     0,   102,    93,
    97,   275,    97,   275,    97,    96,     0,   102,    98,     0,
   142,    98,     0,    94,     0,     0,     0,   276,   278,     0,
     0,   277,   280,     0,    93,    97,   275,    97,   275,    97,
    96,     0,    93,    97,   275,    97,   275,    97,   275,    97,
    96,     0,    93,    97,   275,    97,    96,     0,     0,     0,
    93,   282,   284,   283,    96,     0,     0,   284,    97,   275,
     0,    93,    97,   275,    97,    96,     0,    93,    97,   275,
    97,   275,    97,   275,    97,   275,    97,   275,    97,   275,
    97,   275,    97,   275,    97,   275,    97,   275,    97,   275,
    97,   275,    97,   275,    97,   275,    97,   275,    97,    96,
     0,     0,   158,   288,    92,   290,    95,     0,     0,   159,
   289,    92,   290,    95,     0,   160,    97,     0,   161,   285,
     0,     0,   160,   291,   294,     0,     0,   161,   292,   294,
     0,     0,   162,   293,   294,     0,     0,    97,   295,    92,
   296,    95,     0,     0,   296,   297,     0,    97,     0,   285,
     0,   286,     0,    40,   286,     0,    41,   286,     0,    47,
   286,     0,    42,   278,     0,    48,   278,   278,   278,     0,
    43,   278,    97,     0,    43,   299,    97,     0,    44,   278,
     0,    44,    97,     0,    45,     0,    46,     0,   131,     0,
   132,     0,   133,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   115,   121,   125,   131,   132,   139,   140,   143,   144,   145,
   146,   147,   148,   149,   150,   154,   160,   161,   169,   173,
   181,   185,   189,   193,   201,   205,   210,   215,   219,   223,
   227,   233,   234,   235,   236,   237,   240,   241,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   267,   268,   271,   275,
   279,   283,   287,   291,   295,   299,   316,   321,   324,   329,
   334,   339,   343,   347,   351,   355,   362,   367,   371,   375,
   379,   384,   388,   393,   394,   397,   401,   405,   409,   413,
   417,   421,   425,   429,   433,   437,   450,   454,   458,   462,
   466,   474,   486,   499,   509,   513,   516,   517,   523,   525,
   526,   528,   529,   530,   532,   536,   540,   544,   548,   552,
   556,   560,   564,   568,   572,   576,   580,   584,   588,   592,
   596,   600,   604,   608,   612,   616,   620,   624,   627,   628,
   631,   633,   634,   635,   636,   637,   638,   639,   640,   641,
   642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
   652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
   663,   664,   665,   670,   674,   679,   685,   686,   689,   693,
   697,   701,   705,   709,   713,   721,   725,   729,   733,   739,
   744,   747,   752,   755,   761,   762,   764,   765,   768,   771,
   777,   778,   782,   791,   795,   800,   804,   808,   812,   818,
   819,   822,   833,   834,   835,   836,   837,   838,   839,   840,
   841,   842,   843,   844,   845,   846,   847,   848,   849,   850,
   852,   854,   856,   858,   859,   860,   861,   863,   864,   865,
   867,   868,   869,   870,   871,   872,   873,   874,   875,   876,
   879,   880,   881,   882,   885,   886,   887,   890,   891,   894,
   895,   896,   897,   898,   907,   910,   916,   922,   925,   931,
   941,   946,   950,   954,   959,   963,   969,   970,   973,   983,
   987,   997,  1001,  1016,  1022,  1029,  1036,  1043,  1047,  1054,
  1058,  1065,  1072,  1078,  1082,  1086,  1090,  1096,  1097,  1100,
  1107,  1111,  1118,  1122,  1132,  1133,  1135,  1136,  1138,  1139,
  1142,  1148,  1154,  1160,  1165,  1169,  1171,  1172,  1180,  1183,
  1189,  1193,  1194,  1198,  1199,  1203,  1209,  1214,  1214,  1219,
  1219,  1225,  1225,  1229,  1232,  1233,  1236,  1237,  1238,  1241,
  1242,  1243,  1244,  1245,  1247,  1248,  1249,  1250,  1251,  1252,
  1255,  1256,  1257
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","MODEL",
"GEOMETRY","LODGEOMETRY","ASSEMBLY","LODASSEMBLY","LOD","ACOUSTIC","TUBEGEOMETRY",
"EXTFILE","NAME","SPHERE","CONE","TORUS","TEXTFHS","BOX","POLYGON","TRISTRIP",
"QUADSTRIP","LINE","CLOSEDLINE","TRIFAN","TRIANGLES","LINES","QUADS","POINTSFHS",
"PPOOL","POLYPOOL","TUBE","PATCHES","UNIFORM","ADAPTIVE","POOL","SCRIPT","TYPE",
"FROM","IDEAL","BBOX","DCS","SCS","TRANSLATE","ROTATE","SCALE","STATIC","DYNAMIC",
"MATRIX","ORIENTATION","TEXTURE","TEXTRANSCOLOR","RAD","BRDF","UNLIT","LIT",
"ID","TEXFILTER","POINTFHS","LINEAR","MIPMAP","SHARPEN","TEXWRAP","REPEAT","CLAMP",
"SELECT","TEXQUALITY","HIGH","LOW","TEXBLEND","MODULATE","DECAL","BLEND","REPLACE",
"ADD","DIFFUSE","SPECULAR","EMISSION","ALPHA","TRANSPARENCY","SHININESS","IOR",
"POSITION","COLOR","DIRECTION","UP","LUMEN","LVK","KD","KS","KT","DEFMAT","USEMAT",
"G_AUF","R_AUF","COLON","G_ZU","R_ZU","NUMBER","STRING","RESOLUTION","LIGHT",
"ENVIRONMENT","AMBIENT","POINTLIGHT","DIRECTLIGHT","SPOTLIGHT","BACKGROUND",
"COL","TEX","POS","NORM","IND","CIND","NIND","TIND","T3IND","CNIND","CTIND",
"CT3IND","TNIND","T3NIND","CTNIND","CT3NIND","CTRIND","CTRNIND","CTRTIND","CTRT3IND",
"CTRTNIND","CTRT3NIND","TRANSP","BILLBOARD","XAXIS","YAXIS","ZAXIS","AXIS","CENTER",
"POLYELEMX","OBJECTX","DESCX","PRIMX","POLYX","MATX","ENVX","LIGHTX","POINTORDER",
"CLOCKWISE","COUNTERCLOCKWISE","EXTRUDE","REVOLUTE","LSDIREKT","LSFLANKEN","TSDIREKT",
"TSFLANKEN","KSNACHHALL","FLAECHENMASSE","ABSTRAHL","INVERLUST","KOINZIDENZ",
"OKTAV","TERZ","REAL","KOMPLEX","TENSOR","FLAG","LUFT","TEMP","ABSEXP","ABSIMP",
"STREU","TRANSMISSION","FONT","model","model_head","model_list","objects","object",
"po_def","file","@1","assembly","@2","@3","@4","assembly_head","billboard_type",
"descriptions","description","lod_ass","lod_ass_elem","@5","@6","@7","@8","geometry",
"@9","@10","geometry_head","geometry_body","@11","@12","@13","lod_geo","lod_geo_elem",
"@14","@15","@16","@17","@18","@19","@20","primitive","@21","@22","@23","polyeder",
"poly_item_iter","poly_item","polygon","@24","@25","@26","@27","@28","@29","@30",
"@31","@32","@33","@34","polygon_list","polygon_element","text","@35","text_head",
"text_body","text_body_elem","patch_head","patches","@36","@37","pat_uni_data",
"pat_uni_elem","rad_elem","@38","pat_adap_data","@39","mat_use","mat_def","@40",
"@41","mat_list","mat_element","texfilter","texwrap","texquality","texblend",
"ppool","ppool_header","ppool_body","polypool","polypool_header","polypool_body",
"light_def","@42","@43","@44","@45","light_list","light_element","@46","environment",
"@47","@48","env_list","env_element","opt_colon","vectors","vectors2","vector",
"vect4","vect2","lvect","@49","@50","lvect_body","complex","matrix","frequency",
"@51","@52","freq_header","@53","@54","@55","freq_body","@56","freq_elements",
"freq_element","transformation","axis", NULL
};
#endif

static const short yyr1[] = {     0,
   171,   172,   172,   173,   173,   174,   174,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   176,   176,   178,   177,
   180,   179,   181,   179,   179,   182,   179,   183,   183,   183,
   183,   184,   184,   184,   184,   184,   185,   185,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   187,   187,   189,   188,
   190,   188,   191,   188,   192,   188,   194,   193,   195,   193,
   196,   196,   196,   196,   196,   196,   198,   197,   199,   197,
   197,   200,   197,   201,   201,   203,   204,   202,   205,   206,
   202,   207,   202,   208,   209,   202,   211,   210,   212,   210,
   210,   210,   210,   210,   213,   210,   210,   210,   214,   215,
   215,   216,   216,   216,   218,   217,   219,   217,   220,   217,
   221,   217,   222,   217,   223,   217,   224,   217,   225,   217,
   226,   217,   227,   217,   228,   217,   217,   217,   229,   229,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   230,   230,   230,   230,   230,   230,   230,
   230,   230,   230,   232,   231,   233,   234,   234,   235,   235,
   235,   235,   235,   235,   235,   236,   236,   236,   236,   238,
   237,   239,   237,   237,   240,   240,   241,   241,   243,   242,
   244,   245,   244,   246,   246,   248,   247,   249,   247,   250,
   250,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   251,   251,   251,   251,   251,   251,   251,   251,   251,   251,
   252,   252,   252,   252,   253,   253,   253,   254,   254,   255,
   255,   255,   255,   255,   256,   257,   258,   259,   260,   261,
   263,   264,   262,   265,   266,   262,   267,   267,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   269,
   268,   268,   268,   271,   270,   272,   270,   273,   273,   274,
   274,   274,   274,   274,   275,   275,   276,   276,   277,   277,
   278,   279,   280,   282,   283,   281,   284,   284,   285,   286,
   288,   287,   289,   287,   287,   287,   291,   290,   292,   290,
   293,   290,   295,   294,   296,   296,   297,   297,   297,   298,
   298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
   299,   299,   299
};

static const short yyr2[] = {     0,
     2,     2,     1,     0,     2,     0,     2,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     1,     1,     0,     8,
     0,     7,     0,     6,     5,     0,     5,     2,     1,     2,
     1,     1,     1,     1,     2,     2,     0,     2,     1,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     3,     2,
     1,     1,     1,     1,     1,     1,     0,     2,     0,     6,
     0,     7,     0,     7,     0,     5,     0,     4,     0,     5,
     2,     1,     2,     1,     2,     1,     0,     4,     0,     4,
     2,     0,     2,     0,     2,     0,     0,     8,     0,     0,
     9,     0,     7,     0,     0,     7,     0,     6,     0,     6,
    10,    18,    20,    14,     0,     2,     2,     2,     1,     1,
     2,     1,     1,     1,     0,     5,     0,     5,     0,     5,
     0,     5,     0,     5,     0,     5,     0,     5,     0,     5,
     0,     5,     0,     5,     0,     5,     2,     1,     0,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     2,     0,     6,     2,     2,     0,     2,     2,
     2,     2,     2,     2,     2,     4,     2,     3,     3,     0,
     6,     0,     4,     3,     3,     0,     2,     0,     0,     3,
     1,     0,     7,     2,     3,     0,     6,     0,     5,     0,
     2,    17,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     3,     2,     2,     2,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     1,     1,     4,     1,     1,
     0,     0,     8,     0,     0,     7,     0,     2,    14,     1,
    14,     1,    24,     6,     8,     8,     8,     2,     8,     0,
    13,     8,     2,     0,     6,     0,     5,     0,     2,     8,
     2,     8,     2,     2,     1,     0,     0,     2,     0,     2,
     7,     9,     5,     0,     0,     5,     0,     3,     5,    33,
     0,     5,     0,     5,     2,     2,     0,     3,     0,     3,
     0,     3,     0,     5,     0,     2,     1,     1,     1,     2,
     2,     2,     2,     4,     3,     3,     2,     2,     1,     1,
     1,     1,     1
};

static const short yydefact[] = {     0,
     3,     4,     2,     1,    72,    74,    29,    23,    76,     0,
     0,   208,   274,   296,    31,     0,     0,     5,    12,     8,
    37,     9,    37,    14,    37,    13,    10,    11,    71,    73,
    28,    21,    37,    75,    19,   176,   206,     0,   271,    37,
   294,     0,    30,    16,    17,    18,    15,     0,     0,     0,
    67,   174,    37,     0,    37,     0,   210,    37,     0,     0,
   298,    26,   266,   269,     0,    39,     0,     0,     0,     0,
     0,     0,   349,   350,     0,     0,     0,     0,     6,     0,
    32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    56,    38,    55,    54,    52,     0,    53,     0,
    51,    69,    82,     0,     0,    57,     0,   210,     0,     0,
   275,   298,     0,    37,     0,   187,     0,    41,     0,   340,
   341,     0,   343,   351,   352,   353,     0,     0,   348,   347,
   342,     0,    40,     0,   204,     0,    48,    35,    36,    50,
    42,    43,    44,   321,   323,     0,     0,    45,    46,    47,
   307,   139,    37,    79,    68,   105,   178,    57,     0,     0,
     0,     0,     0,     0,     0,     0,   235,   236,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   211,   272,   277,     0,
   297,     0,     0,     0,   299,    27,     0,   188,   189,   306,
   306,   345,   346,     0,   205,    25,     7,    49,     0,     0,
   325,     0,   326,     0,   267,   270,     0,    70,    81,    84,
   105,     0,     0,     0,     0,     0,     0,     0,    83,     0,
     0,     0,     0,     0,     0,    24,    58,     0,   207,   241,
   229,   234,   239,   240,   251,   252,   253,   254,     0,   255,
   256,   257,     0,   258,   259,   232,   260,   261,   263,   262,
   264,   233,   215,   217,   218,   220,   223,   224,   225,   226,
   228,   238,   214,   213,   216,   219,   227,   306,   221,   222,
   237,   242,   243,   244,   245,   246,   247,   248,   250,   249,
   277,     0,   295,     0,   303,     0,   301,   304,   186,   305,
     0,     0,   344,     0,     0,   306,   265,   308,     0,     0,
   314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   140,   171,   172,   268,
     0,     0,     0,     0,     0,     0,   108,    97,    99,   107,
   115,   117,   121,   123,   127,   119,   131,   125,   133,   129,
   135,     0,   106,   109,   110,   112,   114,   113,   138,     0,
   175,     0,     0,     0,     0,     0,     0,   177,    22,     0,
    65,    63,     0,   230,   231,     0,     0,     0,     0,     0,
     0,   276,     0,   280,   282,     0,     0,     0,   278,   306,
   306,   306,   306,   327,   329,   331,     0,     0,     0,     0,
   192,   152,   317,     0,   147,   148,   150,     0,   142,   144,
   143,   141,   145,   146,   151,   153,   155,   156,   157,   158,
   159,   160,   164,   165,   166,   167,   154,   161,   162,   163,
   168,   169,   149,   173,   170,     0,    94,     0,    78,    85,
    80,   306,   306,   306,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,   111,
   183,   179,   182,   180,   185,   184,   181,    59,     0,     6,
     0,    20,   306,   273,     0,     0,   288,     0,     0,     0,
     0,     0,     0,     0,   293,     0,     0,     0,     0,     0,
     0,     0,   322,   324,     0,     0,   194,   199,   315,   306,
   306,    86,    37,    92,     0,     0,     0,     0,   309,   309,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,     6,    61,     0,     0,     0,   306,   306,   306,   306,
   306,   306,   306,   306,   306,   306,   306,   306,     0,   333,
   328,   330,   332,   319,   190,   202,   201,     0,   193,   306,
     0,     0,     0,    89,    37,     0,     0,   306,   306,   306,
   306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,    66,     0,   306,     0,
     0,     0,   290,     0,     0,     0,     0,     0,     0,     0,
     0,   311,     0,   196,   199,     0,   318,   316,   306,   306,
    37,     0,    95,     0,     0,     0,     0,     0,     0,    98,
   310,   100,   116,   118,   122,   124,   128,   120,   132,   126,
   134,   130,   136,    60,     0,     0,     0,   306,   306,   306,
     0,   306,   306,   306,   306,   306,     0,     0,   306,   335,
   198,   191,   199,   200,     0,   313,     0,    87,   105,     0,
   306,   306,   306,   306,   306,    62,    64,   306,     0,     0,
     0,   306,     0,     0,     0,   284,     0,     0,   302,   300,
     0,     0,   199,   199,   306,    90,   105,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   306,   306,   306,     0,   306,     0,   334,   337,   338,   339,
   336,   195,   197,   199,     0,   105,     0,    96,    93,     0,
   306,   306,   306,     0,   306,   286,   287,   289,   306,   285,
     0,     0,     0,   292,     0,   306,     0,     0,     0,    88,
   101,     0,     0,     0,     0,     0,   306,   306,   306,   306,
     0,   203,   312,    91,   306,   306,   306,   306,   306,     0,
     0,     0,     0,   306,     0,     0,     0,     0,     0,   306,
   306,   306,   306,   306,   306,     0,   306,     0,     0,     0,
     0,     0,     0,     0,   104,     0,   291,     0,     0,   306,
   306,   306,   306,     0,   279,   281,     0,     0,     0,     0,
   212,   306,   306,     0,   306,     0,     0,   102,     0,   306,
   306,     0,     0,     0,   103,   306,   306,     0,     0,   306,
   306,     0,     0,     0,   306,   283,     0,   306,     0,   306,
     0,     0,   320,     0,     0,     0
};

static const short yydefgoto[] = {   844,
     2,     4,   136,   217,    47,    19,    55,    20,    53,    33,
   114,    21,    93,    49,    94,   159,   247,   542,   596,   491,
   490,    22,   103,   153,    23,   155,   230,   231,   156,   351,
   460,   575,   697,   621,   726,   577,   523,   669,   239,   466,
   467,   240,   373,   374,   375,   376,   468,   469,   473,   470,
   471,   475,   472,   477,   474,   476,   478,   226,   347,    24,
   104,    25,   241,   388,    95,   348,   614,   518,   662,   693,
   567,   568,   569,   615,    96,    26,    56,    38,   109,   197,
   259,   263,   266,   272,    97,    98,   224,    99,   100,   227,
    27,    58,   301,    40,   199,   302,   409,   651,    28,    60,
    42,   113,   205,   508,   225,   582,   123,   427,   631,   349,
   423,   571,   519,   223,   120,   148,   219,   220,   417,   510,
   511,   512,   561,   613,   692,   721,   101,   128
};

static const short yypact[] = {    16,
   -87,-32768,-32768,  1168,   -57,   -39,   -29,   -24,    -5,     4,
    14,    36,    39,    98,   101,   130,   -93,-32768,-32768,-32768,
   137,-32768,   146,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   164,-32768,-32768,
-32768,   165,-32768,-32768,-32768,-32768,-32768,   174,    44,   175,
  1110,  1110,-32768,   190,-32768,   185,-32768,-32768,   603,   188,
-32768,-32768,-32768,-32768,    -6,-32768,   195,   192,   192,   198,
   -68,   -16,-32768,-32768,   192,   198,   201,   -22,-32768,   202,
-32768,-32768,-32768,   198,   198,   210,   219,   220,   222,   154,
   154,   154,-32768,-32768,-32768,-32768,-32768,   234,-32768,   235,
-32768,-32768,   237,   238,   624,-32768,   765,-32768,  1990,   786,
-32768,-32768,    85,-32768,   236,   239,   233,-32768,   252,-32768,
-32768,   253,-32768,-32768,-32768,-32768,   254,   255,-32768,-32768,
-32768,   198,-32768,   261,-32768,    51,   264,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   265,   270,-32768,-32768,-32768,
-32768,-32768,-32768,     9,-32768,    19,-32768,-32768,    75,   320,
  2099,   267,   268,   198,   275,   269,-32768,-32768,   245,    56,
    96,   144,    28,    52,    71,   279,   280,   282,   284,   -75,
   285,   286,   289,   291,-32768,    92,   294,   154,   154,   154,
   154,   154,   296,   154,   154,   302,-32768,-32768,-32768,   145,
-32768,   -58,   -56,   306,-32768,  1110,   308,-32768,-32768,   271,
   271,-32768,-32768,   198,-32768,-32768,-32768,-32768,   316,   319,
-32768,   317,-32768,   318,   198,  1987,   321,  1110,-32768,-32768,
    19,   322,   324,   325,   326,   323,   327,   328,   391,   244,
   -13,   109,   329,   331,   332,-32768,-32768,   330,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   245,-32768,
-32768,-32768,    56,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   271,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   292,-32768,   333,-32768,   334,-32768,-32768,-32768,-32768,
   335,   336,-32768,    81,    81,   271,-32768,-32768,   173,   339,
-32768,   100,   105,   198,   127,   340,   344,   350,   351,   353,
   355,   359,   360,   362,   363,   369,   373,   374,   376,   383,
   385,   386,   387,   390,   392,   154,-32768,-32768,-32768,-32768,
   134,     8,   395,   397,   398,   402,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   408,-32768,   244,-32768,-32768,-32768,-32768,-32768,   403,
-32768,   198,   409,   198,   412,   413,   414,-32768,-32768,   -47,
-32768,-32768,   393,-32768,-32768,   416,   372,   400,   -27,   418,
   423,-32768,   424,   425,   426,   431,   434,   430,-32768,   271,
   271,   271,   271,-32768,-32768,-32768,   394,   435,   438,   440,
   441,-32768,-32768,   442,-32768,-32768,-32768,   444,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   445,-32768,   446,-32768,-32768,
-32768,   271,   271,   271,   271,   439,   452,   453,   454,   459,
   461,   462,   469,   470,   471,   472,   473,   475,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   476,-32768,
   477,-32768,   271,-32768,   479,   492,-32768,   497,   498,   500,
   501,   502,   503,   504,-32768,   507,   510,   511,   512,   516,
   516,   516,-32768,-32768,   436,   517,-32768,   523,   521,   271,
   271,   522,-32768,-32768,   525,   526,   527,   530,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   149,   198,   532,   271,   271,   271,   271,
   271,   271,   271,   271,   271,   271,   271,   271,   499,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   198,-32768,   271,
   537,   538,   539,-32768,-32768,   927,   545,   271,   271,   271,
   271,    76,    91,  1208,  1307,  1344,  1443,  1480,  1579,  1616,
  1715,  1752,  1851,  1888,   290,-32768,-32768,   198,   271,   543,
   544,   557,-32768,   559,   560,   564,   565,   566,   576,   577,
   578,-32768,   550,   584,   523,   198,-32768,-32768,   271,   152,
-32768,   948,-32768,   198,   580,   581,   583,   585,   586,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   396,   589,   588,   271,   271,   271,
   590,   271,   271,   271,   182,   271,   592,   593,   271,-32768,
-32768,-32768,   523,-32768,   594,-32768,  1089,-32768,    19,   198,
   271,   271,   271,   271,   271,-32768,-32768,   271,   595,   596,
   599,   271,   600,   601,   602,-32768,   604,   606,-32768,-32768,
   607,    97,   591,   523,   194,-32768,    19,    12,   605,   608,
   609,   610,   611,   612,   613,   615,   616,   617,   620,   618,
   271,   271,   271,   622,   271,   623,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   523,   625,    19,    20,-32768,-32768,   628,
   271,   271,   271,   629,   271,-32768,-32768,-32768,   271,-32768,
   630,   631,   632,-32768,   633,   271,   626,   635,    29,-32768,
-32768,   636,   642,   643,   645,   646,   271,   271,   271,   271,
   647,-32768,-32768,-32768,   271,   271,   271,   271,   271,   648,
   649,   650,   651,   213,   652,   653,   654,   655,   656,   271,
   271,   271,   271,   271,   271,   658,   271,   664,   666,   667,
   668,   675,   676,   677,-32768,   678,-32768,   665,   680,   271,
   271,   271,   271,   681,-32768,-32768,   682,   683,   684,   685,
-32768,   271,   271,   687,   271,   688,   689,-32768,   698,   271,
   271,   701,   702,   705,-32768,   271,   271,   706,   707,   271,
   271,   719,   721,   723,   271,-32768,   726,   271,   727,   271,
   728,   739,-32768,   690,   732,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,  -488,   715,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    -9,-32768,   568,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -218,-32768,
-32768,-32768,-32768,-32768,   307,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    47,-32768,-32768,
-32768,-32768,-32768,-32768,  -236,  -229,-32768,-32768,-32768,-32768,
   143,-32768,  -593,-32768,  -235,  -234,-32768,-32768,   670,-32768,
   579,   535,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   483,-32768,-32768,-32768,-32768,
-32768,   725,-32768,  -210,-32768,   309,   -64,-32768,   519,-32768,
-32768,-32768,-32768,   148,   -66,   -62,-32768,-32768,   528,-32768,
-32768,-32768,  -289,-32768,-32768,-32768,-32768,-32768
};


#define	YYLAST		2256


static const short yytable[] = {   311,
   312,   544,   121,   377,   378,   379,   127,   130,   131,   360,
     3,   132,   352,    51,   134,    52,   -77,   122,     1,   138,
   139,   663,   283,    54,   122,   115,   116,   117,   149,   150,
    59,   232,   233,   234,   304,   235,   306,   380,   319,   305,
    29,   307,   319,   105,   488,   107,   -77,   -77,   110,   489,
   319,    45,    46,   595,     5,     6,     7,     8,    30,   319,
     9,    10,   124,   125,   126,   496,    11,   214,    31,   694,
   497,    63,    64,    32,    65,   135,   122,   396,    66,    67,
   129,   381,   243,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    34,   382,   383,   384,   385,   386,    77,   252,
   724,    35,   461,   229,   206,   419,   728,   645,   274,   276,
   278,    36,   244,   245,   750,   284,   243,   260,   261,   262,
   122,   290,   360,   764,   273,   292,   293,   294,   295,   296,
   747,   298,   299,    37,    78,    79,    39,   377,   378,   379,
    12,   456,    80,   228,   122,   216,   244,   245,   275,   313,
    13,    14,     5,     6,     7,     8,   387,   236,     9,    10,
   318,   264,   265,   122,    11,   237,   238,   277,   629,   246,
   630,   457,   458,    48,    81,    82,    83,    84,    85,   201,
    15,    86,    50,   629,   122,   632,   202,    16,   289,   716,
   203,   717,   424,   718,    17,    41,   425,   428,    43,   506,
   507,   429,   509,   389,   420,   421,    87,    88,    89,    90,
    91,    92,   267,   268,   269,   270,   271,    63,    64,   122,
    65,   562,   563,   433,    66,    67,   204,    44,   459,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    12,   303,
   414,   415,   416,   597,    77,   310,   202,   666,    13,    14,
   203,   525,   526,   527,   528,    57,    61,   426,   430,   432,
   434,   361,   362,   363,   364,   365,   366,   367,   368,   369,
   370,    62,   102,   371,    65,   310,   108,   686,    15,   112,
    78,   106,   546,   455,   119,    16,   204,   310,    80,   612,
   122,   118,    17,     5,     6,     7,     8,   133,   137,     9,
    10,   255,   256,   257,   258,    11,   310,   140,   564,   572,
   573,   144,   145,   146,   147,   141,   142,   482,   143,   484,
    81,    82,    83,    84,    85,   151,   152,    86,   154,   157,
   209,   248,   207,    12,    78,   208,   600,   601,   602,   603,
   604,   605,   606,   607,   608,   609,   610,   611,   210,   211,
   212,   213,    87,    88,    89,    90,    91,    92,   215,   617,
   218,   221,   222,   250,   310,   251,   254,   625,   626,   627,
   628,   253,   398,   399,   400,   279,   280,   401,   281,    12,
   282,   285,   286,   372,   644,   287,   402,   288,   647,    13,
    14,   291,   297,   403,   404,   405,   406,   407,   300,     5,
     6,     7,     8,   308,   309,     9,    10,   314,   665,   509,
   315,    11,   317,   316,   353,   350,   354,   355,   356,    15,
   357,   319,   391,   358,   359,   390,    16,   393,   392,   410,
   411,   412,   413,    17,   408,   422,   435,   679,   680,   681,
   436,   683,   684,   685,   687,   688,   437,   438,   691,   439,
   698,   440,   398,   399,   400,   441,   442,   401,   443,   444,
   700,   701,   702,   703,   704,   445,   494,   705,   360,   446,
   447,   709,   448,   403,   404,   405,   406,   407,   727,   449,
   598,   450,   451,   452,   725,    12,   453,   492,   513,   454,
   676,   462,   495,   463,   464,    13,    14,   360,   465,   481,
   741,   742,   743,   616,   745,   479,   483,   749,   485,   486,
   498,   487,   493,   576,   408,   499,   500,   501,   502,   360,
   752,   753,   754,   503,   755,    15,   504,   505,   756,   514,
   529,   564,    16,   646,   515,   761,   516,   517,   520,    17,
   521,   522,   524,   530,   531,   532,   770,   771,   772,   773,
   533,   664,   534,   535,   775,   776,   777,   778,   779,   670,
   536,   537,   538,   539,   540,   622,   541,   543,   545,   789,
   790,   791,   792,   793,   794,   547,   796,   584,   585,   586,
   587,   588,   589,   590,   591,   592,   593,   594,   548,   807,
   808,   809,   810,   549,   612,   550,   551,   552,   553,   554,
   555,   816,   817,   556,   819,   699,   557,   558,   559,   823,
   824,   667,   560,   565,   566,   828,   829,   570,   574,   832,
   833,   578,   579,   580,   837,   720,   581,   839,   599,   841,
    63,    64,   618,    65,   619,   620,   624,    66,    67,   648,
   649,   660,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    63,    64,   650,    65,   652,   653,    77,    66,    67,
   654,   655,   656,    68,    69,    70,    71,    72,    73,    74,
    75,    76,   657,   658,   659,   661,   671,   672,    77,   673,
   480,   674,   675,   677,   678,   722,   682,   689,   690,   845,
   695,   706,   707,    78,   111,   708,   710,   711,   712,   729,
   713,    80,   714,   715,   730,   731,   732,   733,   734,   735,
   736,   737,   738,   740,    78,   158,   739,   744,    18,   746,
   762,   748,    80,   751,   666,   242,   757,   758,   759,   760,
   763,   846,   765,    81,    82,    83,    84,    85,   766,   767,
    86,   768,   769,   774,   780,   781,   782,   783,   784,   785,
   786,   787,   788,   795,    81,    82,    83,    84,    85,   797,
   805,    86,   798,   799,   800,    87,    88,    89,    90,    91,
    92,   801,   802,   803,   804,   806,   811,   161,   812,   813,
   814,   815,   818,   397,   820,   821,    87,    88,    89,    90,
    91,    92,    63,    64,   822,    65,   825,   395,   826,    66,
    67,   827,   830,   831,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    63,    64,   834,    65,   835,   836,    77,
    66,    67,   838,   840,   842,    68,    69,    70,    71,    72,
    73,    74,    75,    76,   843,   723,   200,   394,   583,   719,
    77,   431,   418,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    78,   160,     0,     0,     0,
     0,     0,     0,    80,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    78,   198,     0,     0,
     0,     0,     0,     0,    80,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    81,    82,    83,    84,    85,
     0,     0,    86,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    81,    82,    83,    84,
    85,     0,     0,    86,     0,     0,     0,    87,    88,    89,
    90,    91,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    88,
    89,    90,    91,    92,    63,    64,     0,    65,     0,     0,
     0,    66,    67,     0,     0,     0,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    63,    64,     0,    65,     0,
     0,    77,    66,    67,     0,     0,     0,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,    77,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    78,   623,     0,
     0,     0,     0,     0,     0,    80,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    78,   668,
     0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    81,    82,    83,
    84,    85,     0,     0,    86,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    81,    82,
    83,    84,    85,     0,     0,    86,     0,     0,     0,    87,
    88,    89,    90,    91,    92,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    87,    88,    89,    90,    91,    92,    63,    64,     0,    65,
     0,     0,     0,    66,    67,     0,     0,     0,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    63,    64,     0,
    65,     0,     0,    77,    66,    67,     0,     0,     0,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,    77,     0,     0,     0,     0,     0,
     0,     5,     6,     7,     8,     0,     0,     9,    10,    78,
   696,     0,     0,    11,     0,     0,     0,    80,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    78,     0,     0,     0,     0,     0,     0,     0,    80,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
    82,    83,    84,    85,     0,     0,    86,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,     0,
    81,    82,    83,    84,    85,     0,     0,    86,     0,     0,
     0,    87,    88,    89,    90,    91,    92,    12,   320,     0,
     0,     0,     0,     0,     0,     0,     0,    13,    14,     0,
     0,     0,    87,    88,    89,    90,    91,    92,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
   321,     0,   633,     0,    16,     0,     0,     0,     0,     0,
     0,    17,     0,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   344,   319,     0,     0,
     0,     0,     0,   345,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   319,     0,   346,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     0,   634,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   344,   321,     0,   635,     0,
     0,     0,   345,     0,     0,     0,     0,     0,     0,     0,
   322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
   342,   343,   344,   319,     0,   346,     0,     0,     0,   345,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   320,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   319,     0,   346,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   320,     0,     0,     0,     0,   321,     0,   636,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
   343,   344,   321,     0,   637,     0,     0,     0,   345,     0,
     0,     0,     0,     0,     0,     0,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   342,   343,   344,   319,
     0,   346,     0,     0,     0,   345,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   320,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   319,     0,   346,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   320,     0,     0,     0,
     0,   321,     0,   638,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   341,   342,   343,   344,   321,     0,
   639,     0,     0,     0,   345,     0,     0,     0,     0,     0,
     0,     0,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   344,   319,     0,   346,     0,     0,
     0,   345,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   320,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   319,     0,   346,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   320,     0,     0,     0,     0,   321,     0,   640,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,   342,   343,   344,   321,     0,   641,     0,     0,     0,
   345,     0,     0,     0,     0,     0,     0,     0,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
   344,   319,     0,   346,     0,     0,     0,   345,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,     0,
   346,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
     0,     0,     0,   321,     0,   642,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
   321,     0,   643,     0,     0,     0,   345,     0,     0,     0,
     0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   344,   319,     0,   346,
     0,     0,     0,   345,     0,   162,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   320,   163,   164,
   165,   166,   167,   168,     0,   169,     0,     0,     0,     0,
   170,     0,     0,     0,   171,     0,   346,   172,     0,     0,
     0,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     0,   180,     0,     0,     0,     0,   181,   182,   183,   321,
     0,     0,   184,     0,   185,     0,     0,     0,     0,     0,
     0,   186,     0,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,   342,   343,   344,     0,     0,     0,     0,
     0,     0,   345,     0,     0,     0,     0,     0,     0,     0,
   187,     0,     0,     0,   162,     0,     0,     0,   188,   189,
   190,   191,   192,   193,   194,   195,   196,   163,   164,   165,
   166,   167,   168,     0,   169,   346,     0,     0,     0,   170,
     0,     0,     0,   171,     0,     0,   172,     0,     0,     0,
     0,     0,   173,   174,   175,   176,   177,   178,   179,     0,
   180,     0,     0,     0,     0,   181,   182,   183,     0,     0,
     0,   184,     0,   249,     0,     0,     0,     0,     0,     0,
   186,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   187,
     0,     0,     0,     0,     0,     0,     0,   188,   189,   190,
   191,   192,   193,   194,   195,   196
};

static const short yycheck[] = {   210,
   211,   490,    69,   240,   240,   240,    71,    72,    75,   239,
    98,    76,   231,    23,    37,    25,     8,    93,     3,    84,
    85,   615,    98,    33,    93,    32,    33,    34,    91,    92,
    40,    13,    14,    15,    93,    17,    93,    51,    31,    98,
    98,    98,    31,    53,    92,    55,    38,    39,    58,    97,
    31,   145,   146,   542,     4,     5,     6,     7,    98,    31,
    10,    11,   131,   132,   133,    93,    16,   132,    98,   663,
    98,    28,    29,    98,    31,    98,    93,   288,    35,    36,
    97,    95,     8,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    98,   107,   108,   109,   110,   111,    55,   164,
   694,    98,    95,    95,   114,   316,    95,   596,   173,   174,
   175,    98,    38,    39,    95,   180,     8,    62,    63,    64,
    93,   186,   352,    95,    97,   188,   189,   190,   191,   192,
   724,   194,   195,    98,    91,    92,    98,   374,   374,   374,
    90,     8,    99,   153,    93,    95,    38,    39,    97,   214,
   100,   101,     4,     5,     6,     7,   170,   139,    10,    11,
   225,    66,    67,    93,    16,   147,   148,    97,    93,    95,
    95,    38,    39,    37,   131,   132,   133,   134,   135,    95,
   130,   138,    37,    93,    93,    95,   102,   137,    97,    93,
   106,    95,    93,    97,   144,    98,    97,    93,    98,   410,
   411,    97,   413,    95,    32,    33,   163,   164,   165,   166,
   167,   168,    69,    70,    71,    72,    73,    28,    29,    93,
    31,   511,   512,    97,    35,    36,   142,    98,    95,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    90,    95,
   160,   161,   162,    95,    55,    94,   102,    96,   100,   101,
   106,   462,   463,   464,   465,    92,    92,   322,   323,   324,
   325,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    98,    98,    30,    31,    94,    92,    96,   130,    92,
    91,    92,   493,   346,    93,   137,   142,    94,    99,    96,
    93,    97,   144,     4,     5,     6,     7,    97,    97,    10,
    11,    57,    58,    59,    60,    16,    94,    98,    96,   520,
   521,   158,   159,   160,   161,    97,    97,   382,    97,   384,
   131,   132,   133,   134,   135,    92,    92,   138,    92,    92,
    98,    12,    97,    90,    91,    97,   547,   548,   549,   550,
   551,   552,   553,   554,   555,   556,   557,   558,    97,    97,
    97,    97,   163,   164,   165,   166,   167,   168,    98,   570,
    97,    97,    93,    97,    94,    98,    98,   578,   579,   580,
   581,    97,    81,    82,    83,    97,    97,    86,    97,    90,
    97,    97,    97,   140,    95,    97,    95,    97,   599,   100,
   101,    98,    97,   102,   103,   104,   105,   106,    97,     4,
     5,     6,     7,    98,    97,    10,    11,    92,   619,   620,
    92,    16,    95,    97,    93,    95,    93,    93,    93,   130,
    98,    31,    92,    97,    97,    97,   137,    98,    97,    97,
    97,    97,    97,   144,   143,    97,    97,   648,   649,   650,
    97,   652,   653,   654,   655,   656,    97,    97,   659,    97,
   669,    97,    81,    82,    83,    97,    97,    86,    97,    97,
   671,   672,   673,   674,   675,    97,    95,   678,   698,    97,
    97,   682,    97,   102,   103,   104,   105,   106,   697,    97,
   545,    97,    97,    97,   695,    90,    97,    95,    95,    98,
    95,    97,    93,    97,    97,   100,   101,   727,    97,    97,
   711,   712,   713,   568,   715,    98,    98,   726,    97,    97,
    93,    98,    97,   523,   143,    93,    93,    93,    93,   749,
   731,   732,   733,    93,   735,   130,    93,    98,   739,    95,
    92,    96,   137,   598,    97,   746,    97,    97,    97,   144,
    97,    97,    97,    92,    92,    92,   757,   758,   759,   760,
    92,   616,    92,    92,   765,   766,   767,   768,   769,   624,
    92,    92,    92,    92,    92,   575,    92,    92,    92,   780,
   781,   782,   783,   784,   785,    97,   787,   531,   532,   533,
   534,   535,   536,   537,   538,   539,   540,   541,    97,   800,
   801,   802,   803,    97,    96,    98,    97,    97,    97,    97,
    97,   812,   813,    97,   815,   670,    97,    97,    97,   820,
   821,   621,    97,    97,    92,   826,   827,    97,    97,   830,
   831,    97,    97,    97,   835,   692,    97,   838,    97,   840,
    28,    29,    96,    31,    97,    97,    92,    35,    36,    97,
    97,    92,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    28,    29,    97,    31,    97,    97,    55,    35,    36,
    97,    97,    97,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    97,    97,    97,    92,    97,    97,    55,    97,
   374,    97,    97,    95,    97,    95,    97,    96,    96,     0,
    97,    97,    97,    91,    92,    97,    97,    97,    97,    95,
    97,    99,    97,    97,    97,    97,    97,    97,    97,    97,
    96,    96,    96,    96,    91,    92,    97,    96,     4,    97,
    95,    97,    99,    96,    96,   158,    97,    97,    97,    97,
    96,     0,    97,   131,   132,   133,   134,   135,    97,    97,
   138,    97,    97,    97,    97,    97,    97,    97,    97,    97,
    97,    97,    97,    96,   131,   132,   133,   134,   135,    96,
    96,   138,    97,    97,    97,   163,   164,   165,   166,   167,
   168,    97,    97,    97,    97,    96,    96,   108,    97,    97,
    97,    97,    96,   301,    97,    97,   163,   164,   165,   166,
   167,   168,    28,    29,    97,    31,    96,   263,    97,    35,
    36,    97,    97,    97,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    28,    29,    97,    31,    97,    96,    55,
    35,    36,    97,    97,    97,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    96,   693,   112,   259,   530,   692,
    55,   323,   315,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,
    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,
    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,   134,
   135,    -1,    -1,   138,    -1,    -1,    -1,   163,   164,   165,
   166,   167,   168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,
   165,   166,   167,   168,    28,    29,    -1,    31,    -1,    -1,
    -1,    35,    36,    -1,    -1,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    28,    29,    -1,    31,    -1,
    -1,    55,    35,    36,    -1,    -1,    -1,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
   134,   135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
   133,   134,   135,    -1,    -1,   138,    -1,    -1,    -1,   163,
   164,   165,   166,   167,   168,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   163,   164,   165,   166,   167,   168,    28,    29,    -1,    31,
    -1,    -1,    -1,    35,    36,    -1,    -1,    -1,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    28,    29,    -1,
    31,    -1,    -1,    55,    35,    36,    -1,    -1,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,     4,     5,     6,     7,    -1,    -1,    10,    11,    91,
    92,    -1,    -1,    16,    -1,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
   132,   133,   134,   135,    -1,    -1,   138,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
   131,   132,   133,   134,   135,    -1,    -1,   138,    -1,    -1,
    -1,   163,   164,   165,   166,   167,   168,    90,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,
    -1,    -1,   163,   164,   165,   166,   167,   168,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,
    93,    -1,    95,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,    -1,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,    31,    -1,    -1,
    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    31,    -1,   169,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    93,
    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,    93,    -1,    95,    -1,
    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,    31,    -1,   169,    -1,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    31,    -1,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,    93,    -1,    95,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,    93,    -1,    95,    -1,    -1,    -1,   136,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,    31,
    -1,   169,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,   169,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
    -1,    93,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,    93,    -1,
    95,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,    31,    -1,   169,    -1,    -1,
    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    31,    -1,   169,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    51,    -1,    -1,    -1,    -1,    93,    -1,    95,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,    93,    -1,    95,    -1,    -1,    -1,
   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
   109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,    31,    -1,   169,    -1,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
    -1,    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
    93,    -1,    95,    -1,    -1,    -1,   136,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,    31,    -1,   169,
    -1,    -1,    -1,   136,    -1,    36,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    49,    50,
    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,
    61,    -1,    -1,    -1,    65,    -1,   169,    68,    -1,    -1,
    -1,    -1,    -1,    74,    75,    76,    77,    78,    79,    80,
    -1,    82,    -1,    -1,    -1,    -1,    87,    88,    89,    93,
    -1,    -1,    93,    -1,    95,    -1,    -1,    -1,    -1,    -1,
    -1,   102,    -1,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,    -1,    -1,    -1,    -1,
    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   141,    -1,    -1,    -1,    36,    -1,    -1,    -1,   149,   150,
   151,   152,   153,   154,   155,   156,   157,    49,    50,    51,
    52,    53,    54,    -1,    56,   169,    -1,    -1,    -1,    61,
    -1,    -1,    -1,    65,    -1,    -1,    68,    -1,    -1,    -1,
    -1,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
    82,    -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,
    -1,    93,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,
   152,   153,   154,   155,   156,   157
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 116 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
		      setfunctions[fMODEL_LEAVE](&fhs_data);
                   ;
    break;}
case 2:
#line 122 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
		      setfunctions[fMODEL_HEAD](&fhs_data);
		   ;
    break;}
case 3:
#line 126 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
		      setfunctions[fMODEL_HEAD](&fhs_data);
		   ;
    break;}
case 15:
#line 151 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOINTORDER](&fhs_data);
		;
    break;}
case 16:
#line 155 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fOBJ_EXTEND](&fhs_data);
		;
    break;}
case 19:
#line 170 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFILE_HEAD](&fhs_data);
		;
    break;}
case 20:
#line 174 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
		setfunctions[fFILE_LEAVE](&fhs_data); 
		;
    break;}
case 21:
#line 182 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLODASS_HEAD](&fhs_data);
		    ;
    break;}
case 22:
#line 186 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LEAVE](&fhs_data); 
		    ;
    break;}
case 23:
#line 190 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLODASS_HEAD](&fhs_data);
		    ;
    break;}
case 24:
#line 194 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LEAVE](&fhs_data); 
		    ;
    break;}
case 25:
#line 202 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LEAVE](&fhs_data); 
		    ;
    break;}
case 26:
#line 206 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
	          	setfunctions[fASS_FROM_HEAD](&fhs_data);
		    ;
    break;}
case 27:
#line 210 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
	          	setfunctions[fASS_FROM_LEAVE](&fhs_data);
	            ;
    break;}
case 28:
#line 216 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fASS_HEAD](&fhs_data);
		    ;
    break;}
case 29:
#line 220 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fASS_HEAD](&fhs_data);
		    ;
    break;}
case 30:
#line 224 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fBBOARD_HEAD](&fhs_data);
		    ;
    break;}
case 31:
#line 228 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fBBOARD_HEAD](&fhs_data);
		    ;
    break;}
case 39:
#line 244 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSCRIPT	  ](&fhs_data);;
    break;}
case 40:
#line 245 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fID	  ](&fhs_data);;
    break;}
case 41:
#line 246 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTYPE	  ](&fhs_data);;
    break;}
case 42:
#line 247 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fFLAG	  ](&fhs_data);;
    break;}
case 43:
#line 248 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fLUFT	  ](&fhs_data);;
    break;}
case 44:
#line 249 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEMP	  ](&fhs_data);;
    break;}
case 45:
#line 250 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fABSEXP	  ](&fhs_data);;
    break;}
case 46:
#line 251 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fABSIMP	  ](&fhs_data);;
    break;}
case 47:
#line 252 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSTREU	  ](&fhs_data);;
    break;}
case 48:
#line 253 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fRESOLUTION ](&fhs_data); ;
    break;}
case 49:
#line 254 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fRESOLUTION ](&fhs_data); ;
    break;}
case 50:
#line 255 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDESC_EXTEND](&fhs_data); ;
    break;}
case 56:
#line 262 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fBBOARD_TYPE](&fhs_data);
		    ;
    break;}
case 59:
#line 272 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LOD_HEAD](&fhs_data); 
		    ;
    break;}
case 60:
#line 276 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LOD_LEAVE](&fhs_data); 
		    ;
    break;}
case 61:
#line 280 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LOD_HEAD](&fhs_data); 
		    ;
    break;}
case 62:
#line 284 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_LOD_LEAVE](&fhs_data); 
		    ;
    break;}
case 63:
#line 288 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_BBOX_HEAD](&fhs_data); 
		    ;
    break;}
case 64:
#line 292 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_BBOX_LEAVE](&fhs_data); 
		    ;
    break;}
case 65:
#line 296 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fASS_IDEAL_HEAD](&fhs_data); 
		    ;
    break;}
case 66:
#line 300 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fASS_IDEAL_LEAVE](&fhs_data);
		    ;
    break;}
case 67:
#line 317 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_DESC](&fhs_data);
		    ;
    break;}
case 68:
#line 321 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_LEAVE](&fhs_data);
		    ;
    break;}
case 69:
#line 325 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_FROM_HEAD](&fhs_data);
		    ;
    break;}
case 70:
#line 329 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_FROM_LEAVE](&fhs_data);
		    ;
    break;}
case 71:
#line 336 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_HEAD](&fhs_data);			
			;
    break;}
case 72:
#line 340 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_HEAD](&fhs_data);			
			;
    break;}
case 73:
#line 344 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLODGEO_HEAD](&fhs_data);			
			;
    break;}
case 74:
#line 348 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLODGEO_HEAD](&fhs_data);			
			;
    break;}
case 75:
#line 352 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTUBEGEO_HEAD](&fhs_data);			
			;
    break;}
case 76:
#line 356 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTUBEGEO_HEAD](&fhs_data);			
			;
    break;}
case 77:
#line 364 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_LOD_BODY_HEAD](&fhs_data);
		    ;
    break;}
case 78:
#line 368 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_LOD_BODY_LEAVE](&fhs_data);
		    ;
    break;}
case 79:
#line 372 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BODY_HEAD](&fhs_data);
		    ;
    break;}
case 80:
#line 376 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BODY_LEAVE](&fhs_data);
		    ;
    break;}
case 81:
#line 380 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BODY_HEAD](&fhs_data);
			setfunctions[fGEO_BODY_LEAVE](&fhs_data);
		    ;
    break;}
case 82:
#line 384 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BODY_HEAD](&fhs_data);
		    ;
    break;}
case 83:
#line 388 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BODY_LEAVE](&fhs_data);
		    ;
    break;}
case 86:
#line 398 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_LOD_HEAD](&fhs_data); 
		    ;
    break;}
case 87:
#line 402 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_LOD_DESC](&fhs_data);
		    ;
    break;}
case 88:
#line 406 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_LOD_LEAVE](&fhs_data); 
		    ;
    break;}
case 89:
#line 410 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_LOD_HEAD](&fhs_data); 
		    ;
    break;}
case 90:
#line 414 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_LOD_DESC](&fhs_data);
		    ;
    break;}
case 91:
#line 418 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_LOD_LEAVE](&fhs_data); 
		    ;
    break;}
case 92:
#line 422 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BBOX_HEAD](&fhs_data); 
		    ;
    break;}
case 93:
#line 426 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_BBOX_LEAVE](&fhs_data); 
		    ;
    break;}
case 94:
#line 430 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fGEO_IDEAL_HEAD](&fhs_data); 
		    ;
    break;}
case 95:
#line 434 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_IDEAL_DESC](&fhs_data);
		    ;
    break;}
case 96:
#line 438 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fGEO_IDEAL_LEAVE](&fhs_data);
		    ;
    break;}
case 97:
#line 451 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			    setfunctions[fEXTRUDE_HEAD](&fhs_data); 
			;
    break;}
case 98:
#line 455 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			    setfunctions[fEXTRUDE_LEAVE](&fhs_data);
			;
    break;}
case 99:
#line 459 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			    setfunctions[fREVOLUTE_HEAD](&fhs_data);
			;
    break;}
case 100:
#line 463 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			    setfunctions[fREVOLUTE_LEAVE](&fhs_data);
			;
    break;}
case 101:
#line 471 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
				setfunctions[fSPHERE](&fhs_data);
			  ;
    break;}
case 102:
#line 483 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
				setfunctions[fCONE](&fhs_data);
			  ;
    break;}
case 103:
#line 496 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
				setfunctions[fTORUS](&fhs_data);
			  ;
    break;}
case 104:
#line 506 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
				setfunctions[fBOX](&fhs_data);
			  ;
    break;}
case 105:
#line 509 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLYEDER_HEAD](&fhs_data);
		    ;
    break;}
case 106:
#line 513 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLYEDER_LEAVE](&fhs_data);
		    ;
    break;}
case 108:
#line 518 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPRIM_EXTEND](&fhs_data);
		    ;
    break;}
case 115:
#line 533 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLY_HEAD](&fhs_data);
		    ;
    break;}
case 116:
#line 537 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLYGON](&fhs_data);
		    ;
    break;}
case 117:
#line 541 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTRISTRIP_HEAD](&fhs_data);
		    ;
    break;}
case 118:
#line 545 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fTRISTRIP](&fhs_data); 
		    ;
    break;}
case 119:
#line 549 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTRIFAN_HEAD](&fhs_data);
		    ;
    break;}
case 120:
#line 553 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTRIFAN](&fhs_data); 
		    ;
    break;}
case 121:
#line 557 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fQUADSTRIP_HEAD](&fhs_data);
		    ;
    break;}
case 122:
#line 561 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fQUADSTRIP](&fhs_data); 
		    ;
    break;}
case 123:
#line 565 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLINE_HEAD](&fhs_data);
		    ;
    break;}
case 124:
#line 569 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fLINE](&fhs_data); 
		    ;
    break;}
case 125:
#line 573 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLINES_HEAD](&fhs_data);
		    ;
    break;}
case 126:
#line 577 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fLINES](&fhs_data); 
		    ;
    break;}
case 127:
#line 581 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fCLOSEDLINE_HEAD](&fhs_data);
		    ;
    break;}
case 128:
#line 585 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fCLOSEDLINE](&fhs_data); 
		    ;
    break;}
case 129:
#line 589 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOINTS_HEAD](&fhs_data);
		    ;
    break;}
case 130:
#line 593 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fPOINTS](&fhs_data); 
		    ;
    break;}
case 131:
#line 597 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTRIANGLES_HEAD](&fhs_data);
		    ;
    break;}
case 132:
#line 601 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fTRIANGLES](&fhs_data); 
		    ;
    break;}
case 133:
#line 605 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fQUADS_HEAD](&fhs_data);
		    ;
    break;}
case 134:
#line 609 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fQUADS](&fhs_data); 
		    ;
    break;}
case 135:
#line 613 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTUBE_HEAD](&fhs_data);
		    ;
    break;}
case 136:
#line 617 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fTUBE](&fhs_data); 
		    ;
    break;}
case 137:
#line 621 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLY_EXTEND](&fhs_data);
		    ;
    break;}
case 141:
#line 632 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPPOS	    ](&fhs_data);;
    break;}
case 142:
#line 633 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPTEX	    ](&fhs_data);;
    break;}
case 143:
#line 634 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPTEX	    ](&fhs_data);;
    break;}
case 144:
#line 635 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPTEX	    ](&fhs_data);;
    break;}
case 145:
#line 636 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPNORM	    ](&fhs_data);;
    break;}
case 146:
#line 637 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPNORM	    ](&fhs_data);;
    break;}
case 147:
#line 638 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCOL	    ](&fhs_data);;
    break;}
case 148:
#line 639 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCOL	    ](&fhs_data);;
    break;}
case 149:
#line 640 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCOL4	    ](&fhs_data);;
    break;}
case 150:
#line 641 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCOL4	    ](&fhs_data);;
    break;}
case 151:
#line 642 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPIND	    ](&fhs_data);;
    break;}
case 152:
#line 643 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPRAD	    ](&fhs_data);;
    break;}
case 153:
#line 644 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCIND	    ](&fhs_data);;
    break;}
case 154:
#line 645 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRIND	    ](&fhs_data);;
    break;}
case 155:
#line 646 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPNIND	    ](&fhs_data);;
    break;}
case 156:
#line 647 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPTIND	    ](&fhs_data);;
    break;}
case 157:
#line 648 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPT3IND	    ](&fhs_data);;
    break;}
case 158:
#line 649 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCNIND	    ](&fhs_data);;
    break;}
case 159:
#line 650 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTIND	    ](&fhs_data);;
    break;}
case 160:
#line 651 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCT3IND	    ](&fhs_data);;
    break;}
case 161:
#line 652 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRNIND	](&fhs_data);;
    break;}
case 162:
#line 653 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRTIND	](&fhs_data);;
    break;}
case 163:
#line 654 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRT3IND	](&fhs_data);;
    break;}
case 164:
#line 655 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPTNIND	    ](&fhs_data);;
    break;}
case 165:
#line 656 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPT3NIND	    ](&fhs_data);;
    break;}
case 166:
#line 657 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTNIND	    ](&fhs_data);;
    break;}
case 167:
#line 658 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCT3NIND   ](&fhs_data);;
    break;}
case 168:
#line 659 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRTNIND	](&fhs_data);;
    break;}
case 169:
#line 660 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPCTRT3NIND](&fhs_data);;
    break;}
case 170:
#line 662 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fTRANSMISSION](&fhs_data);;
    break;}
case 173:
#line 665 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ setfunctions[fPOLYELEM_EXTEND ](&fhs_data); ;
    break;}
case 174:
#line 671 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fTEXT_DESC](&fhs_data);
		    ;
    break;}
case 175:
#line 675 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fTEXT_LEAVE](&fhs_data);
		    ;
    break;}
case 176:
#line 680 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTEXT_HEAD](&fhs_data);				
			;
    break;}
case 179:
#line 690 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTEXT_COL](&fhs_data);				
			;
    break;}
case 180:
#line 694 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fTEXT_POS](&fhs_data);				
			;
    break;}
case 181:
#line 698 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
 			setfunctions[fTEXT_FONT](&fhs_data);
			;
    break;}
case 182:
#line 702 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
 			setfunctions[fTEXT_STRING](&fhs_data);
			;
    break;}
case 183:
#line 706 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPRAD](&fhs_data);	
			;
    break;}
case 184:
#line 710 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPIND](&fhs_data);	
			;
    break;}
case 185:
#line 714 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPNORM](&fhs_data);	
			;
    break;}
case 186:
#line 722 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_UNI_HEAD](&fhs_data);
		    ;
    break;}
case 187:
#line 726 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_HEAD](&fhs_data);
		    ;
    break;}
case 188:
#line 730 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_EMPTY_HEAD](&fhs_data);
		    ;
    break;}
case 189:
#line 734 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_POOL](&fhs_data);
		    ;
    break;}
case 190:
#line 740 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_UNI_HEAD](&fhs_data);
		    ;
    break;}
case 191:
#line 744 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_UNI_LEAVE](&fhs_data);
		    ;
    break;}
case 192:
#line 748 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_HEAD](&fhs_data);
		    ;
    break;}
case 193:
#line 752 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_LEAVE](&fhs_data);
			;
    break;}
case 194:
#line 756 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_EMPTY_HEAD](&fhs_data);
		    ;
    break;}
case 199:
#line 768 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fRAD_ELEM_HEAD](&fhs_data);
		    ;
    break;}
case 200:
#line 772 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fRAD_ELEM_LEAVE](&fhs_data);
		    ;
    break;}
case 202:
#line 779 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_ELEM_HEAD](&fhs_data);
		    ;
    break;}
case 203:
#line 784 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPATCH_ADAP_ELEM_LEAVE](&fhs_data);
		    ;
    break;}
case 204:
#line 792 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fUSEMAT](&fhs_data);
		    ;
    break;}
case 205:
#line 796 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fUSEMAT_FROM](&fhs_data); 
		    ;
    break;}
case 206:
#line 801 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fDEFMAT_HEAD](&fhs_data);
		    ;
    break;}
case 207:
#line 805 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fDEFMAT_LEAVE](&fhs_data);
		    ;
    break;}
case 208:
#line 809 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fDEFMAT_HEAD](&fhs_data);
		    ;
    break;}
case 209:
#line 813 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{ 
			setfunctions[fDEFMAT_LEAVE](&fhs_data);
		    ;
    break;}
case 212:
#line 831 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fMAT_ELE](&fhs_data);;
    break;}
case 213:
#line 833 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fCOLOR		](&fhs_data);;
    break;}
case 214:
#line 834 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fNAMED_COLOR	](&fhs_data);;
    break;}
case 215:
#line 835 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDIFFUSE_SINGLE	](&fhs_data);;
    break;}
case 216:
#line 836 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDIFFUSE_SINGLE	](&fhs_data);;
    break;}
case 217:
#line 837 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDIFFUSE_VECTOR	](&fhs_data);;
    break;}
case 218:
#line 838 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSPECULAR_SINGLE	](&fhs_data);;
    break;}
case 219:
#line 839 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSPECULAR_SINGLE	](&fhs_data);;
    break;}
case 220:
#line 840 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSPECULAR_VECTOR	](&fhs_data);;
    break;}
case 221:
#line 841 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fAMBIENT_SINGLE	](&fhs_data);;
    break;}
case 222:
#line 842 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fAMBIENT_VECTOR	](&fhs_data);;
    break;}
case 223:
#line 843 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fEMISSION_SINGLE	](&fhs_data);;
    break;}
case 224:
#line 844 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fEMISSION_VECTOR	](&fhs_data);;
    break;}
case 225:
#line 845 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fALPHA		](&fhs_data);;
    break;}
case 226:
#line 846 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fALPHA		](&fhs_data);;
    break;}
case 227:
#line 847 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fALPHA		](&fhs_data);;
    break;}
case 228:
#line 848 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSHININESS	](&fhs_data);;
    break;}
case 229:
#line 849 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXTURE		](&fhs_data);;
    break;}
case 230:
#line 851 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXFILTER	](&fhs_data);;
    break;}
case 231:
#line 853 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXWRAP		](&fhs_data);;
    break;}
case 232:
#line 855 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXQUALITY	](&fhs_data);;
    break;}
case 233:
#line 857 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXBLEND	    ](&fhs_data);;
    break;}
case 234:
#line 858 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTEXTRANSCOLOR](&fhs_data);;
    break;}
case 235:
#line 859 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fUNLIT		](&fhs_data);;
    break;}
case 236:
#line 860 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fLIT			](&fhs_data);;
    break;}
case 237:
#line 861 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fMAT_EXTEND	](&fhs_data);;
    break;}
case 238:
#line 863 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fIOR		](&fhs_data);;
    break;}
case 239:
#line 864 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fRAD		](&fhs_data);;
    break;}
case 240:
#line 865 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fBRDF		](&fhs_data);;
    break;}
case 241:
#line 867 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTYPE		](&fhs_data);;
    break;}
case 242:
#line 868 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fLSDIREKT		](&fhs_data);;
    break;}
case 243:
#line 869 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fLSFLANKEN	](&fhs_data);;
    break;}
case 244:
#line 870 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTSDIREKT		](&fhs_data);;
    break;}
case 245:
#line 871 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTSFLANKEN	](&fhs_data);;
    break;}
case 246:
#line 872 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fKSNACHHALL	](&fhs_data);;
    break;}
case 247:
#line 873 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fFLAECHENMASSE	](&fhs_data);;
    break;}
case 248:
#line 874 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fABSTRAHL		](&fhs_data);;
    break;}
case 249:
#line 875 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fKOINZIDENZ	](&fhs_data);;
    break;}
case 250:
#line 876 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fINVERLUST	](&fhs_data);;
    break;}
case 266:
#line 911 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
		     setfunctions[fPPOOL_HEAD](&fhs_data); 
		    ;
    break;}
case 267:
#line 917 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPPOOL_LEAVE](&fhs_data);
		    ;
    break;}
case 269:
#line 926 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
		     setfunctions[fPOLYPOOL_HEAD](&fhs_data); 
		    ;
    break;}
case 270:
#line 932 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fPOLYPOOL_LEAVE](&fhs_data);
		    ;
    break;}
case 271:
#line 942 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_HEAD](&fhs_data);
		    ;
    break;}
case 272:
#line 947 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_DESC](&fhs_data);
		    ;
    break;}
case 273:
#line 951 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_LEAVE](&fhs_data);
		    ;
    break;}
case 274:
#line 955 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_HEAD](&fhs_data);
		    ;
    break;}
case 275:
#line 960 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_DESC](&fhs_data);
		    ;
    break;}
case 276:
#line 964 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_LEAVE](&fhs_data);
		    ;
    break;}
case 279:
#line 980 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_POINT](&fhs_data);
		    ;
    break;}
case 280:
#line 984 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_MAKEPOINT](&fhs_data);
		    ;
    break;}
case 281:
#line 994 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_DIRECT](&fhs_data);
		    ;
    break;}
case 282:
#line 998 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_MAKEDIRECT](&fhs_data);
		    ;
    break;}
case 283:
#line 1013 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_SPOT](&fhs_data);
		    ;
    break;}
case 284:
#line 1019 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_SPOTPARAMS](&fhs_data);
		    ;
    break;}
case 285:
#line 1026 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_AMBIENT](&fhs_data);
		    ;
    break;}
case 286:
#line 1033 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_POSITION](&fhs_data);
		    ;
    break;}
case 287:
#line 1040 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_COLOR](&fhs_data);
		    ;
    break;}
case 288:
#line 1044 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_NAMEDCOLOR](&fhs_data);
		    ;
    break;}
case 289:
#line 1051 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_DIRECTION](&fhs_data);
		    ;
    break;}
case 290:
#line 1055 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_LVK_NAME](&fhs_data);
		    ;
    break;}
case 291:
#line 1062 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_LVK_DATA](&fhs_data);
		    ;
    break;}
case 292:
#line 1069 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_BACKGROUND](&fhs_data);
		    ;
    break;}
case 293:
#line 1073 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLIGHT_EXTEND](&fhs_data);
		    ;
    break;}
case 294:
#line 1079 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_HEAD](&fhs_data);
			;
    break;}
case 295:
#line 1083 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_LEAVE](&fhs_data);
			;
    break;}
case 296:
#line 1087 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_HEAD](&fhs_data);
			;
    break;}
case 297:
#line 1091 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_LEAVE](&fhs_data);
			;
    break;}
case 300:
#line 1104 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_BACKGROUND](&fhs_data);
		    ;
    break;}
case 301:
#line 1108 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_NAMEDBACKGROUND](&fhs_data);
		    ;
    break;}
case 302:
#line 1115 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_AMBIENT](&fhs_data);
		    ;
    break;}
case 303:
#line 1119 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_NAMEDAMBIENT](&fhs_data);
		    ;
    break;}
case 304:
#line 1123 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fENV_EXTEND](&fhs_data);
		    ;
    break;}
case 311:
#line 1143 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fVECT3](&fhs_data);
		    ;
    break;}
case 312:
#line 1149 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fVECT4](&fhs_data);
		    ;
    break;}
case 313:
#line 1155 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fVECT2](&fhs_data);
		    ;
    break;}
case 314:
#line 1161 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLVECT_HEAD](&fhs_data);						
			;
    break;}
case 315:
#line 1165 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLVECT_HEAD](&fhs_data);						
			;
    break;}
case 318:
#line 1173 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fLVECT_ELEM](&fhs_data);			
			;
    break;}
case 321:
#line 1190 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQ_OKTAV](&fhs_data);
		    ;
    break;}
case 323:
#line 1195 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQ_TERZ](&fhs_data);
		    ;
    break;}
case 325:
#line 1200 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQ_REAL](&fhs_data);
		    ;
    break;}
case 326:
#line 1204 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQ_KOMPLEX](&fhs_data);
		    ;
    break;}
case 327:
#line 1210 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQH_REAL](&fhs_data);
		    ;
    break;}
case 329:
#line 1215 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQH_KOMPLEX](&fhs_data);
		    ;
    break;}
case 331:
#line 1220 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQH_TENSOR](&fhs_data);
		    ;
    break;}
case 333:
#line 1226 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{
			setfunctions[fFREQ_BODY](&fhs_data);
		    ;
    break;}
case 337:
#line 1236 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fFREQE_REAL	](&fhs_data);;
    break;}
case 338:
#line 1237 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fFREQE_KOMPLEX](&fhs_data);;
    break;}
case 339:
#line 1238 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fFREQE_TENSOR	](&fhs_data);;
    break;}
case 340:
#line 1241 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDCS	    ](&fhs_data);;
    break;}
case 341:
#line 1242 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSCS	    ](&fhs_data);;
    break;}
case 342:
#line 1243 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSCS	    ](&fhs_data);;
    break;}
case 343:
#line 1244 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fTRANSLATE    ](&fhs_data);;
    break;}
case 344:
#line 1246 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fORIENTATION    ](&fhs_data);;
    break;}
case 345:
#line 1247 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fROTATE	    ](&fhs_data);;
    break;}
case 346:
#line 1248 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fROTATE_AXIS  ](&fhs_data);;
    break;}
case 347:
#line 1249 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSCALE	    ](&fhs_data);;
    break;}
case 348:
#line 1250 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSCALE_UNI    ](&fhs_data);;
    break;}
case 349:
#line 1251 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fSTATIC	    ](&fhs_data);;
    break;}
case 350:
#line 1252 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"
{setfunctions[fDYNAMIC	    ](&fhs_data);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1260 "/e/user/gerrit/Projects/OpenSG/OpenSG/Loader/Fhs/fhs.y"



