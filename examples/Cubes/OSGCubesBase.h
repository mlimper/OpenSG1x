/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *                 Copyright (C) 2000 by the OpenSG Forum                    *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Cubes
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCUBESBASE_H_
#define _OSGCUBESBASE_H_
#ifdef __sgi
#pragma once
#endif

//---------------------------------------------------------------------------
//  Includes
//---------------------------------------------------------------------------

#include <OpenSG/OSGConfig.h>

#include <OpenSG/OSGBaseTypes.h>
#include <OpenSG/OSGFieldDescription.h>
#include <OpenSG/OSGFieldContainer.h>
#include <OSGMyLibDef.h>
#include <OpenSG/OSGNodeCore.h>
#include <OpenSG/OSGMaterialFields.h>	// Material type
#include <OpenSG/OSGPnt3fFields.h>	// Position type
#include <OpenSG/OSGReal32Fields.h>	// Length type
#include <OpenSG/OSGColor3fFields.h>	// Color type

#include <OSGCubesFields.h>

OSG_BEGIN_NAMESPACE

//---------------------------------------------------------------------------
//  Forward References
//---------------------------------------------------------------------------

class Cubes;

//---------------------------------------------------------------------------
//   Types
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//  Class
//---------------------------------------------------------------------------

/*! Cubes Base Class. */

class OSG_MYLIB_DLLMAPPING CubesBase : public NodeCore
{
  private:

    typedef NodeCore Inherited;

  public:

    //-----------------------------------------------------------------------
    //   constants                                                           
    //-----------------------------------------------------------------------
    
	static const osg::UInt32    MaterialFieldId	= Inherited::NextFieldId;
	static const osg::BitVector MaterialFieldMask	= Inherited::NextFieldMask;

	static const osg::UInt32    PositionFieldId   = MaterialFieldId + 1;
	static const osg::BitVector PositionFieldMask = MaterialFieldMask << 1;

	static const osg::UInt32    LengthFieldId   = PositionFieldId + 1;
	static const osg::BitVector LengthFieldMask = PositionFieldMask << 1;

	static const osg::UInt32    ColorFieldId   = LengthFieldId + 1;
	static const osg::BitVector ColorFieldMask = LengthFieldMask << 1;

	static const osg::UInt32	NextFieldId   = ColorFieldId + 1;
	static const osg::BitVector	NextFieldMask = ColorFieldMask << 1;


    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    static const char *getClassname(void) { return "CubesBase"; };

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    /*-------------- general fieldcontainer declaration --------------------*/

    virtual       OSG::FieldContainerType &getType(void); 
    virtual const OSG::FieldContainerType &getType(void) const; 
    
    static OSG::FieldContainerType &getClassType  (void); 
    static OSG::UInt32              getClassTypeId(void); 
    static CubesPtr         create        (void); 
    static CubesPtr         createEmpty   (void); 

    virtual OSG::FieldContainerPtr shallowCopy(void) const; 
    virtual OSG::UInt32            getSize    (void) const;

    /*--------------------------- access fields ----------------------------*/

    //! Return the fields.

    inline SFMaterialPtr	*getSFMaterial(void);
    inline MFPnt3f	*getMFPosition(void);
    inline MFReal32	*getMFLength(void);
    inline MFColor3f	*getMFColor(void);

    /*----------------------------- access ----------------------------------*/

    //!@{ Return the fields' values.

    inline       MaterialPtr	&getMaterial(void);
    inline const MaterialPtr	&getMaterial(void) const;
    inline       void	             setMaterial( MaterialPtr value );

    inline       Pnt3f	               &getPosition( UInt32 index );
    inline       MFPnt3f &getPosition(void);
    inline const MFPnt3f &getPosition(void) const;
    inline       Real32	               &getLength( UInt32 index );
    inline       MFReal32 &getLength(void);
    inline const MFReal32 &getLength(void) const;
    inline       Color3f	               &getColor( UInt32 index );
    inline       MFColor3f &getColor(void);
    inline const MFColor3f &getColor(void) const;

    //!@}

    /*-------------------------- transformation ----------------------------*/

    /*------------------------------ volume -------------------------------*/

    /*------------------------------ dump -----------------------------------*/

  protected:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //! The fields storing the data.

    /*! The cubes' material.
     */
    SFMaterialPtr	_material;
    /*! The cubes' positions.
     */
    MFPnt3f	_position;
    /*! The cubes' sizes.
     */
    MFReal32	_length;
    /*! The cubes' colors.
     */
    MFColor3f	_color;

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    CubesBase(void);
    CubesBase(const CubesBase &source);
    virtual ~CubesBase(void); 
    

  private:

    //-----------------------------------------------------------------------
    //   enums                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   types                                                               
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   friend classes                                                      
    //-----------------------------------------------------------------------

    friend class FieldContainer;

    //-----------------------------------------------------------------------
    //   friend functions                                                    
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   class variables                                                     
    //-----------------------------------------------------------------------

    static char cvsid[];

    static FieldDescription   _desc[];

    static FieldContainerType _type;


    //-----------------------------------------------------------------------
    //   class functions                                                     
    //-----------------------------------------------------------------------
    

    //-----------------------------------------------------------------------
    //   instance variables                                                  
    //-----------------------------------------------------------------------

    //-----------------------------------------------------------------------
    //   instance functions                                                  
    //-----------------------------------------------------------------------

    // prohibit default functions (move to 'public' if you need one)

    void operator =(const Cubes &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


/** \brief class pointer
 */
typedef CubesBase *CubesBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCUBESBASE_H_ */
