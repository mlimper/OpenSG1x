/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000,2001 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Cubes!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEMYLIB
#define OSG_COMPILECUBESINST

#include <stdlib.h>
#include <stdio.h>

#include <OpenSG/OSGConfig.h>

#include "OSGCubesBase.h"
#include "OSGCubes.h"


OSG_BEGIN_NAMESPACE

DataType FieldDataTraits<CubesPtr>::_type("CubesPtr", true);

#if defined(__sgi)

#pragma instantiate SField<CubesPtr>::_fieldType
#pragma instantiate MField<CubesPtr>::_fieldType

#else

OSG_DLLEXPORT_DEF1(SField, CubesPtr, OSG_MYLIB_DLLTMPLMAPPING)
OSG_DLLEXPORT_DEF1(MField, CubesPtr, OSG_MYLIB_DLLTMPLMAPPING)

#endif

OSG_END_NAMESPACE

OSG_USING_NAMESPACE

const OSG::BitVector	CubesBase::MaterialFieldMask = 
    (1 << CubesBase::MaterialFieldId);

const OSG::BitVector	CubesBase::PositionFieldMask = 
    (1 << CubesBase::PositionFieldId);

const OSG::BitVector	CubesBase::LengthFieldMask = 
    (1 << CubesBase::LengthFieldId);

const OSG::BitVector	CubesBase::ColorFieldMask = 
    (1 << CubesBase::ColorFieldId);



char CubesBase::cvsid[] = "@(#)$Id: OSGCubesBase.cpp,v 1.5 2001/10/03 20:37:37 dirk Exp $";

// Field descriptions

/*! \var MaterialPtr     CubesBase::_sfMaterial
    The cubes' material.
*/
/*! \var Pnt3f           CubesBase::_mfPosition
    The cubes' positions.
*/
/*! \var Real32          CubesBase::_mfLength
    The cubes' sizes.
*/
/*! \var Color3f         CubesBase::_mfColor
    The cubes' colors.
*/
//! Cubes description

FieldDescription *CubesBase::_desc[] = 
{
    new FieldDescription(SFMaterialPtr::getClassType(), 
                     "material", 
                     MaterialFieldId, MaterialFieldMask,
                     false,
                     (FieldAccessMethod) &CubesBase::getSFMaterial),
    new FieldDescription(MFPnt3f::getClassType(), 
                     "position", 
                     PositionFieldId, PositionFieldMask,
                     false,
                     (FieldAccessMethod) &CubesBase::getMFPosition),
    new FieldDescription(MFReal32::getClassType(), 
                     "length", 
                     LengthFieldId, LengthFieldMask,
                     false,
                     (FieldAccessMethod) &CubesBase::getMFLength),
    new FieldDescription(MFColor3f::getClassType(), 
                     "color", 
                     ColorFieldId, ColorFieldMask,
                     false,
                     (FieldAccessMethod) &CubesBase::getMFColor)
};

//! Cubes type

FieldContainerType CubesBase::_type(
    "Cubes",
    "NodeCore",
    NULL,
    (PrototypeCreateF) &CubesBase::createEmpty,
    Cubes::initMethod,
    _desc,
    sizeof(_desc));

//OSG_FIELD_CONTAINER_DEF(CubesBase, CubesPtr)

/*------------------------------ get -----------------------------------*/

static const char *getClassname(void)
{
    return "Cubes"; 
}

FieldContainerType &CubesBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CubesBase::getType(void) const 
{
    return _type;
} 
/*! \}                                                                 */

FieldContainerPtr CubesBase::shallowCopy(void) const 
{ 
    CubesPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const Cubes *>(this)); 

    return returnValue; 
}

UInt32 CubesBase::getContainerSize(void) const 
{ 
    return sizeof(CubesBase); 
}


void CubesBase::executeSync(      FieldContainer &other,
                                    const BitVector      &whichField)
{
    this->executeSyncImpl((CubesBase *) &other, whichField);
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

CubesBase::CubesBase(void) :
	_sfMaterial               (), 
	_mfPosition               (), 
	_mfLength                 (), 
	_mfColor                  (), 
	Inherited() 
{
}

//! Copy Constructor

CubesBase::CubesBase(const CubesBase &source) :
	_sfMaterial               (source._sfMaterial               ), 
	_mfPosition               (source._mfPosition               ), 
	_mfLength                 (source._mfLength                 ), 
	_mfColor                  (source._mfColor                  ), 
	Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

CubesBase::~CubesBase(void)
{
}

/*------------------------------ access -----------------------------------*/

UInt32 CubesBase::getBinSize(const BitVector &whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _mfPosition.getBinSize();
    }

    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _mfLength.getBinSize();
    }

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _mfColor.getBinSize();
    }


    return returnValue;
}

MemoryHandle CubesBase::copyToBin(      MemoryHandle  pMem,
                                          const BitVector    &whichField)
{
    pMem = Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        pMem = _sfMaterial.copyToBin(pMem);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        pMem = _mfPosition.copyToBin(pMem);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        pMem = _mfLength.copyToBin(pMem);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        pMem = _mfColor.copyToBin(pMem);


    return pMem;
}

MemoryHandle CubesBase::copyFromBin(      MemoryHandle  pMem,
                                            const BitVector    &whichField)
{
    pMem = Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        pMem = _sfMaterial.copyFromBin(pMem);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        pMem = _mfPosition.copyFromBin(pMem);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        pMem = _mfLength.copyFromBin(pMem);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        pMem = _mfColor.copyFromBin(pMem);


    return pMem;
}

void CubesBase::executeSyncImpl(      CubesBase *pOther,
                                        const BitVector         &whichField)
{

    Inherited::executeSyncImpl(pOther, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _mfPosition.syncWith(pOther->_mfPosition);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        _mfLength.syncWith(pOther->_mfLength);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _mfColor.syncWith(pOther->_mfColor);


}

